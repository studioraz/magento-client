/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  InventoryApiDataSourceInterface,
  InventoryApiDataSourceSearchResultsInterface,
  PostV1InventorySourcesRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InventoryApiDataSourceInterfaceFromJSON,
    InventoryApiDataSourceInterfaceToJSON,
    InventoryApiDataSourceSearchResultsInterfaceFromJSON,
    InventoryApiDataSourceSearchResultsInterfaceToJSON,
    PostV1InventorySourcesRequestFromJSON,
    PostV1InventorySourcesRequestToJSON,
} from '../models';

export interface GetV1InventorySourcesRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface GetV1InventorySourcesSourceCodeRequest {
    sourceCode: string;
}

export interface PostV1InventorySourcesOperationRequest {
    postV1InventorySourcesRequest?: PostV1InventorySourcesRequest;
}

export interface PutV1InventorySourcesSourceCodeRequest {
    sourceCode: string;
    postV1InventorySourcesRequest?: PostV1InventorySourcesRequest;
}

/**
 * 
 */
export class InventoryApiSourceRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Find Sources by SearchCriteria SearchCriteria is not required because load all stocks is useful case
     */
    async getV1InventorySourcesRaw(requestParameters: GetV1InventorySourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryApiDataSourceSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/inventory/sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryApiDataSourceSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Find Sources by SearchCriteria SearchCriteria is not required because load all stocks is useful case
     */
    async getV1InventorySources(requestParameters: GetV1InventorySourcesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryApiDataSourceSearchResultsInterface> {
        const response = await this.getV1InventorySourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Source data by given code. If you want to create plugin on get method, also you need to create separate plugin on getList method, because entity loading way is different for these methods
     */
    async getV1InventorySourcesSourceCodeRaw(requestParameters: GetV1InventorySourcesSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryApiDataSourceInterface>> {
        if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
            throw new runtime.RequiredError('sourceCode','Required parameter requestParameters.sourceCode was null or undefined when calling getV1InventorySourcesSourceCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/inventory/sources/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryApiDataSourceInterfaceFromJSON(jsonValue));
    }

    /**
     * Get Source data by given code. If you want to create plugin on get method, also you need to create separate plugin on getList method, because entity loading way is different for these methods
     */
    async getV1InventorySourcesSourceCode(requestParameters: GetV1InventorySourcesSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryApiDataSourceInterface> {
        const response = await this.getV1InventorySourcesSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save Source data
     */
    async postV1InventorySourcesRaw(requestParameters: PostV1InventorySourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/inventory/sources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1InventorySourcesRequestToJSON(requestParameters.postV1InventorySourcesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseFromJSON(jsonValue));
    }

    /**
     * Save Source data
     */
    async postV1InventorySources(requestParameters: PostV1InventorySourcesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorResponse> {
        const response = await this.postV1InventorySourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save Source data
     */
    async putV1InventorySourcesSourceCodeRaw(requestParameters: PutV1InventorySourcesSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorResponse>> {
        if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
            throw new runtime.RequiredError('sourceCode','Required parameter requestParameters.sourceCode was null or undefined when calling putV1InventorySourcesSourceCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/inventory/sources/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1InventorySourcesRequestToJSON(requestParameters.postV1InventorySourcesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseFromJSON(jsonValue));
    }

    /**
     * Save Source data
     */
    async putV1InventorySourcesSourceCode(requestParameters: PutV1InventorySourcesSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorResponse> {
        const response = await this.putV1InventorySourcesSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
