/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataProductAttributeInterface,
  ErrorResponse,
} from '../models';
import {
    CatalogDataProductAttributeInterfaceFromJSON,
    CatalogDataProductAttributeInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface GetV1ProductsMediaTypesAttributeSetNameRequest {
    attributeSetName: string;
}

/**
 * 
 */
export class CatalogProductMediaAttributeManagementV1Api extends runtime.BaseAPI {

    /**
     * Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set.
     */
    async getV1ProductsMediaTypesAttributeSetNameRaw(requestParameters: GetV1ProductsMediaTypesAttributeSetNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataProductAttributeInterface>>> {
        if (requestParameters.attributeSetName === null || requestParameters.attributeSetName === undefined) {
            throw new runtime.RequiredError('attributeSetName','Required parameter requestParameters.attributeSetName was null or undefined when calling getV1ProductsMediaTypesAttributeSetName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/media/types/{attributeSetName}`.replace(`{${"attributeSetName"}}`, encodeURIComponent(String(requestParameters.attributeSetName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataProductAttributeInterfaceFromJSON));
    }

    /**
     * Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set.
     */
    async getV1ProductsMediaTypesAttributeSetName(requestParameters: GetV1ProductsMediaTypesAttributeSetNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataProductAttributeInterface>> {
        const response = await this.getV1ProductsMediaTypesAttributeSetNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
