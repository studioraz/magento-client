"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameworkDataVideoContentInterfaceToJSON = exports.FrameworkDataVideoContentInterfaceFromJSONTyped = exports.FrameworkDataVideoContentInterfaceFromJSON = exports.instanceOfFrameworkDataVideoContentInterface = void 0;
/**
 * Check if a given object implements the FrameworkDataVideoContentInterface interface.
 */
function instanceOfFrameworkDataVideoContentInterface(value) {
    var isInstance = true;
    isInstance = isInstance && "mediaType" in value;
    isInstance = isInstance && "videoProvider" in value;
    isInstance = isInstance && "videoUrl" in value;
    isInstance = isInstance && "videoTitle" in value;
    isInstance = isInstance && "videoDescription" in value;
    isInstance = isInstance && "videoMetadata" in value;
    return isInstance;
}
exports.instanceOfFrameworkDataVideoContentInterface = instanceOfFrameworkDataVideoContentInterface;
function FrameworkDataVideoContentInterfaceFromJSON(json) {
    return FrameworkDataVideoContentInterfaceFromJSONTyped(json, false);
}
exports.FrameworkDataVideoContentInterfaceFromJSON = FrameworkDataVideoContentInterfaceFromJSON;
function FrameworkDataVideoContentInterfaceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'mediaType': json['media_type'],
        'videoProvider': json['video_provider'],
        'videoUrl': json['video_url'],
        'videoTitle': json['video_title'],
        'videoDescription': json['video_description'],
        'videoMetadata': json['video_metadata'],
    };
}
exports.FrameworkDataVideoContentInterfaceFromJSONTyped = FrameworkDataVideoContentInterfaceFromJSONTyped;
function FrameworkDataVideoContentInterfaceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'media_type': value.mediaType,
        'video_provider': value.videoProvider,
        'video_url': value.videoUrl,
        'video_title': value.videoTitle,
        'video_description': value.videoDescription,
        'video_metadata': value.videoMetadata,
    };
}
exports.FrameworkDataVideoContentInterfaceToJSON = FrameworkDataVideoContentInterfaceToJSON;
//# sourceMappingURL=FrameworkDataVideoContentInterface.js.map