/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerDataAddressInterface,
  CustomerDataCustomerInterface,
  CustomerDataValidationResultsInterface,
  ErrorResponse,
  PostV1CustomersConfirmRequest,
  PostV1CustomersIsEmailAvailableRequest,
  PostV1CustomersRequest,
  PostV1CustomersResetPasswordRequest,
  PutV1CustomersMeActivateRequest,
  PutV1CustomersMePasswordRequest,
  PutV1CustomersPasswordRequest,
  PutV1CustomersValidateRequest,
} from '../models';
import {
    CustomerDataAddressInterfaceFromJSON,
    CustomerDataAddressInterfaceToJSON,
    CustomerDataCustomerInterfaceFromJSON,
    CustomerDataCustomerInterfaceToJSON,
    CustomerDataValidationResultsInterfaceFromJSON,
    CustomerDataValidationResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1CustomersConfirmRequestFromJSON,
    PostV1CustomersConfirmRequestToJSON,
    PostV1CustomersIsEmailAvailableRequestFromJSON,
    PostV1CustomersIsEmailAvailableRequestToJSON,
    PostV1CustomersRequestFromJSON,
    PostV1CustomersRequestToJSON,
    PostV1CustomersResetPasswordRequestFromJSON,
    PostV1CustomersResetPasswordRequestToJSON,
    PutV1CustomersMeActivateRequestFromJSON,
    PutV1CustomersMeActivateRequestToJSON,
    PutV1CustomersMePasswordRequestFromJSON,
    PutV1CustomersMePasswordRequestToJSON,
    PutV1CustomersPasswordRequestFromJSON,
    PutV1CustomersPasswordRequestToJSON,
    PutV1CustomersValidateRequestFromJSON,
    PutV1CustomersValidateRequestToJSON,
} from '../models';

export interface GetV1CustomersCustomerIdBillingAddressRequest {
    customerId: number;
}

export interface GetV1CustomersCustomerIdConfirmRequest {
    customerId: number;
}

export interface GetV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenRequest {
    customerId: number;
    resetPasswordLinkToken: string;
}

export interface GetV1CustomersCustomerIdPermissionsReadonlyRequest {
    customerId: number;
}

export interface GetV1CustomersCustomerIdShippingAddressRequest {
    customerId: number;
}

export interface PostV1CustomersOperationRequest {
    postV1CustomersRequest?: PostV1CustomersRequest;
}

export interface PostV1CustomersConfirmOperationRequest {
    postV1CustomersConfirmRequest?: PostV1CustomersConfirmRequest;
}

export interface PostV1CustomersIsEmailAvailableOperationRequest {
    postV1CustomersIsEmailAvailableRequest?: PostV1CustomersIsEmailAvailableRequest;
}

export interface PostV1CustomersResetPasswordOperationRequest {
    postV1CustomersResetPasswordRequest?: PostV1CustomersResetPasswordRequest;
}

export interface PutV1CustomersEmailActivateRequest {
    email: string;
    putV1CustomersMeActivateRequest?: PutV1CustomersMeActivateRequest;
}

export interface PutV1CustomersMeActivateOperationRequest {
    putV1CustomersMeActivateRequest?: PutV1CustomersMeActivateRequest;
}

export interface PutV1CustomersMePasswordOperationRequest {
    putV1CustomersMePasswordRequest?: PutV1CustomersMePasswordRequest;
}

export interface PutV1CustomersPasswordOperationRequest {
    putV1CustomersPasswordRequest?: PutV1CustomersPasswordRequest;
}

export interface PutV1CustomersValidateOperationRequest {
    putV1CustomersValidateRequest?: PutV1CustomersValidateRequest;
}

/**
 * 
 */
export class CustomerAccountManagementV1Api extends runtime.BaseAPI {

    /**
     * Retrieve default billing address for the given customerId.
     */
    async getV1CustomersCustomerIdBillingAddressRaw(requestParameters: GetV1CustomersCustomerIdBillingAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataAddressInterface>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getV1CustomersCustomerIdBillingAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{customerId}/billingAddress`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataAddressInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve default billing address for the given customerId.
     */
    async getV1CustomersCustomerIdBillingAddress(requestParameters: GetV1CustomersCustomerIdBillingAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataAddressInterface> {
        const response = await this.getV1CustomersCustomerIdBillingAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the account confirmation status.
     */
    async getV1CustomersCustomerIdConfirmRaw(requestParameters: GetV1CustomersCustomerIdConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getV1CustomersCustomerIdConfirm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{customerId}/confirm`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Gets the account confirmation status.
     */
    async getV1CustomersCustomerIdConfirm(requestParameters: GetV1CustomersCustomerIdConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getV1CustomersCustomerIdConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if password reset token is valid.
     */
    async getV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenRaw(requestParameters: GetV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkToken.');
        }

        if (requestParameters.resetPasswordLinkToken === null || requestParameters.resetPasswordLinkToken === undefined) {
            throw new runtime.RequiredError('resetPasswordLinkToken','Required parameter requestParameters.resetPasswordLinkToken was null or undefined when calling getV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"resetPasswordLinkToken"}}`, encodeURIComponent(String(requestParameters.resetPasswordLinkToken))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check if password reset token is valid.
     */
    async getV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkToken(requestParameters: GetV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.getV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if customer can be deleted.
     */
    async getV1CustomersCustomerIdPermissionsReadonlyRaw(requestParameters: GetV1CustomersCustomerIdPermissionsReadonlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getV1CustomersCustomerIdPermissionsReadonly.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{customerId}/permissions/readonly`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check if customer can be deleted.
     */
    async getV1CustomersCustomerIdPermissionsReadonly(requestParameters: GetV1CustomersCustomerIdPermissionsReadonlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.getV1CustomersCustomerIdPermissionsReadonlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve default shipping address for the given customerId.
     */
    async getV1CustomersCustomerIdShippingAddressRaw(requestParameters: GetV1CustomersCustomerIdShippingAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataAddressInterface>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getV1CustomersCustomerIdShippingAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{customerId}/shippingAddress`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataAddressInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve default shipping address for the given customerId.
     */
    async getV1CustomersCustomerIdShippingAddress(requestParameters: GetV1CustomersCustomerIdShippingAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataAddressInterface> {
        const response = await this.getV1CustomersCustomerIdShippingAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve default billing address for the given customerId.
     */
    async getV1CustomersMeBillingAddressRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataAddressInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/me/billingAddress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataAddressInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve default billing address for the given customerId.
     */
    async getV1CustomersMeBillingAddress(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataAddressInterface> {
        const response = await this.getV1CustomersMeBillingAddressRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve default shipping address for the given customerId.
     */
    async getV1CustomersMeShippingAddressRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataAddressInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/me/shippingAddress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataAddressInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve default shipping address for the given customerId.
     */
    async getV1CustomersMeShippingAddress(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataAddressInterface> {
        const response = await this.getV1CustomersMeShippingAddressRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create customer account. Perform necessary business operations like sending email.
     */
    async postV1CustomersRaw(requestParameters: PostV1CustomersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataCustomerInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CustomersRequestToJSON(requestParameters.postV1CustomersRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataCustomerInterfaceFromJSON(jsonValue));
    }

    /**
     * Create customer account. Perform necessary business operations like sending email.
     */
    async postV1Customers(requestParameters: PostV1CustomersOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataCustomerInterface> {
        const response = await this.postV1CustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend confirmation email.
     */
    async postV1CustomersConfirmRaw(requestParameters: PostV1CustomersConfirmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CustomersConfirmRequestToJSON(requestParameters.postV1CustomersConfirmRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Resend confirmation email.
     */
    async postV1CustomersConfirm(requestParameters: PostV1CustomersConfirmOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1CustomersConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if given email is associated with a customer account in given website.
     */
    async postV1CustomersIsEmailAvailableRaw(requestParameters: PostV1CustomersIsEmailAvailableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/isEmailAvailable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CustomersIsEmailAvailableRequestToJSON(requestParameters.postV1CustomersIsEmailAvailableRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check if given email is associated with a customer account in given website.
     */
    async postV1CustomersIsEmailAvailable(requestParameters: PostV1CustomersIsEmailAvailableOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1CustomersIsEmailAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset customer password.
     */
    async postV1CustomersResetPasswordRaw(requestParameters: PostV1CustomersResetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/resetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CustomersResetPasswordRequestToJSON(requestParameters.postV1CustomersResetPasswordRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reset customer password.
     */
    async postV1CustomersResetPassword(requestParameters: PostV1CustomersResetPasswordOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1CustomersResetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Activate a customer account using a key that was sent in a confirmation email.
     */
    async putV1CustomersEmailActivateRaw(requestParameters: PutV1CustomersEmailActivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataCustomerInterface>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling putV1CustomersEmailActivate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{email}/activate`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomersMeActivateRequestToJSON(requestParameters.putV1CustomersMeActivateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataCustomerInterfaceFromJSON(jsonValue));
    }

    /**
     * Activate a customer account using a key that was sent in a confirmation email.
     */
    async putV1CustomersEmailActivate(requestParameters: PutV1CustomersEmailActivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataCustomerInterface> {
        const response = await this.putV1CustomersEmailActivateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Activate a customer account using a key that was sent in a confirmation email.
     */
    async putV1CustomersMeActivateRaw(requestParameters: PutV1CustomersMeActivateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataCustomerInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/me/activate`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomersMeActivateRequestToJSON(requestParameters.putV1CustomersMeActivateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataCustomerInterfaceFromJSON(jsonValue));
    }

    /**
     * Activate a customer account using a key that was sent in a confirmation email.
     */
    async putV1CustomersMeActivate(requestParameters: PutV1CustomersMeActivateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataCustomerInterface> {
        const response = await this.putV1CustomersMeActivateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change customer password.
     */
    async putV1CustomersMePasswordRaw(requestParameters: PutV1CustomersMePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/me/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomersMePasswordRequestToJSON(requestParameters.putV1CustomersMePasswordRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Change customer password.
     */
    async putV1CustomersMePassword(requestParameters: PutV1CustomersMePasswordOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.putV1CustomersMePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an email to the customer with a password reset link.
     */
    async putV1CustomersPasswordRaw(requestParameters: PutV1CustomersPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomersPasswordRequestToJSON(requestParameters.putV1CustomersPasswordRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Send an email to the customer with a password reset link.
     */
    async putV1CustomersPassword(requestParameters: PutV1CustomersPasswordOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.putV1CustomersPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate customer data.
     */
    async putV1CustomersValidateRaw(requestParameters: PutV1CustomersValidateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataValidationResultsInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/validate`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomersValidateRequestToJSON(requestParameters.putV1CustomersValidateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataValidationResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Validate customer data.
     */
    async putV1CustomersValidate(requestParameters: PutV1CustomersValidateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataValidationResultsInterface> {
        const response = await this.putV1CustomersValidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
