/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BundleDataLinkInterface,
  ErrorResponse,
  PostV1BundleproductsSkuLinksOptionIdRequest,
} from '../models';
import {
    BundleDataLinkInterfaceFromJSON,
    BundleDataLinkInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1BundleproductsSkuLinksOptionIdRequestFromJSON,
    PostV1BundleproductsSkuLinksOptionIdRequestToJSON,
} from '../models';

export interface DeleteV1BundleproductsSkuOptionsOptionIdChildrenChildSkuRequest {
    sku: string;
    optionId: number;
    childSku: string;
}

export interface GetV1BundleproductsProductSkuChildrenRequest {
    productSku: string;
    optionId?: number;
}

export interface PostV1BundleproductsSkuLinksOptionIdOperationRequest {
    sku: string;
    optionId: number;
    postV1BundleproductsSkuLinksOptionIdRequest?: PostV1BundleproductsSkuLinksOptionIdRequest;
}

export interface PutV1BundleproductsSkuLinksIdRequest {
    sku: string;
    id: string;
    postV1BundleproductsSkuLinksOptionIdRequest?: PostV1BundleproductsSkuLinksOptionIdRequest;
}

/**
 * 
 */
export class BundleProductLinkManagementV1Api extends runtime.BaseAPI {

    /**
     * Remove product from Bundle product option
     */
    async deleteV1BundleproductsSkuOptionsOptionIdChildrenChildSkuRaw(requestParameters: DeleteV1BundleproductsSkuOptionsOptionIdChildrenChildSkuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling deleteV1BundleproductsSkuOptionsOptionIdChildrenChildSku.');
        }

        if (requestParameters.optionId === null || requestParameters.optionId === undefined) {
            throw new runtime.RequiredError('optionId','Required parameter requestParameters.optionId was null or undefined when calling deleteV1BundleproductsSkuOptionsOptionIdChildrenChildSku.');
        }

        if (requestParameters.childSku === null || requestParameters.childSku === undefined) {
            throw new runtime.RequiredError('childSku','Required parameter requestParameters.childSku was null or undefined when calling deleteV1BundleproductsSkuOptionsOptionIdChildrenChildSku.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/bundle-products/{sku}/options/{optionId}/children/{childSku}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters.optionId))).replace(`{${"childSku"}}`, encodeURIComponent(String(requestParameters.childSku))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove product from Bundle product option
     */
    async deleteV1BundleproductsSkuOptionsOptionIdChildrenChildSku(requestParameters: DeleteV1BundleproductsSkuOptionsOptionIdChildrenChildSkuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1BundleproductsSkuOptionsOptionIdChildrenChildSkuRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all children for Bundle product
     */
    async getV1BundleproductsProductSkuChildrenRaw(requestParameters: GetV1BundleproductsProductSkuChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BundleDataLinkInterface>>> {
        if (requestParameters.productSku === null || requestParameters.productSku === undefined) {
            throw new runtime.RequiredError('productSku','Required parameter requestParameters.productSku was null or undefined when calling getV1BundleproductsProductSkuChildren.');
        }

        const queryParameters: any = {};

        if (requestParameters.optionId !== undefined) {
            queryParameters['optionId'] = requestParameters.optionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/bundle-products/{productSku}/children`.replace(`{${"productSku"}}`, encodeURIComponent(String(requestParameters.productSku))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BundleDataLinkInterfaceFromJSON));
    }

    /**
     * Get all children for Bundle product
     */
    async getV1BundleproductsProductSkuChildren(requestParameters: GetV1BundleproductsProductSkuChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BundleDataLinkInterface>> {
        const response = await this.getV1BundleproductsProductSkuChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add child product to specified Bundle option by product sku
     */
    async postV1BundleproductsSkuLinksOptionIdRaw(requestParameters: PostV1BundleproductsSkuLinksOptionIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling postV1BundleproductsSkuLinksOptionId.');
        }

        if (requestParameters.optionId === null || requestParameters.optionId === undefined) {
            throw new runtime.RequiredError('optionId','Required parameter requestParameters.optionId was null or undefined when calling postV1BundleproductsSkuLinksOptionId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/bundle-products/{sku}/links/{optionId}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters.optionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1BundleproductsSkuLinksOptionIdRequestToJSON(requestParameters.postV1BundleproductsSkuLinksOptionIdRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add child product to specified Bundle option by product sku
     */
    async postV1BundleproductsSkuLinksOptionId(requestParameters: PostV1BundleproductsSkuLinksOptionIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1BundleproductsSkuLinksOptionIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async putV1BundleproductsSkuLinksIdRaw(requestParameters: PutV1BundleproductsSkuLinksIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling putV1BundleproductsSkuLinksId.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putV1BundleproductsSkuLinksId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/bundle-products/{sku}/links/{id}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1BundleproductsSkuLinksOptionIdRequestToJSON(requestParameters.postV1BundleproductsSkuLinksOptionIdRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 
     */
    async putV1BundleproductsSkuLinksId(requestParameters: PutV1BundleproductsSkuLinksIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.putV1BundleproductsSkuLinksIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
