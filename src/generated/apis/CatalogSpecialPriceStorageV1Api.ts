/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataPriceUpdateResultInterface,
  CatalogDataSpecialPriceInterface,
  ErrorResponse,
  PostV1ProductsSpecialpriceRequest,
  PostV1ProductsTierpricesinformationRequest,
} from '../models';
import {
    CatalogDataPriceUpdateResultInterfaceFromJSON,
    CatalogDataPriceUpdateResultInterfaceToJSON,
    CatalogDataSpecialPriceInterfaceFromJSON,
    CatalogDataSpecialPriceInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ProductsSpecialpriceRequestFromJSON,
    PostV1ProductsSpecialpriceRequestToJSON,
    PostV1ProductsTierpricesinformationRequestFromJSON,
    PostV1ProductsTierpricesinformationRequestToJSON,
} from '../models';

export interface PostV1ProductsSpecialpriceOperationRequest {
    postV1ProductsSpecialpriceRequest?: PostV1ProductsSpecialpriceRequest;
}

export interface PostV1ProductsSpecialpricedeleteRequest {
    postV1ProductsSpecialpriceRequest?: PostV1ProductsSpecialpriceRequest;
}

export interface PostV1ProductsSpecialpriceinformationRequest {
    postV1ProductsTierpricesinformationRequest?: PostV1ProductsTierpricesinformationRequest;
}

/**
 * 
 */
export class CatalogSpecialPriceStorageV1Api extends runtime.BaseAPI {

    /**
     * Add or update product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     */
    async postV1ProductsSpecialpriceRaw(requestParameters: PostV1ProductsSpecialpriceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataPriceUpdateResultInterface>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/special-price`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsSpecialpriceRequestToJSON(requestParameters.postV1ProductsSpecialpriceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataPriceUpdateResultInterfaceFromJSON));
    }

    /**
     * Add or update product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     */
    async postV1ProductsSpecialprice(requestParameters: PostV1ProductsSpecialpriceOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataPriceUpdateResultInterface>> {
        const response = await this.postV1ProductsSpecialpriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the delete exception will be thrown.
     */
    async postV1ProductsSpecialpricedeleteRaw(requestParameters: PostV1ProductsSpecialpricedeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataPriceUpdateResultInterface>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/special-price-delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsSpecialpriceRequestToJSON(requestParameters.postV1ProductsSpecialpriceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataPriceUpdateResultInterfaceFromJSON));
    }

    /**
     * Delete product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the delete exception will be thrown.
     */
    async postV1ProductsSpecialpricedelete(requestParameters: PostV1ProductsSpecialpricedeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataPriceUpdateResultInterface>> {
        const response = await this.postV1ProductsSpecialpricedeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return product\'s special price. In case of at least one of skus is not found exception will be thrown.
     */
    async postV1ProductsSpecialpriceinformationRaw(requestParameters: PostV1ProductsSpecialpriceinformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataSpecialPriceInterface>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/special-price-information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsTierpricesinformationRequestToJSON(requestParameters.postV1ProductsTierpricesinformationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataSpecialPriceInterfaceFromJSON));
    }

    /**
     * Return product\'s special price. In case of at least one of skus is not found exception will be thrown.
     */
    async postV1ProductsSpecialpriceinformation(requestParameters: PostV1ProductsSpecialpriceinformationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataSpecialPriceInterface>> {
        const response = await this.postV1ProductsSpecialpriceinformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
