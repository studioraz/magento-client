/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CatalogDataProductLinkExtensionInterface } from './CatalogDataProductLinkExtensionInterface';
import {
    CatalogDataProductLinkExtensionInterfaceFromJSON,
    CatalogDataProductLinkExtensionInterfaceFromJSONTyped,
    CatalogDataProductLinkExtensionInterfaceToJSON,
} from './CatalogDataProductLinkExtensionInterface';

/**
 * 
 * @export
 * @interface CatalogDataProductLinkInterface
 */
export interface CatalogDataProductLinkInterface {
    /**
     * SKU
     * @type {string}
     * @memberof CatalogDataProductLinkInterface
     */
    sku: string;
    /**
     * Link type
     * @type {string}
     * @memberof CatalogDataProductLinkInterface
     */
    linkType: string;
    /**
     * Linked product sku
     * @type {string}
     * @memberof CatalogDataProductLinkInterface
     */
    linkedProductSku: string;
    /**
     * Linked product type (simple, virtual, etc)
     * @type {string}
     * @memberof CatalogDataProductLinkInterface
     */
    linkedProductType: string;
    /**
     * Linked item position
     * @type {number}
     * @memberof CatalogDataProductLinkInterface
     */
    position: number;
    /**
     * 
     * @type {CatalogDataProductLinkExtensionInterface}
     * @memberof CatalogDataProductLinkInterface
     */
    extensionAttributes?: CatalogDataProductLinkExtensionInterface;
}

/**
 * Check if a given object implements the CatalogDataProductLinkInterface interface.
 */
export function instanceOfCatalogDataProductLinkInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sku" in value;
    isInstance = isInstance && "linkType" in value;
    isInstance = isInstance && "linkedProductSku" in value;
    isInstance = isInstance && "linkedProductType" in value;
    isInstance = isInstance && "position" in value;

    return isInstance;
}

export function CatalogDataProductLinkInterfaceFromJSON(json: any): CatalogDataProductLinkInterface {
    return CatalogDataProductLinkInterfaceFromJSONTyped(json, false);
}

export function CatalogDataProductLinkInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataProductLinkInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sku': json['sku'],
        'linkType': json['link_type'],
        'linkedProductSku': json['linked_product_sku'],
        'linkedProductType': json['linked_product_type'],
        'position': json['position'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : CatalogDataProductLinkExtensionInterfaceFromJSON(json['extension_attributes']),
    };
}

export function CatalogDataProductLinkInterfaceToJSON(value?: CatalogDataProductLinkInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sku': value.sku,
        'link_type': value.linkType,
        'linked_product_sku': value.linkedProductSku,
        'linked_product_type': value.linkedProductType,
        'position': value.position,
        'extension_attributes': CatalogDataProductLinkExtensionInterfaceToJSON(value.extensionAttributes),
    };
}

