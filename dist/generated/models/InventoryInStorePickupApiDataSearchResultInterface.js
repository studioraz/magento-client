"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InventoryInStorePickupApiDataSearchResultInterfaceToJSON = exports.InventoryInStorePickupApiDataSearchResultInterfaceFromJSONTyped = exports.InventoryInStorePickupApiDataSearchResultInterfaceFromJSON = exports.instanceOfInventoryInStorePickupApiDataSearchResultInterface = void 0;
var InventoryInStorePickupApiDataPickupLocationInterface_1 = require("./InventoryInStorePickupApiDataPickupLocationInterface");
var InventoryInStorePickupApiDataSearchRequestInterface_1 = require("./InventoryInStorePickupApiDataSearchRequestInterface");
/**
 * Check if a given object implements the InventoryInStorePickupApiDataSearchResultInterface interface.
 */
function instanceOfInventoryInStorePickupApiDataSearchResultInterface(value) {
    var isInstance = true;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "searchRequest" in value;
    isInstance = isInstance && "totalCount" in value;
    return isInstance;
}
exports.instanceOfInventoryInStorePickupApiDataSearchResultInterface = instanceOfInventoryInStorePickupApiDataSearchResultInterface;
function InventoryInStorePickupApiDataSearchResultInterfaceFromJSON(json) {
    return InventoryInStorePickupApiDataSearchResultInterfaceFromJSONTyped(json, false);
}
exports.InventoryInStorePickupApiDataSearchResultInterfaceFromJSON = InventoryInStorePickupApiDataSearchResultInterfaceFromJSON;
function InventoryInStorePickupApiDataSearchResultInterfaceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'items': (json['items'].map(InventoryInStorePickupApiDataPickupLocationInterface_1.InventoryInStorePickupApiDataPickupLocationInterfaceFromJSON)),
        'searchRequest': (0, InventoryInStorePickupApiDataSearchRequestInterface_1.InventoryInStorePickupApiDataSearchRequestInterfaceFromJSON)(json['search_request']),
        'totalCount': json['total_count'],
    };
}
exports.InventoryInStorePickupApiDataSearchResultInterfaceFromJSONTyped = InventoryInStorePickupApiDataSearchResultInterfaceFromJSONTyped;
function InventoryInStorePickupApiDataSearchResultInterfaceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'items': (value.items.map(InventoryInStorePickupApiDataPickupLocationInterface_1.InventoryInStorePickupApiDataPickupLocationInterfaceToJSON)),
        'search_request': (0, InventoryInStorePickupApiDataSearchRequestInterface_1.InventoryInStorePickupApiDataSearchRequestInterfaceToJSON)(value.searchRequest),
        'total_count': value.totalCount,
    };
}
exports.InventoryInStorePickupApiDataSearchResultInterfaceToJSON = InventoryInStorePickupApiDataSearchResultInterfaceToJSON;
//# sourceMappingURL=InventoryInStorePickupApiDataSearchResultInterface.js.map