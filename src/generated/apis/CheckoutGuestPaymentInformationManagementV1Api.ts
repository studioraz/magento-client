/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckoutDataPaymentDetailsInterface,
  ErrorResponse,
  PostV1GuestcartsCartIdPaymentinformationRequest,
} from '../models';
import {
    CheckoutDataPaymentDetailsInterfaceFromJSON,
    CheckoutDataPaymentDetailsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1GuestcartsCartIdPaymentinformationRequestFromJSON,
    PostV1GuestcartsCartIdPaymentinformationRequestToJSON,
} from '../models';

export interface GetV1GuestcartsCartIdPaymentinformationRequest {
    cartId: string;
}

export interface PostV1GuestcartsCartIdPaymentinformationOperationRequest {
    cartId: string;
    postV1GuestcartsCartIdPaymentinformationRequest?: PostV1GuestcartsCartIdPaymentinformationRequest;
}

export interface PostV1GuestcartsCartIdSetpaymentinformationRequest {
    cartId: string;
    postV1GuestcartsCartIdPaymentinformationRequest?: PostV1GuestcartsCartIdPaymentinformationRequest;
}

/**
 * 
 */
export class CheckoutGuestPaymentInformationManagementV1Api extends runtime.BaseAPI {

    /**
     * Get payment information
     */
    async getV1GuestcartsCartIdPaymentinformationRaw(requestParameters: GetV1GuestcartsCartIdPaymentinformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutDataPaymentDetailsInterface>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getV1GuestcartsCartIdPaymentinformation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts/{cartId}/payment-information`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutDataPaymentDetailsInterfaceFromJSON(jsonValue));
    }

    /**
     * Get payment information
     */
    async getV1GuestcartsCartIdPaymentinformation(requestParameters: GetV1GuestcartsCartIdPaymentinformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutDataPaymentDetailsInterface> {
        const response = await this.getV1GuestcartsCartIdPaymentinformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set payment information and place order for a specified cart.
     */
    async postV1GuestcartsCartIdPaymentinformationRaw(requestParameters: PostV1GuestcartsCartIdPaymentinformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling postV1GuestcartsCartIdPaymentinformation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts/{cartId}/payment-information`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1GuestcartsCartIdPaymentinformationRequestToJSON(requestParameters.postV1GuestcartsCartIdPaymentinformationRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set payment information and place order for a specified cart.
     */
    async postV1GuestcartsCartIdPaymentinformation(requestParameters: PostV1GuestcartsCartIdPaymentinformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1GuestcartsCartIdPaymentinformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set payment information for a specified cart.
     */
    async postV1GuestcartsCartIdSetpaymentinformationRaw(requestParameters: PostV1GuestcartsCartIdSetpaymentinformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling postV1GuestcartsCartIdSetpaymentinformation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts/{cartId}/set-payment-information`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1GuestcartsCartIdPaymentinformationRequestToJSON(requestParameters.postV1GuestcartsCartIdPaymentinformationRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set payment information for a specified cart.
     */
    async postV1GuestcartsCartIdSetpaymentinformation(requestParameters: PostV1GuestcartsCartIdSetpaymentinformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1GuestcartsCartIdSetpaymentinformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
