/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BundleDataBundleOptionInterface } from './BundleDataBundleOptionInterface';
import {
    BundleDataBundleOptionInterfaceFromJSON,
    BundleDataBundleOptionInterfaceFromJSONTyped,
    BundleDataBundleOptionInterfaceToJSON,
} from './BundleDataBundleOptionInterface';
import type { CatalogDataCustomOptionInterface } from './CatalogDataCustomOptionInterface';
import {
    CatalogDataCustomOptionInterfaceFromJSON,
    CatalogDataCustomOptionInterfaceFromJSONTyped,
    CatalogDataCustomOptionInterfaceToJSON,
} from './CatalogDataCustomOptionInterface';
import type { ConfigurableProductDataConfigurableItemOptionValueInterface } from './ConfigurableProductDataConfigurableItemOptionValueInterface';
import {
    ConfigurableProductDataConfigurableItemOptionValueInterfaceFromJSON,
    ConfigurableProductDataConfigurableItemOptionValueInterfaceFromJSONTyped,
    ConfigurableProductDataConfigurableItemOptionValueInterfaceToJSON,
} from './ConfigurableProductDataConfigurableItemOptionValueInterface';
import type { DownloadableDataDownloadableOptionInterface } from './DownloadableDataDownloadableOptionInterface';
import {
    DownloadableDataDownloadableOptionInterfaceFromJSON,
    DownloadableDataDownloadableOptionInterfaceFromJSONTyped,
    DownloadableDataDownloadableOptionInterfaceToJSON,
} from './DownloadableDataDownloadableOptionInterface';

/**
 * ExtensionInterface class for @see \Magento\Catalog\Api\Data\ProductOptionInterface
 * @export
 * @interface CatalogDataProductOptionExtensionInterface
 */
export interface CatalogDataProductOptionExtensionInterface {
    /**
     * 
     * @type {Array<CatalogDataCustomOptionInterface>}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    customOptions?: Array<CatalogDataCustomOptionInterface>;
    /**
     * 
     * @type {DownloadableDataDownloadableOptionInterface}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    downloadableOption?: DownloadableDataDownloadableOptionInterface;
    /**
     * 
     * @type {Array<BundleDataBundleOptionInterface>}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    bundleOptions?: Array<BundleDataBundleOptionInterface>;
    /**
     * 
     * @type {Array<ConfigurableProductDataConfigurableItemOptionValueInterface>}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    configurableItemOptions?: Array<ConfigurableProductDataConfigurableItemOptionValueInterface>;
}

/**
 * Check if a given object implements the CatalogDataProductOptionExtensionInterface interface.
 */
export function instanceOfCatalogDataProductOptionExtensionInterface(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CatalogDataProductOptionExtensionInterfaceFromJSON(json: any): CatalogDataProductOptionExtensionInterface {
    return CatalogDataProductOptionExtensionInterfaceFromJSONTyped(json, false);
}

export function CatalogDataProductOptionExtensionInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataProductOptionExtensionInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customOptions': !exists(json, 'custom_options') ? undefined : ((json['custom_options'] as Array<any>).map(CatalogDataCustomOptionInterfaceFromJSON)),
        'downloadableOption': !exists(json, 'downloadable_option') ? undefined : DownloadableDataDownloadableOptionInterfaceFromJSON(json['downloadable_option']),
        'bundleOptions': !exists(json, 'bundle_options') ? undefined : ((json['bundle_options'] as Array<any>).map(BundleDataBundleOptionInterfaceFromJSON)),
        'configurableItemOptions': !exists(json, 'configurable_item_options') ? undefined : ((json['configurable_item_options'] as Array<any>).map(ConfigurableProductDataConfigurableItemOptionValueInterfaceFromJSON)),
    };
}

export function CatalogDataProductOptionExtensionInterfaceToJSON(value?: CatalogDataProductOptionExtensionInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'custom_options': value.customOptions === undefined ? undefined : ((value.customOptions as Array<any>).map(CatalogDataCustomOptionInterfaceToJSON)),
        'downloadable_option': DownloadableDataDownloadableOptionInterfaceToJSON(value.downloadableOption),
        'bundle_options': value.bundleOptions === undefined ? undefined : ((value.bundleOptions as Array<any>).map(BundleDataBundleOptionInterfaceToJSON)),
        'configurable_item_options': value.configurableItemOptions === undefined ? undefined : ((value.configurableItemOptions as Array<any>).map(ConfigurableProductDataConfigurableItemOptionValueInterfaceToJSON)),
    };
}

