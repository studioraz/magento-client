/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataCategoryAttributeInterface,
  CatalogDataCategoryAttributeSearchResultsInterface,
  ErrorResponse,
} from '../models';
import {
    CatalogDataCategoryAttributeInterfaceFromJSON,
    CatalogDataCategoryAttributeInterfaceToJSON,
    CatalogDataCategoryAttributeSearchResultsInterfaceFromJSON,
    CatalogDataCategoryAttributeSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface GetV1CategoriesAttributesRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface GetV1CategoriesAttributesAttributeCodeRequest {
    attributeCode: string;
}

/**
 * 
 */
export class CatalogCategoryAttributeRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Retrieve all attributes for entity type
     */
    async getV1CategoriesAttributesRaw(requestParameters: GetV1CategoriesAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataCategoryAttributeSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/categories/attributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataCategoryAttributeSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve all attributes for entity type
     */
    async getV1CategoriesAttributes(requestParameters: GetV1CategoriesAttributesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataCategoryAttributeSearchResultsInterface> {
        const response = await this.getV1CategoriesAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve specific attribute
     */
    async getV1CategoriesAttributesAttributeCodeRaw(requestParameters: GetV1CategoriesAttributesAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataCategoryAttributeInterface>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling getV1CategoriesAttributesAttributeCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/categories/attributes/{attributeCode}`.replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataCategoryAttributeInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve specific attribute
     */
    async getV1CategoriesAttributesAttributeCode(requestParameters: GetV1CategoriesAttributesAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataCategoryAttributeInterface> {
        const response = await this.getV1CategoriesAttributesAttributeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
