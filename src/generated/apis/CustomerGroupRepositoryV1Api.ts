/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerDataGroupInterface,
  CustomerDataGroupSearchResultsInterface,
  ErrorResponse,
  PutV1CustomerGroupsIdRequest,
} from '../models';
import {
    CustomerDataGroupInterfaceFromJSON,
    CustomerDataGroupInterfaceToJSON,
    CustomerDataGroupSearchResultsInterfaceFromJSON,
    CustomerDataGroupSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1CustomerGroupsIdRequestFromJSON,
    PutV1CustomerGroupsIdRequestToJSON,
} from '../models';

export interface DeleteV1CustomerGroupsIdRequest {
    id: number;
}

export interface GetV1CustomerGroupsIdRequest {
    id: number;
}

export interface GetV1CustomerGroupsSearchRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface PostV1CustomerGroupsRequest {
    putV1CustomerGroupsIdRequest?: PutV1CustomerGroupsIdRequest;
}

export interface PutV1CustomerGroupsIdOperationRequest {
    id: string;
    putV1CustomerGroupsIdRequest?: PutV1CustomerGroupsIdRequest;
}

/**
 * 
 */
export class CustomerGroupRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Delete customer group by ID.
     */
    async deleteV1CustomerGroupsIdRaw(requestParameters: DeleteV1CustomerGroupsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteV1CustomerGroupsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customerGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete customer group by ID.
     */
    async deleteV1CustomerGroupsId(requestParameters: DeleteV1CustomerGroupsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1CustomerGroupsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customer group by group ID.
     */
    async getV1CustomerGroupsIdRaw(requestParameters: GetV1CustomerGroupsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataGroupInterface>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getV1CustomerGroupsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customerGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataGroupInterfaceFromJSON(jsonValue));
    }

    /**
     * Get customer group by group ID.
     */
    async getV1CustomerGroupsId(requestParameters: GetV1CustomerGroupsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataGroupInterface> {
        const response = await this.getV1CustomerGroupsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CustomerGroupsSearchRaw(requestParameters: GetV1CustomerGroupsSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataGroupSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customerGroups/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataGroupSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CustomerGroupsSearch(requestParameters: GetV1CustomerGroupsSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataGroupSearchResultsInterface> {
        const response = await this.getV1CustomerGroupsSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save customer group.
     */
    async postV1CustomerGroupsRaw(requestParameters: PostV1CustomerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataGroupInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customerGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomerGroupsIdRequestToJSON(requestParameters.putV1CustomerGroupsIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataGroupInterfaceFromJSON(jsonValue));
    }

    /**
     * Save customer group.
     */
    async postV1CustomerGroups(requestParameters: PostV1CustomerGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataGroupInterface> {
        const response = await this.postV1CustomerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save customer group.
     */
    async putV1CustomerGroupsIdRaw(requestParameters: PutV1CustomerGroupsIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataGroupInterface>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putV1CustomerGroupsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customerGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomerGroupsIdRequestToJSON(requestParameters.putV1CustomerGroupsIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataGroupInterfaceFromJSON(jsonValue));
    }

    /**
     * Save customer group.
     */
    async putV1CustomerGroupsId(requestParameters: PutV1CustomerGroupsIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataGroupInterface> {
        const response = await this.putV1CustomerGroupsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
