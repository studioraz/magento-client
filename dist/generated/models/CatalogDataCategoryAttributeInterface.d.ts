/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { EavDataAttributeFrontendLabelInterface } from './EavDataAttributeFrontendLabelInterface';
import type { EavDataAttributeOptionInterface } from './EavDataAttributeOptionInterface';
import type { EavDataAttributeValidationRuleInterface } from './EavDataAttributeValidationRuleInterface';
import type { FrameworkAttributeInterface } from './FrameworkAttributeInterface';
/**
 *
 * @export
 * @interface CatalogDataCategoryAttributeInterface
 */
export interface CatalogDataCategoryAttributeInterface {
    /**
     * WYSIWYG flag
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isWysiwygEnabled?: boolean;
    /**
     * The HTML tags are allowed on the frontend
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isHtmlAllowedOnFront?: boolean;
    /**
     * It is used for sorting in product listing
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    usedForSortBy?: boolean;
    /**
     * It used in layered navigation
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isFilterable?: boolean;
    /**
     * It is used in search results layered navigation
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isFilterableInSearch?: boolean;
    /**
     * It is used in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isUsedInGrid?: boolean;
    /**
     * It is visible in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isVisibleInGrid?: boolean;
    /**
     * It is filterable in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isFilterableInGrid?: boolean;
    /**
     * Position
     * @type {number}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    position?: number;
    /**
     * Apply to value for the element
     * @type {Array<string>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    applyTo?: Array<string>;
    /**
     * The attribute can be used in Quick Search
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isSearchable?: string;
    /**
     * The attribute can be used in Advanced Search
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isVisibleInAdvancedSearch?: string;
    /**
     * The attribute can be compared on the frontend
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isComparable?: string;
    /**
     * The attribute can be used for promo rules
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isUsedForPromoRules?: string;
    /**
     * The attribute is visible on the frontend
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isVisibleOnFront?: string;
    /**
     * The attribute can be used in product listing
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    usedInProductListing?: string;
    /**
     * Attribute is visible on frontend.
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isVisible?: boolean;
    /**
     * Attribute scope
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    scope?: string;
    /**
     * ExtensionInterface class for @see \Magento\Catalog\Api\Data\EavAttributeInterface
     * @type {object}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    extensionAttributes?: object;
    /**
     * Id of the attribute.
     * @type {number}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    attributeId?: number;
    /**
     * Code of the attribute.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    attributeCode: string;
    /**
     * HTML for input element.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    frontendInput: string;
    /**
     * Entity type id
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    entityTypeId: string;
    /**
     * Attribute is required.
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isRequired: boolean;
    /**
     * Options of the attribute (key => value pairs for select)
     * @type {Array<EavDataAttributeOptionInterface>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    options?: Array<EavDataAttributeOptionInterface>;
    /**
     * Current attribute has been defined by a user.
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isUserDefined?: boolean;
    /**
     * Frontend label for default store
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    defaultFrontendLabel?: string;
    /**
     * Frontend label for each store
     * @type {Array<EavDataAttributeFrontendLabelInterface>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    frontendLabels: Array<EavDataAttributeFrontendLabelInterface>;
    /**
     * The note attribute for the element.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    note?: string;
    /**
     * Backend type.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    backendType?: string;
    /**
     * Backend model
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    backendModel?: string;
    /**
     * Source model
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    sourceModel?: string;
    /**
     * Default value for the element.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    defaultValue?: string;
    /**
     * This is a unique attribute
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    isUnique?: string;
    /**
     * Frontend class of attribute
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    frontendClass?: string;
    /**
     * Validation rules.
     * @type {Array<EavDataAttributeValidationRuleInterface>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    validationRules?: Array<EavDataAttributeValidationRuleInterface>;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    customAttributes?: Array<FrameworkAttributeInterface>;
}
/**
 * Check if a given object implements the CatalogDataCategoryAttributeInterface interface.
 */
export declare function instanceOfCatalogDataCategoryAttributeInterface(value: object): boolean;
export declare function CatalogDataCategoryAttributeInterfaceFromJSON(json: any): CatalogDataCategoryAttributeInterface;
export declare function CatalogDataCategoryAttributeInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataCategoryAttributeInterface;
export declare function CatalogDataCategoryAttributeInterfaceToJSON(value?: CatalogDataCategoryAttributeInterface | null): any;
