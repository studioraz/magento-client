/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventoryInStorePickupApiDataPickupLocationInterface } from './InventoryInStorePickupApiDataPickupLocationInterface';
import {
    InventoryInStorePickupApiDataPickupLocationInterfaceFromJSON,
    InventoryInStorePickupApiDataPickupLocationInterfaceFromJSONTyped,
    InventoryInStorePickupApiDataPickupLocationInterfaceToJSON,
} from './InventoryInStorePickupApiDataPickupLocationInterface';
import type { InventoryInStorePickupApiDataSearchRequestInterface } from './InventoryInStorePickupApiDataSearchRequestInterface';
import {
    InventoryInStorePickupApiDataSearchRequestInterfaceFromJSON,
    InventoryInStorePickupApiDataSearchRequestInterfaceFromJSONTyped,
    InventoryInStorePickupApiDataSearchRequestInterfaceToJSON,
} from './InventoryInStorePickupApiDataSearchRequestInterface';

/**
 * Search results for providing pickup locations.
 * @export
 * @interface InventoryInStorePickupApiDataSearchResultInterface
 */
export interface InventoryInStorePickupApiDataSearchResultInterface {
    /**
     * Items list.
     * @type {Array<InventoryInStorePickupApiDataPickupLocationInterface>}
     * @memberof InventoryInStorePickupApiDataSearchResultInterface
     */
    items: Array<InventoryInStorePickupApiDataPickupLocationInterface>;
    /**
     * 
     * @type {InventoryInStorePickupApiDataSearchRequestInterface}
     * @memberof InventoryInStorePickupApiDataSearchResultInterface
     */
    searchRequest: InventoryInStorePickupApiDataSearchRequestInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof InventoryInStorePickupApiDataSearchResultInterface
     */
    totalCount: number;
}

/**
 * Check if a given object implements the InventoryInStorePickupApiDataSearchResultInterface interface.
 */
export function instanceOfInventoryInStorePickupApiDataSearchResultInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "searchRequest" in value;
    isInstance = isInstance && "totalCount" in value;

    return isInstance;
}

export function InventoryInStorePickupApiDataSearchResultInterfaceFromJSON(json: any): InventoryInStorePickupApiDataSearchResultInterface {
    return InventoryInStorePickupApiDataSearchResultInterfaceFromJSONTyped(json, false);
}

export function InventoryInStorePickupApiDataSearchResultInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryInStorePickupApiDataSearchResultInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'items': ((json['items'] as Array<any>).map(InventoryInStorePickupApiDataPickupLocationInterfaceFromJSON)),
        'searchRequest': InventoryInStorePickupApiDataSearchRequestInterfaceFromJSON(json['search_request']),
        'totalCount': json['total_count'],
    };
}

export function InventoryInStorePickupApiDataSearchResultInterfaceToJSON(value?: InventoryInStorePickupApiDataSearchResultInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'items': ((value.items as Array<any>).map(InventoryInStorePickupApiDataPickupLocationInterfaceToJSON)),
        'search_request': InventoryInStorePickupApiDataSearchRequestInterfaceToJSON(value.searchRequest),
        'total_count': value.totalCount,
    };
}

