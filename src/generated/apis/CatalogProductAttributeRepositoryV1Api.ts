/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataProductAttributeInterface,
  CatalogDataProductAttributeSearchResultsInterface,
  ErrorResponse,
  PutV1ProductsAttributesAttributeCodeRequest,
} from '../models';
import {
    CatalogDataProductAttributeInterfaceFromJSON,
    CatalogDataProductAttributeInterfaceToJSON,
    CatalogDataProductAttributeSearchResultsInterfaceFromJSON,
    CatalogDataProductAttributeSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1ProductsAttributesAttributeCodeRequestFromJSON,
    PutV1ProductsAttributesAttributeCodeRequestToJSON,
} from '../models';

export interface DeleteV1ProductsAttributesAttributeCodeRequest {
    attributeCode: string;
}

export interface GetV1ProductsAttributesRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface GetV1ProductsAttributesAttributeCodeRequest {
    attributeCode: string;
}

export interface PostV1ProductsAttributesRequest {
    putV1ProductsAttributesAttributeCodeRequest?: PutV1ProductsAttributesAttributeCodeRequest;
}

export interface PutV1ProductsAttributesAttributeCodeOperationRequest {
    attributeCode: string;
    putV1ProductsAttributesAttributeCodeRequest?: PutV1ProductsAttributesAttributeCodeRequest;
}

/**
 * 
 */
export class CatalogProductAttributeRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Delete Attribute by id
     */
    async deleteV1ProductsAttributesAttributeCodeRaw(requestParameters: DeleteV1ProductsAttributesAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling deleteV1ProductsAttributesAttributeCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attributes/{attributeCode}`.replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Attribute by id
     */
    async deleteV1ProductsAttributesAttributeCode(requestParameters: DeleteV1ProductsAttributesAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsAttributesAttributeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all attributes for entity type
     */
    async getV1ProductsAttributesRaw(requestParameters: GetV1ProductsAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductAttributeSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductAttributeSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve all attributes for entity type
     */
    async getV1ProductsAttributes(requestParameters: GetV1ProductsAttributesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductAttributeSearchResultsInterface> {
        const response = await this.getV1ProductsAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve specific attribute
     */
    async getV1ProductsAttributesAttributeCodeRaw(requestParameters: GetV1ProductsAttributesAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductAttributeInterface>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling getV1ProductsAttributesAttributeCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attributes/{attributeCode}`.replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductAttributeInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve specific attribute
     */
    async getV1ProductsAttributesAttributeCode(requestParameters: GetV1ProductsAttributesAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductAttributeInterface> {
        const response = await this.getV1ProductsAttributesAttributeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save attribute data
     */
    async postV1ProductsAttributesRaw(requestParameters: PostV1ProductsAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductAttributeInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attributes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1ProductsAttributesAttributeCodeRequestToJSON(requestParameters.putV1ProductsAttributesAttributeCodeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductAttributeInterfaceFromJSON(jsonValue));
    }

    /**
     * Save attribute data
     */
    async postV1ProductsAttributes(requestParameters: PostV1ProductsAttributesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductAttributeInterface> {
        const response = await this.postV1ProductsAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save attribute data
     */
    async putV1ProductsAttributesAttributeCodeRaw(requestParameters: PutV1ProductsAttributesAttributeCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductAttributeInterface>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling putV1ProductsAttributesAttributeCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attributes/{attributeCode}`.replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1ProductsAttributesAttributeCodeRequestToJSON(requestParameters.putV1ProductsAttributesAttributeCodeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductAttributeInterfaceFromJSON(jsonValue));
    }

    /**
     * Save attribute data
     */
    async putV1ProductsAttributesAttributeCode(requestParameters: PutV1ProductsAttributesAttributeCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductAttributeInterface> {
        const response = await this.putV1ProductsAttributesAttributeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
