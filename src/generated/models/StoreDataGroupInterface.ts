/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Group interface
 * @export
 * @interface StoreDataGroupInterface
 */
export interface StoreDataGroupInterface {
    /**
     * 
     * @type {number}
     * @memberof StoreDataGroupInterface
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataGroupInterface
     */
    websiteId: number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataGroupInterface
     */
    rootCategoryId: number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataGroupInterface
     */
    defaultStoreId: number;
    /**
     * 
     * @type {string}
     * @memberof StoreDataGroupInterface
     */
    name: string;
    /**
     * Group code.
     * @type {string}
     * @memberof StoreDataGroupInterface
     */
    code: string;
    /**
     * ExtensionInterface class for @see \Magento\Store\Api\Data\GroupInterface
     * @type {object}
     * @memberof StoreDataGroupInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the StoreDataGroupInterface interface.
 */
export function instanceOfStoreDataGroupInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "websiteId" in value;
    isInstance = isInstance && "rootCategoryId" in value;
    isInstance = isInstance && "defaultStoreId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "code" in value;

    return isInstance;
}

export function StoreDataGroupInterfaceFromJSON(json: any): StoreDataGroupInterface {
    return StoreDataGroupInterfaceFromJSONTyped(json, false);
}

export function StoreDataGroupInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreDataGroupInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'websiteId': json['website_id'],
        'rootCategoryId': json['root_category_id'],
        'defaultStoreId': json['default_store_id'],
        'name': json['name'],
        'code': json['code'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function StoreDataGroupInterfaceToJSON(value?: StoreDataGroupInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'website_id': value.websiteId,
        'root_category_id': value.rootCategoryId,
        'default_store_id': value.defaultStoreId,
        'name': value.name,
        'code': value.code,
        'extension_attributes': value.extensionAttributes,
    };
}

