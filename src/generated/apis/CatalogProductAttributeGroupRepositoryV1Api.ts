/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EavDataAttributeGroupInterface,
  EavDataAttributeGroupSearchResultsInterface,
  ErrorResponse,
  PostV1ProductsAttributesetsGroupsRequest,
} from '../models';
import {
    EavDataAttributeGroupInterfaceFromJSON,
    EavDataAttributeGroupInterfaceToJSON,
    EavDataAttributeGroupSearchResultsInterfaceFromJSON,
    EavDataAttributeGroupSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ProductsAttributesetsGroupsRequestFromJSON,
    PostV1ProductsAttributesetsGroupsRequestToJSON,
} from '../models';

export interface DeleteV1ProductsAttributesetsGroupsGroupIdRequest {
    groupId: number;
}

export interface GetV1ProductsAttributesetsGroupsListRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface PostV1ProductsAttributesetsGroupsOperationRequest {
    postV1ProductsAttributesetsGroupsRequest?: PostV1ProductsAttributesetsGroupsRequest;
}

export interface PutV1ProductsAttributesetsAttributeSetIdGroupsRequest {
    attributeSetId: string;
    postV1ProductsAttributesetsGroupsRequest?: PostV1ProductsAttributesetsGroupsRequest;
}

/**
 * 
 */
export class CatalogProductAttributeGroupRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Remove attribute group by id
     */
    async deleteV1ProductsAttributesetsGroupsGroupIdRaw(requestParameters: DeleteV1ProductsAttributesetsGroupsGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling deleteV1ProductsAttributesetsGroupsGroupId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove attribute group by id
     */
    async deleteV1ProductsAttributesetsGroupsGroupId(requestParameters: DeleteV1ProductsAttributesetsGroupsGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsAttributesetsGroupsGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of attribute groups
     */
    async getV1ProductsAttributesetsGroupsListRaw(requestParameters: GetV1ProductsAttributesetsGroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EavDataAttributeGroupSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/groups/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EavDataAttributeGroupSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve list of attribute groups
     */
    async getV1ProductsAttributesetsGroupsList(requestParameters: GetV1ProductsAttributesetsGroupsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EavDataAttributeGroupSearchResultsInterface> {
        const response = await this.getV1ProductsAttributesetsGroupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save attribute group
     */
    async postV1ProductsAttributesetsGroupsRaw(requestParameters: PostV1ProductsAttributesetsGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EavDataAttributeGroupInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsAttributesetsGroupsRequestToJSON(requestParameters.postV1ProductsAttributesetsGroupsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EavDataAttributeGroupInterfaceFromJSON(jsonValue));
    }

    /**
     * Save attribute group
     */
    async postV1ProductsAttributesetsGroups(requestParameters: PostV1ProductsAttributesetsGroupsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EavDataAttributeGroupInterface> {
        const response = await this.postV1ProductsAttributesetsGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save attribute group
     */
    async putV1ProductsAttributesetsAttributeSetIdGroupsRaw(requestParameters: PutV1ProductsAttributesetsAttributeSetIdGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EavDataAttributeGroupInterface>> {
        if (requestParameters.attributeSetId === null || requestParameters.attributeSetId === undefined) {
            throw new runtime.RequiredError('attributeSetId','Required parameter requestParameters.attributeSetId was null or undefined when calling putV1ProductsAttributesetsAttributeSetIdGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/{attributeSetId}/groups`.replace(`{${"attributeSetId"}}`, encodeURIComponent(String(requestParameters.attributeSetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsAttributesetsGroupsRequestToJSON(requestParameters.postV1ProductsAttributesetsGroupsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EavDataAttributeGroupInterfaceFromJSON(jsonValue));
    }

    /**
     * Save attribute group
     */
    async putV1ProductsAttributesetsAttributeSetIdGroups(requestParameters: PutV1ProductsAttributesetsAttributeSetIdGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EavDataAttributeGroupInterface> {
        const response = await this.putV1ProductsAttributesetsAttributeSetIdGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
