/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfigurableProductDataOptionInterface,
  ErrorResponse,
  PutV1ConfigurableproductsSkuOptionsIdRequest,
} from '../models';
import {
    ConfigurableProductDataOptionInterfaceFromJSON,
    ConfigurableProductDataOptionInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1ConfigurableproductsSkuOptionsIdRequestFromJSON,
    PutV1ConfigurableproductsSkuOptionsIdRequestToJSON,
} from '../models';

export interface DeleteV1ConfigurableproductsSkuOptionsIdRequest {
    sku: string;
    id: number;
}

export interface GetV1ConfigurableproductsSkuOptionsAllRequest {
    sku: string;
}

export interface GetV1ConfigurableproductsSkuOptionsIdRequest {
    sku: string;
    id: number;
}

export interface PostV1ConfigurableproductsSkuOptionsRequest {
    sku: string;
    putV1ConfigurableproductsSkuOptionsIdRequest?: PutV1ConfigurableproductsSkuOptionsIdRequest;
}

export interface PutV1ConfigurableproductsSkuOptionsIdOperationRequest {
    sku: string;
    id: string;
    putV1ConfigurableproductsSkuOptionsIdRequest?: PutV1ConfigurableproductsSkuOptionsIdRequest;
}

/**
 * 
 */
export class ConfigurableProductOptionRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Remove option from configurable product
     */
    async deleteV1ConfigurableproductsSkuOptionsIdRaw(requestParameters: DeleteV1ConfigurableproductsSkuOptionsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling deleteV1ConfigurableproductsSkuOptionsId.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteV1ConfigurableproductsSkuOptionsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/configurable-products/{sku}/options/{id}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove option from configurable product
     */
    async deleteV1ConfigurableproductsSkuOptionsId(requestParameters: DeleteV1ConfigurableproductsSkuOptionsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ConfigurableproductsSkuOptionsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all options for configurable product
     */
    async getV1ConfigurableproductsSkuOptionsAllRaw(requestParameters: GetV1ConfigurableproductsSkuOptionsAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConfigurableProductDataOptionInterface>>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling getV1ConfigurableproductsSkuOptionsAll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/configurable-products/{sku}/options/all`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConfigurableProductDataOptionInterfaceFromJSON));
    }

    /**
     * Get all options for configurable product
     */
    async getV1ConfigurableproductsSkuOptionsAll(requestParameters: GetV1ConfigurableproductsSkuOptionsAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConfigurableProductDataOptionInterface>> {
        const response = await this.getV1ConfigurableproductsSkuOptionsAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get option for configurable product
     */
    async getV1ConfigurableproductsSkuOptionsIdRaw(requestParameters: GetV1ConfigurableproductsSkuOptionsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigurableProductDataOptionInterface>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling getV1ConfigurableproductsSkuOptionsId.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getV1ConfigurableproductsSkuOptionsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/configurable-products/{sku}/options/{id}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigurableProductDataOptionInterfaceFromJSON(jsonValue));
    }

    /**
     * Get option for configurable product
     */
    async getV1ConfigurableproductsSkuOptionsId(requestParameters: GetV1ConfigurableproductsSkuOptionsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigurableProductDataOptionInterface> {
        const response = await this.getV1ConfigurableproductsSkuOptionsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save option
     */
    async postV1ConfigurableproductsSkuOptionsRaw(requestParameters: PostV1ConfigurableproductsSkuOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling postV1ConfigurableproductsSkuOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/configurable-products/{sku}/options`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1ConfigurableproductsSkuOptionsIdRequestToJSON(requestParameters.putV1ConfigurableproductsSkuOptionsIdRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Save option
     */
    async postV1ConfigurableproductsSkuOptions(requestParameters: PostV1ConfigurableproductsSkuOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1ConfigurableproductsSkuOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save option
     */
    async putV1ConfigurableproductsSkuOptionsIdRaw(requestParameters: PutV1ConfigurableproductsSkuOptionsIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling putV1ConfigurableproductsSkuOptionsId.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putV1ConfigurableproductsSkuOptionsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/configurable-products/{sku}/options/{id}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1ConfigurableproductsSkuOptionsIdRequestToJSON(requestParameters.putV1ConfigurableproductsSkuOptionsIdRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Save option
     */
    async putV1ConfigurableproductsSkuOptionsId(requestParameters: PutV1ConfigurableproductsSkuOptionsIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.putV1ConfigurableproductsSkuOptionsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
