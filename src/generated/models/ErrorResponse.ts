/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ErrorErrorsItem } from './ErrorErrorsItem';
import {
    ErrorErrorsItemFromJSON,
    ErrorErrorsItemFromJSONTyped,
    ErrorErrorsItemToJSON,
} from './ErrorErrorsItem';
import type { ErrorParametersItem } from './ErrorParametersItem';
import {
    ErrorParametersItemFromJSON,
    ErrorParametersItemFromJSONTyped,
    ErrorParametersItemToJSON,
} from './ErrorParametersItem';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Error message
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
    /**
     * Errors list
     * @type {Array<ErrorErrorsItem>}
     * @memberof ErrorResponse
     */
    errors?: Array<ErrorErrorsItem>;
    /**
     * Error code
     * @type {number}
     * @memberof ErrorResponse
     */
    code?: number;
    /**
     * Error parameters list
     * @type {Array<ErrorParametersItem>}
     * @memberof ErrorResponse
     */
    parameters?: Array<ErrorParametersItem>;
    /**
     * Stack trace
     * @type {string}
     * @memberof ErrorResponse
     */
    trace?: string;
}

/**
 * Check if a given object implements the ErrorResponse interface.
 */
export function instanceOfErrorResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function ErrorResponseFromJSON(json: any): ErrorResponse {
    return ErrorResponseFromJSONTyped(json, false);
}

export function ErrorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'message': json['message'],
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ErrorErrorsItemFromJSON)),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'parameters': !exists(json, 'parameters') ? undefined : ((json['parameters'] as Array<any>).map(ErrorParametersItemFromJSON)),
        'trace': !exists(json, 'trace') ? undefined : json['trace'],
    };
}

export function ErrorResponseToJSON(value?: ErrorResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'message': value.message,
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ErrorErrorsItemToJSON)),
        'code': value.code,
        'parameters': value.parameters === undefined ? undefined : ((value.parameters as Array<any>).map(ErrorParametersItemToJSON)),
        'trace': value.trace,
    };
}

