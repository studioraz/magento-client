/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PostV1TaxClassesRequest,
  TaxDataTaxClassInterface,
  TaxDataTaxClassSearchResultsInterface,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1TaxClassesRequestFromJSON,
    PostV1TaxClassesRequestToJSON,
    TaxDataTaxClassInterfaceFromJSON,
    TaxDataTaxClassInterfaceToJSON,
    TaxDataTaxClassSearchResultsInterfaceFromJSON,
    TaxDataTaxClassSearchResultsInterfaceToJSON,
} from '../models';

export interface DeleteV1TaxClassesTaxClassIdRequest {
    taxClassId: number;
}

export interface GetV1TaxClassesSearchRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface GetV1TaxClassesTaxClassIdRequest {
    taxClassId: number;
}

export interface PostV1TaxClassesOperationRequest {
    postV1TaxClassesRequest?: PostV1TaxClassesRequest;
}

export interface PutV1TaxClassesClassIdRequest {
    classId: string;
    postV1TaxClassesRequest?: PostV1TaxClassesRequest;
}

/**
 * 
 */
export class TaxTaxClassRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Delete a tax class with the given tax class id.
     */
    async deleteV1TaxClassesTaxClassIdRaw(requestParameters: DeleteV1TaxClassesTaxClassIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.taxClassId === null || requestParameters.taxClassId === undefined) {
            throw new runtime.RequiredError('taxClassId','Required parameter requestParameters.taxClassId was null or undefined when calling deleteV1TaxClassesTaxClassId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/taxClasses/{taxClassId}`.replace(`{${"taxClassId"}}`, encodeURIComponent(String(requestParameters.taxClassId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a tax class with the given tax class id.
     */
    async deleteV1TaxClassesTaxClassId(requestParameters: DeleteV1TaxClassesTaxClassIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1TaxClassesTaxClassIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1TaxClassesSearchRaw(requestParameters: GetV1TaxClassesSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxDataTaxClassSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/taxClasses/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxDataTaxClassSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1TaxClassesSearch(requestParameters: GetV1TaxClassesSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxDataTaxClassSearchResultsInterface> {
        const response = await this.getV1TaxClassesSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a tax class with the given tax class id.
     */
    async getV1TaxClassesTaxClassIdRaw(requestParameters: GetV1TaxClassesTaxClassIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxDataTaxClassInterface>> {
        if (requestParameters.taxClassId === null || requestParameters.taxClassId === undefined) {
            throw new runtime.RequiredError('taxClassId','Required parameter requestParameters.taxClassId was null or undefined when calling getV1TaxClassesTaxClassId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/taxClasses/{taxClassId}`.replace(`{${"taxClassId"}}`, encodeURIComponent(String(requestParameters.taxClassId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxDataTaxClassInterfaceFromJSON(jsonValue));
    }

    /**
     * Get a tax class with the given tax class id.
     */
    async getV1TaxClassesTaxClassId(requestParameters: GetV1TaxClassesTaxClassIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxDataTaxClassInterface> {
        const response = await this.getV1TaxClassesTaxClassIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a Tax Class
     */
    async postV1TaxClassesRaw(requestParameters: PostV1TaxClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/taxClasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1TaxClassesRequestToJSON(requestParameters.postV1TaxClassesRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a Tax Class
     */
    async postV1TaxClasses(requestParameters: PostV1TaxClassesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.postV1TaxClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a Tax Class
     */
    async putV1TaxClassesClassIdRaw(requestParameters: PutV1TaxClassesClassIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.classId === null || requestParameters.classId === undefined) {
            throw new runtime.RequiredError('classId','Required parameter requestParameters.classId was null or undefined when calling putV1TaxClassesClassId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/taxClasses/{classId}`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters.classId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1TaxClassesRequestToJSON(requestParameters.postV1TaxClassesRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a Tax Class
     */
    async putV1TaxClassesClassId(requestParameters: PutV1TaxClassesClassIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.putV1TaxClassesClassIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
