/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdobeStockAssetApiDataCategoryInterface } from './AdobeStockAssetApiDataCategoryInterface';
import {
    AdobeStockAssetApiDataCategoryInterfaceFromJSON,
    AdobeStockAssetApiDataCategoryInterfaceFromJSONTyped,
    AdobeStockAssetApiDataCategoryInterfaceToJSON,
} from './AdobeStockAssetApiDataCategoryInterface';
import type { AdobeStockAssetApiDataCreatorInterface } from './AdobeStockAssetApiDataCreatorInterface';
import {
    AdobeStockAssetApiDataCreatorInterfaceFromJSON,
    AdobeStockAssetApiDataCreatorInterfaceFromJSONTyped,
    AdobeStockAssetApiDataCreatorInterfaceToJSON,
} from './AdobeStockAssetApiDataCreatorInterface';

/**
 * Adobe Stock Asset data class interface
 * @export
 * @interface AdobeStockAssetApiDataAssetInterface
 */
export interface AdobeStockAssetApiDataAssetInterface {
    /**
     * ID
     * @type {number}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    id?: number;
    /**
     * Media gallery asset id
     * @type {number}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    mediaGalleryId: number;
    /**
     * Category
     * @type {number}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    categoryId?: number;
    /**
     * 
     * @type {AdobeStockAssetApiDataCategoryInterface}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    category?: AdobeStockAssetApiDataCategoryInterface;
    /**
     * The creator
     * @type {number}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    creatorId?: number;
    /**
     * 
     * @type {AdobeStockAssetApiDataCreatorInterface}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    creator?: AdobeStockAssetApiDataCreatorInterface;
    /**
     * Licensed
     * @type {number}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    isLicensed: number;
    /**
     * Creation date
     * @type {string}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    creationDate: string;
    /**
     * ExtensionInterface class for @see \Magento\AdobeStockAssetApi\Api\Data\AssetInterface
     * @type {object}
     * @memberof AdobeStockAssetApiDataAssetInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the AdobeStockAssetApiDataAssetInterface interface.
 */
export function instanceOfAdobeStockAssetApiDataAssetInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mediaGalleryId" in value;
    isInstance = isInstance && "isLicensed" in value;
    isInstance = isInstance && "creationDate" in value;

    return isInstance;
}

export function AdobeStockAssetApiDataAssetInterfaceFromJSON(json: any): AdobeStockAssetApiDataAssetInterface {
    return AdobeStockAssetApiDataAssetInterfaceFromJSONTyped(json, false);
}

export function AdobeStockAssetApiDataAssetInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdobeStockAssetApiDataAssetInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'mediaGalleryId': json['media_gallery_id'],
        'categoryId': !exists(json, 'category_id') ? undefined : json['category_id'],
        'category': !exists(json, 'category') ? undefined : AdobeStockAssetApiDataCategoryInterfaceFromJSON(json['category']),
        'creatorId': !exists(json, 'creator_id') ? undefined : json['creator_id'],
        'creator': !exists(json, 'creator') ? undefined : AdobeStockAssetApiDataCreatorInterfaceFromJSON(json['creator']),
        'isLicensed': json['is_licensed'],
        'creationDate': json['creation_date'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function AdobeStockAssetApiDataAssetInterfaceToJSON(value?: AdobeStockAssetApiDataAssetInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'media_gallery_id': value.mediaGalleryId,
        'category_id': value.categoryId,
        'category': AdobeStockAssetApiDataCategoryInterfaceToJSON(value.category),
        'creator_id': value.creatorId,
        'creator': AdobeStockAssetApiDataCreatorInterfaceToJSON(value.creator),
        'is_licensed': value.isLicensed,
        'creation_date': value.creationDate,
        'extension_attributes': value.extensionAttributes,
    };
}

