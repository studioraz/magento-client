/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerDataGroupInterface,
  ErrorResponse,
} from '../models';
import {
    CustomerDataGroupInterfaceFromJSON,
    CustomerDataGroupInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface GetV1CustomerGroupsDefaultRequest {
    storeId?: number;
}

export interface GetV1CustomerGroupsDefaultStoreIdRequest {
    storeId: number;
}

export interface GetV1CustomerGroupsIdPermissionsRequest {
    id: number;
}

/**
 * 
 */
export class CustomerGroupManagementV1Api extends runtime.BaseAPI {

    /**
     * Get default customer group.
     */
    async getV1CustomerGroupsDefaultRaw(requestParameters: GetV1CustomerGroupsDefaultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataGroupInterface>> {
        const queryParameters: any = {};

        if (requestParameters.storeId !== undefined) {
            queryParameters['storeId'] = requestParameters.storeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customerGroups/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataGroupInterfaceFromJSON(jsonValue));
    }

    /**
     * Get default customer group.
     */
    async getV1CustomerGroupsDefault(requestParameters: GetV1CustomerGroupsDefaultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataGroupInterface> {
        const response = await this.getV1CustomerGroupsDefaultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get default customer group.
     */
    async getV1CustomerGroupsDefaultStoreIdRaw(requestParameters: GetV1CustomerGroupsDefaultStoreIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataGroupInterface>> {
        if (requestParameters.storeId === null || requestParameters.storeId === undefined) {
            throw new runtime.RequiredError('storeId','Required parameter requestParameters.storeId was null or undefined when calling getV1CustomerGroupsDefaultStoreId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customerGroups/default/{storeId}`.replace(`{${"storeId"}}`, encodeURIComponent(String(requestParameters.storeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataGroupInterfaceFromJSON(jsonValue));
    }

    /**
     * Get default customer group.
     */
    async getV1CustomerGroupsDefaultStoreId(requestParameters: GetV1CustomerGroupsDefaultStoreIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataGroupInterface> {
        const response = await this.getV1CustomerGroupsDefaultStoreIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if customer group can be deleted.
     */
    async getV1CustomerGroupsIdPermissionsRaw(requestParameters: GetV1CustomerGroupsIdPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getV1CustomerGroupsIdPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customerGroups/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check if customer group can be deleted.
     */
    async getV1CustomerGroupsIdPermissions(requestParameters: GetV1CustomerGroupsIdPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.getV1CustomerGroupsIdPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
