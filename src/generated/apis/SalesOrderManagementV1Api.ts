/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PostV1OrdersIdCommentsRequest,
  SalesDataOrderStatusHistorySearchResultInterface,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1OrdersIdCommentsRequestFromJSON,
    PostV1OrdersIdCommentsRequestToJSON,
    SalesDataOrderStatusHistorySearchResultInterfaceFromJSON,
    SalesDataOrderStatusHistorySearchResultInterfaceToJSON,
} from '../models';

export interface GetV1OrdersIdCommentsRequest {
    id: number;
}

export interface GetV1OrdersIdStatusesRequest {
    id: number;
}

export interface PostV1OrdersIdCancelRequest {
    id: number;
}

export interface PostV1OrdersIdCommentsOperationRequest {
    id: number;
    postV1OrdersIdCommentsRequest?: PostV1OrdersIdCommentsRequest;
}

export interface PostV1OrdersIdEmailsRequest {
    id: number;
}

export interface PostV1OrdersIdHoldRequest {
    id: number;
}

export interface PostV1OrdersIdUnholdRequest {
    id: number;
}

/**
 * 
 */
export class SalesOrderManagementV1Api extends runtime.BaseAPI {

    /**
     * Lists comments for a specified order.
     */
    async getV1OrdersIdCommentsRaw(requestParameters: GetV1OrdersIdCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesDataOrderStatusHistorySearchResultInterface>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getV1OrdersIdComments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/orders/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesDataOrderStatusHistorySearchResultInterfaceFromJSON(jsonValue));
    }

    /**
     * Lists comments for a specified order.
     */
    async getV1OrdersIdComments(requestParameters: GetV1OrdersIdCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesDataOrderStatusHistorySearchResultInterface> {
        const response = await this.getV1OrdersIdCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the status for a specified order.
     */
    async getV1OrdersIdStatusesRaw(requestParameters: GetV1OrdersIdStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getV1OrdersIdStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/orders/{id}/statuses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Gets the status for a specified order.
     */
    async getV1OrdersIdStatuses(requestParameters: GetV1OrdersIdStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getV1OrdersIdStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancels a specified order.
     */
    async postV1OrdersIdCancelRaw(requestParameters: PostV1OrdersIdCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1OrdersIdCancel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/orders/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Cancels a specified order.
     */
    async postV1OrdersIdCancel(requestParameters: PostV1OrdersIdCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1OrdersIdCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a comment to a specified order.
     */
    async postV1OrdersIdCommentsRaw(requestParameters: PostV1OrdersIdCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1OrdersIdComments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/orders/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1OrdersIdCommentsRequestToJSON(requestParameters.postV1OrdersIdCommentsRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds a comment to a specified order.
     */
    async postV1OrdersIdComments(requestParameters: PostV1OrdersIdCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1OrdersIdCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Emails a user a specified order.
     */
    async postV1OrdersIdEmailsRaw(requestParameters: PostV1OrdersIdEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1OrdersIdEmails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/orders/{id}/emails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Emails a user a specified order.
     */
    async postV1OrdersIdEmails(requestParameters: PostV1OrdersIdEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1OrdersIdEmailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holds a specified order.
     */
    async postV1OrdersIdHoldRaw(requestParameters: PostV1OrdersIdHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1OrdersIdHold.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/orders/{id}/hold`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Holds a specified order.
     */
    async postV1OrdersIdHold(requestParameters: PostV1OrdersIdHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1OrdersIdHoldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Releases a specified order from hold status.
     */
    async postV1OrdersIdUnholdRaw(requestParameters: PostV1OrdersIdUnholdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1OrdersIdUnhold.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/orders/{id}/unhold`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Releases a specified order from hold status.
     */
    async postV1OrdersIdUnhold(requestParameters: PostV1OrdersIdUnholdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1OrdersIdUnholdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
