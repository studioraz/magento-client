/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Interface for store config
 * @export
 * @interface StoreDataStoreConfigInterface
 */
export interface StoreDataStoreConfigInterface {
    /**
     * Store id
     * @type {number}
     * @memberof StoreDataStoreConfigInterface
     */
    id: number;
    /**
     * Store code
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    code: string;
    /**
     * Website id of the store
     * @type {number}
     * @memberof StoreDataStoreConfigInterface
     */
    websiteId: number;
    /**
     * Store locale
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    locale: string;
    /**
     * Base currency code
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    baseCurrencyCode: string;
    /**
     * Default display currency code
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    defaultDisplayCurrencyCode: string;
    /**
     * Timezone of the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    timezone: string;
    /**
     * The unit of weight
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    weightUnit: string;
    /**
     * Base URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    baseUrl: string;
    /**
     * Base link URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    baseLinkUrl: string;
    /**
     * Base static URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    baseStaticUrl: string;
    /**
     * Base media URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    baseMediaUrl: string;
    /**
     * Secure base URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    secureBaseUrl: string;
    /**
     * Secure base link URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    secureBaseLinkUrl: string;
    /**
     * Secure base static URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    secureBaseStaticUrl: string;
    /**
     * Secure base media URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    secureBaseMediaUrl: string;
    /**
     * ExtensionInterface class for @see \Magento\Store\Api\Data\StoreConfigInterface
     * @type {object}
     * @memberof StoreDataStoreConfigInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the StoreDataStoreConfigInterface interface.
 */
export function instanceOfStoreDataStoreConfigInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "websiteId" in value;
    isInstance = isInstance && "locale" in value;
    isInstance = isInstance && "baseCurrencyCode" in value;
    isInstance = isInstance && "defaultDisplayCurrencyCode" in value;
    isInstance = isInstance && "timezone" in value;
    isInstance = isInstance && "weightUnit" in value;
    isInstance = isInstance && "baseUrl" in value;
    isInstance = isInstance && "baseLinkUrl" in value;
    isInstance = isInstance && "baseStaticUrl" in value;
    isInstance = isInstance && "baseMediaUrl" in value;
    isInstance = isInstance && "secureBaseUrl" in value;
    isInstance = isInstance && "secureBaseLinkUrl" in value;
    isInstance = isInstance && "secureBaseStaticUrl" in value;
    isInstance = isInstance && "secureBaseMediaUrl" in value;

    return isInstance;
}

export function StoreDataStoreConfigInterfaceFromJSON(json: any): StoreDataStoreConfigInterface {
    return StoreDataStoreConfigInterfaceFromJSONTyped(json, false);
}

export function StoreDataStoreConfigInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreDataStoreConfigInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'code': json['code'],
        'websiteId': json['website_id'],
        'locale': json['locale'],
        'baseCurrencyCode': json['base_currency_code'],
        'defaultDisplayCurrencyCode': json['default_display_currency_code'],
        'timezone': json['timezone'],
        'weightUnit': json['weight_unit'],
        'baseUrl': json['base_url'],
        'baseLinkUrl': json['base_link_url'],
        'baseStaticUrl': json['base_static_url'],
        'baseMediaUrl': json['base_media_url'],
        'secureBaseUrl': json['secure_base_url'],
        'secureBaseLinkUrl': json['secure_base_link_url'],
        'secureBaseStaticUrl': json['secure_base_static_url'],
        'secureBaseMediaUrl': json['secure_base_media_url'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function StoreDataStoreConfigInterfaceToJSON(value?: StoreDataStoreConfigInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'code': value.code,
        'website_id': value.websiteId,
        'locale': value.locale,
        'base_currency_code': value.baseCurrencyCode,
        'default_display_currency_code': value.defaultDisplayCurrencyCode,
        'timezone': value.timezone,
        'weight_unit': value.weightUnit,
        'base_url': value.baseUrl,
        'base_link_url': value.baseLinkUrl,
        'base_static_url': value.baseStaticUrl,
        'base_media_url': value.baseMediaUrl,
        'secure_base_url': value.secureBaseUrl,
        'secure_base_link_url': value.secureBaseLinkUrl,
        'secure_base_static_url': value.secureBaseStaticUrl,
        'secure_base_media_url': value.secureBaseMediaUrl,
        'extension_attributes': value.extensionAttributes,
    };
}

