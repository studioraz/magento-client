/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Product Special Price Interface is used to encapsulate data that can be processed by efficient price API.
 * @export
 * @interface CatalogDataSpecialPriceInterface
 */
export interface CatalogDataSpecialPriceInterface {
    /**
     * Product special price value.
     * @type {number}
     * @memberof CatalogDataSpecialPriceInterface
     */
    price: number;
    /**
     * ID of store, that contains special price value.
     * @type {number}
     * @memberof CatalogDataSpecialPriceInterface
     */
    storeId: number;
    /**
     * SKU of product, that contains special price value.
     * @type {string}
     * @memberof CatalogDataSpecialPriceInterface
     */
    sku: string;
    /**
     * Start date for special price in Y-m-d H:i:s format.
     * @type {string}
     * @memberof CatalogDataSpecialPriceInterface
     */
    priceFrom: string;
    /**
     * End date for special price in Y-m-d H:i:s format.
     * @type {string}
     * @memberof CatalogDataSpecialPriceInterface
     */
    priceTo: string;
    /**
     * ExtensionInterface class for @see \Magento\Catalog\Api\Data\SpecialPriceInterface
     * @type {object}
     * @memberof CatalogDataSpecialPriceInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the CatalogDataSpecialPriceInterface interface.
 */
export function instanceOfCatalogDataSpecialPriceInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "storeId" in value;
    isInstance = isInstance && "sku" in value;
    isInstance = isInstance && "priceFrom" in value;
    isInstance = isInstance && "priceTo" in value;

    return isInstance;
}

export function CatalogDataSpecialPriceInterfaceFromJSON(json: any): CatalogDataSpecialPriceInterface {
    return CatalogDataSpecialPriceInterfaceFromJSONTyped(json, false);
}

export function CatalogDataSpecialPriceInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataSpecialPriceInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'price': json['price'],
        'storeId': json['store_id'],
        'sku': json['sku'],
        'priceFrom': json['price_from'],
        'priceTo': json['price_to'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function CatalogDataSpecialPriceInterfaceToJSON(value?: CatalogDataSpecialPriceInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'price': value.price,
        'store_id': value.storeId,
        'sku': value.sku,
        'price_from': value.priceFrom,
        'price_to': value.priceTo,
        'extension_attributes': value.extensionAttributes,
    };
}

