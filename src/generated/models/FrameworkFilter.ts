/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Filter which can be used by any methods from service layer.
 * @export
 * @interface FrameworkFilter
 */
export interface FrameworkFilter {
    /**
     * Field
     * @type {string}
     * @memberof FrameworkFilter
     */
    field: string;
    /**
     * Value
     * @type {string}
     * @memberof FrameworkFilter
     */
    value: string;
    /**
     * Condition type
     * @type {string}
     * @memberof FrameworkFilter
     */
    conditionType?: string;
}

/**
 * Check if a given object implements the FrameworkFilter interface.
 */
export function instanceOfFrameworkFilter(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "field" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function FrameworkFilterFromJSON(json: any): FrameworkFilter {
    return FrameworkFilterFromJSONTyped(json, false);
}

export function FrameworkFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): FrameworkFilter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'field': json['field'],
        'value': json['value'],
        'conditionType': !exists(json, 'condition_type') ? undefined : json['condition_type'],
    };
}

export function FrameworkFilterToJSON(value?: FrameworkFilter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'field': value.field,
        'value': value.value,
        'condition_type': value.conditionType,
    };
}

