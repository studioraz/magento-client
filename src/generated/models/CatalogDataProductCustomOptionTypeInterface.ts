/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CatalogDataProductCustomOptionTypeInterface
 */
export interface CatalogDataProductCustomOptionTypeInterface {
    /**
     * Option type label
     * @type {string}
     * @memberof CatalogDataProductCustomOptionTypeInterface
     */
    label: string;
    /**
     * Option type code
     * @type {string}
     * @memberof CatalogDataProductCustomOptionTypeInterface
     */
    code: string;
    /**
     * Option type group
     * @type {string}
     * @memberof CatalogDataProductCustomOptionTypeInterface
     */
    group: string;
    /**
     * ExtensionInterface class for @see \Magento\Catalog\Api\Data\ProductCustomOptionTypeInterface
     * @type {object}
     * @memberof CatalogDataProductCustomOptionTypeInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the CatalogDataProductCustomOptionTypeInterface interface.
 */
export function instanceOfCatalogDataProductCustomOptionTypeInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "group" in value;

    return isInstance;
}

export function CatalogDataProductCustomOptionTypeInterfaceFromJSON(json: any): CatalogDataProductCustomOptionTypeInterface {
    return CatalogDataProductCustomOptionTypeInterfaceFromJSONTyped(json, false);
}

export function CatalogDataProductCustomOptionTypeInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataProductCustomOptionTypeInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'label': json['label'],
        'code': json['code'],
        'group': json['group'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function CatalogDataProductCustomOptionTypeInterfaceToJSON(value?: CatalogDataProductCustomOptionTypeInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'label': value.label,
        'code': value.code,
        'group': value.group,
        'extension_attributes': value.extensionAttributes,
    };
}

