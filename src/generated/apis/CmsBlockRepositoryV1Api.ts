/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CmsDataBlockInterface,
  CmsDataBlockSearchResultsInterface,
  ErrorResponse,
  PostV1CmsBlockRequest,
} from '../models';
import {
    CmsDataBlockInterfaceFromJSON,
    CmsDataBlockInterfaceToJSON,
    CmsDataBlockSearchResultsInterfaceFromJSON,
    CmsDataBlockSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1CmsBlockRequestFromJSON,
    PostV1CmsBlockRequestToJSON,
} from '../models';

export interface DeleteV1CmsBlockBlockIdRequest {
    blockId: string;
}

export interface GetV1CmsBlockBlockIdRequest {
    blockId: string;
}

export interface GetV1CmsBlockSearchRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface PostV1CmsBlockOperationRequest {
    postV1CmsBlockRequest?: PostV1CmsBlockRequest;
}

export interface PutV1CmsBlockIdRequest {
    id: string;
    postV1CmsBlockRequest?: PostV1CmsBlockRequest;
}

/**
 * 
 */
export class CmsBlockRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Delete block by ID.
     */
    async deleteV1CmsBlockBlockIdRaw(requestParameters: DeleteV1CmsBlockBlockIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling deleteV1CmsBlockBlockId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsBlock/{blockId}`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete block by ID.
     */
    async deleteV1CmsBlockBlockId(requestParameters: DeleteV1CmsBlockBlockIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1CmsBlockBlockIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve block.
     */
    async getV1CmsBlockBlockIdRaw(requestParameters: GetV1CmsBlockBlockIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmsDataBlockInterface>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getV1CmsBlockBlockId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsBlock/{blockId}`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CmsDataBlockInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve block.
     */
    async getV1CmsBlockBlockId(requestParameters: GetV1CmsBlockBlockIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmsDataBlockInterface> {
        const response = await this.getV1CmsBlockBlockIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve blocks matching the specified criteria.
     */
    async getV1CmsBlockSearchRaw(requestParameters: GetV1CmsBlockSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmsDataBlockSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsBlock/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CmsDataBlockSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve blocks matching the specified criteria.
     */
    async getV1CmsBlockSearch(requestParameters: GetV1CmsBlockSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmsDataBlockSearchResultsInterface> {
        const response = await this.getV1CmsBlockSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save block.
     */
    async postV1CmsBlockRaw(requestParameters: PostV1CmsBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmsDataBlockInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsBlock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CmsBlockRequestToJSON(requestParameters.postV1CmsBlockRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CmsDataBlockInterfaceFromJSON(jsonValue));
    }

    /**
     * Save block.
     */
    async postV1CmsBlock(requestParameters: PostV1CmsBlockOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmsDataBlockInterface> {
        const response = await this.postV1CmsBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save block.
     */
    async putV1CmsBlockIdRaw(requestParameters: PutV1CmsBlockIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmsDataBlockInterface>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putV1CmsBlockId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsBlock/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CmsBlockRequestToJSON(requestParameters.postV1CmsBlockRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CmsDataBlockInterfaceFromJSON(jsonValue));
    }

    /**
     * Save block.
     */
    async putV1CmsBlockId(requestParameters: PutV1CmsBlockIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmsDataBlockInterface> {
        const response = await this.putV1CmsBlockIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
