/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConfigurableProductDataOptionValueInterface } from './ConfigurableProductDataOptionValueInterface';
import {
    ConfigurableProductDataOptionValueInterfaceFromJSON,
    ConfigurableProductDataOptionValueInterfaceFromJSONTyped,
    ConfigurableProductDataOptionValueInterfaceToJSON,
} from './ConfigurableProductDataOptionValueInterface';

/**
 * Interface OptionInterface
 * @export
 * @interface ConfigurableProductDataOptionInterface
 */
export interface ConfigurableProductDataOptionInterface {
    /**
     * 
     * @type {number}
     * @memberof ConfigurableProductDataOptionInterface
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigurableProductDataOptionInterface
     */
    attributeId?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigurableProductDataOptionInterface
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigurableProductDataOptionInterface
     */
    position?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigurableProductDataOptionInterface
     */
    isUseDefault?: boolean;
    /**
     * 
     * @type {Array<ConfigurableProductDataOptionValueInterface>}
     * @memberof ConfigurableProductDataOptionInterface
     */
    values?: Array<ConfigurableProductDataOptionValueInterface>;
    /**
     * ExtensionInterface class for @see \Magento\ConfigurableProduct\Api\Data\OptionInterface
     * @type {object}
     * @memberof ConfigurableProductDataOptionInterface
     */
    extensionAttributes?: object;
    /**
     * 
     * @type {number}
     * @memberof ConfigurableProductDataOptionInterface
     */
    productId?: number;
}

/**
 * Check if a given object implements the ConfigurableProductDataOptionInterface interface.
 */
export function instanceOfConfigurableProductDataOptionInterface(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigurableProductDataOptionInterfaceFromJSON(json: any): ConfigurableProductDataOptionInterface {
    return ConfigurableProductDataOptionInterfaceFromJSONTyped(json, false);
}

export function ConfigurableProductDataOptionInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigurableProductDataOptionInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'attributeId': !exists(json, 'attribute_id') ? undefined : json['attribute_id'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'isUseDefault': !exists(json, 'is_use_default') ? undefined : json['is_use_default'],
        'values': !exists(json, 'values') ? undefined : ((json['values'] as Array<any>).map(ConfigurableProductDataOptionValueInterfaceFromJSON)),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
        'productId': !exists(json, 'product_id') ? undefined : json['product_id'],
    };
}

export function ConfigurableProductDataOptionInterfaceToJSON(value?: ConfigurableProductDataOptionInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'attribute_id': value.attributeId,
        'label': value.label,
        'position': value.position,
        'is_use_default': value.isUseDefault,
        'values': value.values === undefined ? undefined : ((value.values as Array<any>).map(ConfigurableProductDataOptionValueInterfaceToJSON)),
        'extension_attributes': value.extensionAttributes,
        'product_id': value.productId,
    };
}

