/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CatalogDataProductRenderButtonInterface } from './CatalogDataProductRenderButtonInterface';
import {
    CatalogDataProductRenderButtonInterfaceFromJSON,
    CatalogDataProductRenderButtonInterfaceFromJSONTyped,
    CatalogDataProductRenderButtonInterfaceToJSON,
} from './CatalogDataProductRenderButtonInterface';
import type { CatalogDataProductRenderExtensionInterface } from './CatalogDataProductRenderExtensionInterface';
import {
    CatalogDataProductRenderExtensionInterfaceFromJSON,
    CatalogDataProductRenderExtensionInterfaceFromJSONTyped,
    CatalogDataProductRenderExtensionInterfaceToJSON,
} from './CatalogDataProductRenderExtensionInterface';
import type { CatalogDataProductRenderImageInterface } from './CatalogDataProductRenderImageInterface';
import {
    CatalogDataProductRenderImageInterfaceFromJSON,
    CatalogDataProductRenderImageInterfaceFromJSONTyped,
    CatalogDataProductRenderImageInterfaceToJSON,
} from './CatalogDataProductRenderImageInterface';
import type { CatalogDataProductRenderPriceInfoInterface } from './CatalogDataProductRenderPriceInfoInterface';
import {
    CatalogDataProductRenderPriceInfoInterfaceFromJSON,
    CatalogDataProductRenderPriceInfoInterfaceFromJSONTyped,
    CatalogDataProductRenderPriceInfoInterfaceToJSON,
} from './CatalogDataProductRenderPriceInfoInterface';

/**
 * Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data
 * @export
 * @interface CatalogDataProductRenderInterface
 */
export interface CatalogDataProductRenderInterface {
    /**
     * 
     * @type {CatalogDataProductRenderButtonInterface}
     * @memberof CatalogDataProductRenderInterface
     */
    addToCartButton: CatalogDataProductRenderButtonInterface;
    /**
     * 
     * @type {CatalogDataProductRenderButtonInterface}
     * @memberof CatalogDataProductRenderInterface
     */
    addToCompareButton: CatalogDataProductRenderButtonInterface;
    /**
     * 
     * @type {CatalogDataProductRenderPriceInfoInterface}
     * @memberof CatalogDataProductRenderInterface
     */
    priceInfo: CatalogDataProductRenderPriceInfoInterface;
    /**
     * Enough information, that needed to render image on front
     * @type {Array<CatalogDataProductRenderImageInterface>}
     * @memberof CatalogDataProductRenderInterface
     */
    images: Array<CatalogDataProductRenderImageInterface>;
    /**
     * Product url
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    url: string;
    /**
     * Product identifier
     * @type {number}
     * @memberof CatalogDataProductRenderInterface
     */
    id: number;
    /**
     * Product name
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    name: string;
    /**
     * Product type. Such as bundle, grouped, simple, etc...
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    type: string;
    /**
     * Information about product saleability (In Stock)
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    isSalable: string;
    /**
     * Information about current store id or requested store id
     * @type {number}
     * @memberof CatalogDataProductRenderInterface
     */
    storeId: number;
    /**
     * Current or desired currency code to product
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    currencyCode: string;
    /**
     * 
     * @type {CatalogDataProductRenderExtensionInterface}
     * @memberof CatalogDataProductRenderInterface
     */
    extensionAttributes: CatalogDataProductRenderExtensionInterface;
}

/**
 * Check if a given object implements the CatalogDataProductRenderInterface interface.
 */
export function instanceOfCatalogDataProductRenderInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "addToCartButton" in value;
    isInstance = isInstance && "addToCompareButton" in value;
    isInstance = isInstance && "priceInfo" in value;
    isInstance = isInstance && "images" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "isSalable" in value;
    isInstance = isInstance && "storeId" in value;
    isInstance = isInstance && "currencyCode" in value;
    isInstance = isInstance && "extensionAttributes" in value;

    return isInstance;
}

export function CatalogDataProductRenderInterfaceFromJSON(json: any): CatalogDataProductRenderInterface {
    return CatalogDataProductRenderInterfaceFromJSONTyped(json, false);
}

export function CatalogDataProductRenderInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataProductRenderInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addToCartButton': CatalogDataProductRenderButtonInterfaceFromJSON(json['add_to_cart_button']),
        'addToCompareButton': CatalogDataProductRenderButtonInterfaceFromJSON(json['add_to_compare_button']),
        'priceInfo': CatalogDataProductRenderPriceInfoInterfaceFromJSON(json['price_info']),
        'images': ((json['images'] as Array<any>).map(CatalogDataProductRenderImageInterfaceFromJSON)),
        'url': json['url'],
        'id': json['id'],
        'name': json['name'],
        'type': json['type'],
        'isSalable': json['is_salable'],
        'storeId': json['store_id'],
        'currencyCode': json['currency_code'],
        'extensionAttributes': CatalogDataProductRenderExtensionInterfaceFromJSON(json['extension_attributes']),
    };
}

export function CatalogDataProductRenderInterfaceToJSON(value?: CatalogDataProductRenderInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'add_to_cart_button': CatalogDataProductRenderButtonInterfaceToJSON(value.addToCartButton),
        'add_to_compare_button': CatalogDataProductRenderButtonInterfaceToJSON(value.addToCompareButton),
        'price_info': CatalogDataProductRenderPriceInfoInterfaceToJSON(value.priceInfo),
        'images': ((value.images as Array<any>).map(CatalogDataProductRenderImageInterfaceToJSON)),
        'url': value.url,
        'id': value.id,
        'name': value.name,
        'type': value.type,
        'is_salable': value.isSalable,
        'store_id': value.storeId,
        'currency_code': value.currencyCode,
        'extension_attributes': CatalogDataProductRenderExtensionInterfaceToJSON(value.extensionAttributes),
    };
}

