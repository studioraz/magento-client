/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataProductAttributeInterface,
  ErrorResponse,
  PostV1ProductsAttributesetsAttributesRequest,
} from '../models';
import {
    CatalogDataProductAttributeInterfaceFromJSON,
    CatalogDataProductAttributeInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ProductsAttributesetsAttributesRequestFromJSON,
    PostV1ProductsAttributesetsAttributesRequestToJSON,
} from '../models';

export interface DeleteV1ProductsAttributesetsAttributeSetIdAttributesAttributeCodeRequest {
    attributeSetId: string;
    attributeCode: string;
}

export interface GetV1ProductsAttributesetsAttributeSetIdAttributesRequest {
    attributeSetId: string;
}

export interface PostV1ProductsAttributesetsAttributesOperationRequest {
    postV1ProductsAttributesetsAttributesRequest?: PostV1ProductsAttributesetsAttributesRequest;
}

/**
 * 
 */
export class CatalogProductAttributeManagementV1Api extends runtime.BaseAPI {

    /**
     * Remove attribute from attribute set
     */
    async deleteV1ProductsAttributesetsAttributeSetIdAttributesAttributeCodeRaw(requestParameters: DeleteV1ProductsAttributesetsAttributeSetIdAttributesAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.attributeSetId === null || requestParameters.attributeSetId === undefined) {
            throw new runtime.RequiredError('attributeSetId','Required parameter requestParameters.attributeSetId was null or undefined when calling deleteV1ProductsAttributesetsAttributeSetIdAttributesAttributeCode.');
        }

        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling deleteV1ProductsAttributesetsAttributeSetIdAttributesAttributeCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/{attributeSetId}/attributes/{attributeCode}`.replace(`{${"attributeSetId"}}`, encodeURIComponent(String(requestParameters.attributeSetId))).replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove attribute from attribute set
     */
    async deleteV1ProductsAttributesetsAttributeSetIdAttributesAttributeCode(requestParameters: DeleteV1ProductsAttributesetsAttributeSetIdAttributesAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsAttributesetsAttributeSetIdAttributesAttributeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve related attributes based on given attribute set ID
     */
    async getV1ProductsAttributesetsAttributeSetIdAttributesRaw(requestParameters: GetV1ProductsAttributesetsAttributeSetIdAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataProductAttributeInterface>>> {
        if (requestParameters.attributeSetId === null || requestParameters.attributeSetId === undefined) {
            throw new runtime.RequiredError('attributeSetId','Required parameter requestParameters.attributeSetId was null or undefined when calling getV1ProductsAttributesetsAttributeSetIdAttributes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/{attributeSetId}/attributes`.replace(`{${"attributeSetId"}}`, encodeURIComponent(String(requestParameters.attributeSetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataProductAttributeInterfaceFromJSON));
    }

    /**
     * Retrieve related attributes based on given attribute set ID
     */
    async getV1ProductsAttributesetsAttributeSetIdAttributes(requestParameters: GetV1ProductsAttributesetsAttributeSetIdAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataProductAttributeInterface>> {
        const response = await this.getV1ProductsAttributesetsAttributeSetIdAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign attribute to attribute set
     */
    async postV1ProductsAttributesetsAttributesRaw(requestParameters: PostV1ProductsAttributesetsAttributesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/attributes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsAttributesetsAttributesRequestToJSON(requestParameters.postV1ProductsAttributesetsAttributesRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assign attribute to attribute set
     */
    async postV1ProductsAttributesetsAttributes(requestParameters: PostV1ProductsAttributesetsAttributesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1ProductsAttributesetsAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
