/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Interface LinkInterface
 * @export
 * @interface BundleDataLinkInterface
 */
export interface BundleDataLinkInterface {
    /**
     * The identifier
     * @type {string}
     * @memberof BundleDataLinkInterface
     */
    id?: string;
    /**
     * Linked product sku
     * @type {string}
     * @memberof BundleDataLinkInterface
     */
    sku?: string;
    /**
     * Option id
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    optionId?: number;
    /**
     * Qty
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    qty?: number;
    /**
     * Position
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    position?: number;
    /**
     * Is default
     * @type {boolean}
     * @memberof BundleDataLinkInterface
     */
    isDefault: boolean;
    /**
     * Price
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    price: number;
    /**
     * Price type
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    priceType: number;
    /**
     * Whether quantity could be changed
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    canChangeQuantity?: number;
    /**
     * ExtensionInterface class for @see \Magento\Bundle\Api\Data\LinkInterface
     * @type {object}
     * @memberof BundleDataLinkInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the BundleDataLinkInterface interface.
 */
export function instanceOfBundleDataLinkInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "isDefault" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "priceType" in value;

    return isInstance;
}

export function BundleDataLinkInterfaceFromJSON(json: any): BundleDataLinkInterface {
    return BundleDataLinkInterfaceFromJSONTyped(json, false);
}

export function BundleDataLinkInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): BundleDataLinkInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'optionId': !exists(json, 'option_id') ? undefined : json['option_id'],
        'qty': !exists(json, 'qty') ? undefined : json['qty'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'isDefault': json['is_default'],
        'price': json['price'],
        'priceType': json['price_type'],
        'canChangeQuantity': !exists(json, 'can_change_quantity') ? undefined : json['can_change_quantity'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function BundleDataLinkInterfaceToJSON(value?: BundleDataLinkInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'sku': value.sku,
        'option_id': value.optionId,
        'qty': value.qty,
        'position': value.position,
        'is_default': value.isDefault,
        'price': value.price,
        'price_type': value.priceType,
        'can_change_quantity': value.canChangeQuantity,
        'extension_attributes': value.extensionAttributes,
    };
}

