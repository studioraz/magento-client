/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CatalogDataProductInterface } from './CatalogDataProductInterface';
import {
    CatalogDataProductInterfaceFromJSON,
    CatalogDataProductInterfaceFromJSONTyped,
    CatalogDataProductInterfaceToJSON,
} from './CatalogDataProductInterface';
import type { ConfigurableProductDataOptionInterface } from './ConfigurableProductDataOptionInterface';
import {
    ConfigurableProductDataOptionInterfaceFromJSON,
    ConfigurableProductDataOptionInterfaceFromJSONTyped,
    ConfigurableProductDataOptionInterfaceToJSON,
} from './ConfigurableProductDataOptionInterface';

/**
 * 
 * @export
 * @interface PutV1ConfigurableproductsVariationRequest
 */
export interface PutV1ConfigurableproductsVariationRequest {
    /**
     * 
     * @type {CatalogDataProductInterface}
     * @memberof PutV1ConfigurableproductsVariationRequest
     */
    product: CatalogDataProductInterface;
    /**
     * 
     * @type {Array<ConfigurableProductDataOptionInterface>}
     * @memberof PutV1ConfigurableproductsVariationRequest
     */
    options: Array<ConfigurableProductDataOptionInterface>;
}

/**
 * Check if a given object implements the PutV1ConfigurableproductsVariationRequest interface.
 */
export function instanceOfPutV1ConfigurableproductsVariationRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "product" in value;
    isInstance = isInstance && "options" in value;

    return isInstance;
}

export function PutV1ConfigurableproductsVariationRequestFromJSON(json: any): PutV1ConfigurableproductsVariationRequest {
    return PutV1ConfigurableproductsVariationRequestFromJSONTyped(json, false);
}

export function PutV1ConfigurableproductsVariationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PutV1ConfigurableproductsVariationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'product': CatalogDataProductInterfaceFromJSON(json['product']),
        'options': ((json['options'] as Array<any>).map(ConfigurableProductDataOptionInterfaceFromJSON)),
    };
}

export function PutV1ConfigurableproductsVariationRequestToJSON(value?: PutV1ConfigurableproductsVariationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'product': CatalogDataProductInterfaceToJSON(value.product),
        'options': ((value.options as Array<any>).map(ConfigurableProductDataOptionInterfaceToJSON)),
    };
}

