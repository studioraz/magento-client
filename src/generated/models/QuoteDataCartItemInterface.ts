/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuoteDataCartItemExtensionInterface } from './QuoteDataCartItemExtensionInterface';
import {
    QuoteDataCartItemExtensionInterfaceFromJSON,
    QuoteDataCartItemExtensionInterfaceFromJSONTyped,
    QuoteDataCartItemExtensionInterfaceToJSON,
} from './QuoteDataCartItemExtensionInterface';
import type { QuoteDataProductOptionInterface } from './QuoteDataProductOptionInterface';
import {
    QuoteDataProductOptionInterfaceFromJSON,
    QuoteDataProductOptionInterfaceFromJSONTyped,
    QuoteDataProductOptionInterfaceToJSON,
} from './QuoteDataProductOptionInterface';

/**
 * Interface CartItemInterface
 * @export
 * @interface QuoteDataCartItemInterface
 */
export interface QuoteDataCartItemInterface {
    /**
     * Item ID. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataCartItemInterface
     */
    itemId?: number;
    /**
     * Product SKU. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartItemInterface
     */
    sku?: string;
    /**
     * Product quantity.
     * @type {number}
     * @memberof QuoteDataCartItemInterface
     */
    qty: number;
    /**
     * Product name. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartItemInterface
     */
    name?: string;
    /**
     * Product price. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataCartItemInterface
     */
    price?: number;
    /**
     * Product type. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartItemInterface
     */
    productType?: string;
    /**
     * Quote id.
     * @type {string}
     * @memberof QuoteDataCartItemInterface
     */
    quoteId: string;
    /**
     * 
     * @type {QuoteDataProductOptionInterface}
     * @memberof QuoteDataCartItemInterface
     */
    productOption?: QuoteDataProductOptionInterface;
    /**
     * 
     * @type {QuoteDataCartItemExtensionInterface}
     * @memberof QuoteDataCartItemInterface
     */
    extensionAttributes?: QuoteDataCartItemExtensionInterface;
}

/**
 * Check if a given object implements the QuoteDataCartItemInterface interface.
 */
export function instanceOfQuoteDataCartItemInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "qty" in value;
    isInstance = isInstance && "quoteId" in value;

    return isInstance;
}

export function QuoteDataCartItemInterfaceFromJSON(json: any): QuoteDataCartItemInterface {
    return QuoteDataCartItemInterfaceFromJSONTyped(json, false);
}

export function QuoteDataCartItemInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuoteDataCartItemInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'itemId': !exists(json, 'item_id') ? undefined : json['item_id'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'qty': json['qty'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'productType': !exists(json, 'product_type') ? undefined : json['product_type'],
        'quoteId': json['quote_id'],
        'productOption': !exists(json, 'product_option') ? undefined : QuoteDataProductOptionInterfaceFromJSON(json['product_option']),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : QuoteDataCartItemExtensionInterfaceFromJSON(json['extension_attributes']),
    };
}

export function QuoteDataCartItemInterfaceToJSON(value?: QuoteDataCartItemInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'item_id': value.itemId,
        'sku': value.sku,
        'qty': value.qty,
        'name': value.name,
        'price': value.price,
        'product_type': value.productType,
        'quote_id': value.quoteId,
        'product_option': QuoteDataProductOptionInterfaceToJSON(value.productOption),
        'extension_attributes': QuoteDataCartItemExtensionInterfaceToJSON(value.extensionAttributes),
    };
}

