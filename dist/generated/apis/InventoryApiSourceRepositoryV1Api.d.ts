/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ErrorResponse, InventoryApiDataSourceInterface, InventoryApiDataSourceSearchResultsInterface, PostV1InventorySourcesRequest } from '../models';
export interface GetV1InventorySourcesRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}
export interface GetV1InventorySourcesSourceCodeRequest {
    sourceCode: string;
}
export interface PostV1InventorySourcesOperationRequest {
    postV1InventorySourcesRequest?: PostV1InventorySourcesRequest;
}
export interface PutV1InventorySourcesSourceCodeRequest {
    sourceCode: string;
    postV1InventorySourcesRequest?: PostV1InventorySourcesRequest;
}
/**
 *
 */
export declare class InventoryApiSourceRepositoryV1Api extends runtime.BaseAPI {
    /**
     * Find Sources by SearchCriteria SearchCriteria is not required because load all stocks is useful case
     */
    getV1InventorySourcesRaw(requestParameters: GetV1InventorySourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryApiDataSourceSearchResultsInterface>>;
    /**
     * Find Sources by SearchCriteria SearchCriteria is not required because load all stocks is useful case
     */
    getV1InventorySources(requestParameters?: GetV1InventorySourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryApiDataSourceSearchResultsInterface>;
    /**
     * Get Source data by given code. If you want to create plugin on get method, also you need to create separate plugin on getList method, because entity loading way is different for these methods
     */
    getV1InventorySourcesSourceCodeRaw(requestParameters: GetV1InventorySourcesSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryApiDataSourceInterface>>;
    /**
     * Get Source data by given code. If you want to create plugin on get method, also you need to create separate plugin on getList method, because entity loading way is different for these methods
     */
    getV1InventorySourcesSourceCode(requestParameters: GetV1InventorySourcesSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryApiDataSourceInterface>;
    /**
     * Save Source data
     */
    postV1InventorySourcesRaw(requestParameters: PostV1InventorySourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorResponse>>;
    /**
     * Save Source data
     */
    postV1InventorySources(requestParameters?: PostV1InventorySourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorResponse>;
    /**
     * Save Source data
     */
    putV1InventorySourcesSourceCodeRaw(requestParameters: PutV1InventorySourcesSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorResponse>>;
    /**
     * Save Source data
     */
    putV1InventorySourcesSourceCode(requestParameters: PutV1InventorySourcesSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorResponse>;
}
