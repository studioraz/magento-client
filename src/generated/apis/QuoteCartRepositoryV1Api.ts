/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PutV1CartsMineRequest,
  QuoteDataCartInterface,
  QuoteDataCartSearchResultsInterface,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1CartsMineRequestFromJSON,
    PutV1CartsMineRequestToJSON,
    QuoteDataCartInterfaceFromJSON,
    QuoteDataCartInterfaceToJSON,
    QuoteDataCartSearchResultsInterfaceFromJSON,
    QuoteDataCartSearchResultsInterfaceToJSON,
} from '../models';

export interface GetV1CartsCartIdRequest {
    cartId: number;
}

export interface GetV1CartsSearchRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface PutV1CartsMineOperationRequest {
    putV1CartsMineRequest?: PutV1CartsMineRequest;
}

/**
 * 
 */
export class QuoteCartRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Enables an administrative user to return information for a specified cart.
     */
    async getV1CartsCartIdRaw(requestParameters: GetV1CartsCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteDataCartInterface>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getV1CartsCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDataCartInterfaceFromJSON(jsonValue));
    }

    /**
     * Enables an administrative user to return information for a specified cart.
     */
    async getV1CartsCartId(requestParameters: GetV1CartsCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteDataCartInterface> {
        const response = await this.getV1CartsCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CartsSearchRaw(requestParameters: GetV1CartsSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteDataCartSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDataCartSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CartsSearch(requestParameters: GetV1CartsSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteDataCartSearchResultsInterface> {
        const response = await this.getV1CartsSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save quote
     */
    async putV1CartsMineRaw(requestParameters: PutV1CartsMineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CartsMineRequestToJSON(requestParameters.putV1CartsMineRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorResponseFromJSON(jsonValue));
    }

    /**
     * Save quote
     */
    async putV1CartsMine(requestParameters: PutV1CartsMineOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorResponse> {
        const response = await this.putV1CartsMineRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
