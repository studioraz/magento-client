/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckoutDataPaymentDetailsInterface,
  ErrorResponse,
  PostV1CartsMinePaymentinformationRequest,
} from '../models';
import {
    CheckoutDataPaymentDetailsInterfaceFromJSON,
    CheckoutDataPaymentDetailsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1CartsMinePaymentinformationRequestFromJSON,
    PostV1CartsMinePaymentinformationRequestToJSON,
} from '../models';

export interface PostV1CartsMinePaymentinformationOperationRequest {
    postV1CartsMinePaymentinformationRequest?: PostV1CartsMinePaymentinformationRequest;
}

export interface PostV1CartsMineSetpaymentinformationRequest {
    postV1CartsMinePaymentinformationRequest?: PostV1CartsMinePaymentinformationRequest;
}

/**
 * 
 */
export class CheckoutPaymentInformationManagementV1Api extends runtime.BaseAPI {

    /**
     * Get payment information
     */
    async getV1CartsMinePaymentinformationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutDataPaymentDetailsInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/payment-information`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutDataPaymentDetailsInterfaceFromJSON(jsonValue));
    }

    /**
     * Get payment information
     */
    async getV1CartsMinePaymentinformation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutDataPaymentDetailsInterface> {
        const response = await this.getV1CartsMinePaymentinformationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set payment information and place order for a specified cart.
     */
    async postV1CartsMinePaymentinformationRaw(requestParameters: PostV1CartsMinePaymentinformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/payment-information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CartsMinePaymentinformationRequestToJSON(requestParameters.postV1CartsMinePaymentinformationRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set payment information and place order for a specified cart.
     */
    async postV1CartsMinePaymentinformation(requestParameters: PostV1CartsMinePaymentinformationOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1CartsMinePaymentinformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set payment information for a specified cart.
     */
    async postV1CartsMineSetpaymentinformationRaw(requestParameters: PostV1CartsMineSetpaymentinformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/set-payment-information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CartsMinePaymentinformationRequestToJSON(requestParameters.postV1CartsMinePaymentinformationRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set payment information for a specified cart.
     */
    async postV1CartsMineSetpaymentinformation(requestParameters: PostV1CartsMineSetpaymentinformationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1CartsMineSetpaymentinformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
