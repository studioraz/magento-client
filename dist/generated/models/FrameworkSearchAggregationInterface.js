"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameworkSearchAggregationInterfaceToJSON = exports.FrameworkSearchAggregationInterfaceFromJSONTyped = exports.FrameworkSearchAggregationInterfaceFromJSON = exports.instanceOfFrameworkSearchAggregationInterface = void 0;
var FrameworkSearchBucketInterface_1 = require("./FrameworkSearchBucketInterface");
/**
 * Check if a given object implements the FrameworkSearchAggregationInterface interface.
 */
function instanceOfFrameworkSearchAggregationInterface(value) {
    var isInstance = true;
    isInstance = isInstance && "buckets" in value;
    isInstance = isInstance && "bucketNames" in value;
    return isInstance;
}
exports.instanceOfFrameworkSearchAggregationInterface = instanceOfFrameworkSearchAggregationInterface;
function FrameworkSearchAggregationInterfaceFromJSON(json) {
    return FrameworkSearchAggregationInterfaceFromJSONTyped(json, false);
}
exports.FrameworkSearchAggregationInterfaceFromJSON = FrameworkSearchAggregationInterfaceFromJSON;
function FrameworkSearchAggregationInterfaceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'buckets': (json['buckets'].map(FrameworkSearchBucketInterface_1.FrameworkSearchBucketInterfaceFromJSON)),
        'bucketNames': json['bucket_names'],
    };
}
exports.FrameworkSearchAggregationInterfaceFromJSONTyped = FrameworkSearchAggregationInterfaceFromJSONTyped;
function FrameworkSearchAggregationInterfaceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'buckets': (value.buckets.map(FrameworkSearchBucketInterface_1.FrameworkSearchBucketInterfaceToJSON)),
        'bucket_names': value.bucketNames,
    };
}
exports.FrameworkSearchAggregationInterfaceToJSON = FrameworkSearchAggregationInterfaceToJSON;
//# sourceMappingURL=FrameworkSearchAggregationInterface.js.map