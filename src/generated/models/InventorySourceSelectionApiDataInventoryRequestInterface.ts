/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventorySourceSelectionApiDataInventoryRequestExtensionInterface } from './InventorySourceSelectionApiDataInventoryRequestExtensionInterface';
import {
    InventorySourceSelectionApiDataInventoryRequestExtensionInterfaceFromJSON,
    InventorySourceSelectionApiDataInventoryRequestExtensionInterfaceFromJSONTyped,
    InventorySourceSelectionApiDataInventoryRequestExtensionInterfaceToJSON,
} from './InventorySourceSelectionApiDataInventoryRequestExtensionInterface';
import type { InventorySourceSelectionApiDataItemRequestInterface } from './InventorySourceSelectionApiDataItemRequestInterface';
import {
    InventorySourceSelectionApiDataItemRequestInterfaceFromJSON,
    InventorySourceSelectionApiDataItemRequestInterfaceFromJSONTyped,
    InventorySourceSelectionApiDataItemRequestInterfaceToJSON,
} from './InventorySourceSelectionApiDataItemRequestInterface';

/**
 * Request products in a given Qty and StockId
 * @export
 * @interface InventorySourceSelectionApiDataInventoryRequestInterface
 */
export interface InventorySourceSelectionApiDataInventoryRequestInterface {
    /**
     * Stock Id
     * @type {number}
     * @memberof InventorySourceSelectionApiDataInventoryRequestInterface
     */
    stockId: number;
    /**
     * Items
     * @type {Array<InventorySourceSelectionApiDataItemRequestInterface>}
     * @memberof InventorySourceSelectionApiDataInventoryRequestInterface
     */
    items: Array<InventorySourceSelectionApiDataItemRequestInterface>;
    /**
     * 
     * @type {InventorySourceSelectionApiDataInventoryRequestExtensionInterface}
     * @memberof InventorySourceSelectionApiDataInventoryRequestInterface
     */
    extensionAttributes?: InventorySourceSelectionApiDataInventoryRequestExtensionInterface;
}

/**
 * Check if a given object implements the InventorySourceSelectionApiDataInventoryRequestInterface interface.
 */
export function instanceOfInventorySourceSelectionApiDataInventoryRequestInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "stockId" in value;
    isInstance = isInstance && "items" in value;

    return isInstance;
}

export function InventorySourceSelectionApiDataInventoryRequestInterfaceFromJSON(json: any): InventorySourceSelectionApiDataInventoryRequestInterface {
    return InventorySourceSelectionApiDataInventoryRequestInterfaceFromJSONTyped(json, false);
}

export function InventorySourceSelectionApiDataInventoryRequestInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventorySourceSelectionApiDataInventoryRequestInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stockId': json['stock_id'],
        'items': ((json['items'] as Array<any>).map(InventorySourceSelectionApiDataItemRequestInterfaceFromJSON)),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : InventorySourceSelectionApiDataInventoryRequestExtensionInterfaceFromJSON(json['extension_attributes']),
    };
}

export function InventorySourceSelectionApiDataInventoryRequestInterfaceToJSON(value?: InventorySourceSelectionApiDataInventoryRequestInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stock_id': value.stockId,
        'items': ((value.items as Array<any>).map(InventorySourceSelectionApiDataItemRequestInterfaceToJSON)),
        'extension_attributes': InventorySourceSelectionApiDataInventoryRequestExtensionInterfaceToJSON(value.extensionAttributes),
    };
}

