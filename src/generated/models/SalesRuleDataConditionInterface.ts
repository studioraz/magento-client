/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Interface ConditionInterface
 * @export
 * @interface SalesRuleDataConditionInterface
 */
export interface SalesRuleDataConditionInterface {
    /**
     * Condition type
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    conditionType: string;
    /**
     * List of conditions
     * @type {Array<SalesRuleDataConditionInterface>}
     * @memberof SalesRuleDataConditionInterface
     */
    conditions?: Array<SalesRuleDataConditionInterface>;
    /**
     * The aggregator type
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    aggregatorType?: string;
    /**
     * The operator of the condition
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    operator: string;
    /**
     * The attribute name of the condition
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    attributeName?: string;
    /**
     * The value of the condition
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    value: string;
    /**
     * ExtensionInterface class for @see \Magento\SalesRule\Api\Data\ConditionInterface
     * @type {object}
     * @memberof SalesRuleDataConditionInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the SalesRuleDataConditionInterface interface.
 */
export function instanceOfSalesRuleDataConditionInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "conditionType" in value;
    isInstance = isInstance && "operator" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function SalesRuleDataConditionInterfaceFromJSON(json: any): SalesRuleDataConditionInterface {
    return SalesRuleDataConditionInterfaceFromJSONTyped(json, false);
}

export function SalesRuleDataConditionInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesRuleDataConditionInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditionType': json['condition_type'],
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(SalesRuleDataConditionInterfaceFromJSON)),
        'aggregatorType': !exists(json, 'aggregator_type') ? undefined : json['aggregator_type'],
        'operator': json['operator'],
        'attributeName': !exists(json, 'attribute_name') ? undefined : json['attribute_name'],
        'value': json['value'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function SalesRuleDataConditionInterfaceToJSON(value?: SalesRuleDataConditionInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'condition_type': value.conditionType,
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(SalesRuleDataConditionInterfaceToJSON)),
        'aggregator_type': value.aggregatorType,
        'operator': value.operator,
        'attribute_name': value.attributeName,
        'value': value.value,
        'extension_attributes': value.extensionAttributes,
    };
}

