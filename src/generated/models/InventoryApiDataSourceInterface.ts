/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventoryApiDataSourceCarrierLinkInterface } from './InventoryApiDataSourceCarrierLinkInterface';
import {
    InventoryApiDataSourceCarrierLinkInterfaceFromJSON,
    InventoryApiDataSourceCarrierLinkInterfaceFromJSONTyped,
    InventoryApiDataSourceCarrierLinkInterfaceToJSON,
} from './InventoryApiDataSourceCarrierLinkInterface';
import type { InventoryApiDataSourceExtensionInterface } from './InventoryApiDataSourceExtensionInterface';
import {
    InventoryApiDataSourceExtensionInterfaceFromJSON,
    InventoryApiDataSourceExtensionInterfaceFromJSONTyped,
    InventoryApiDataSourceExtensionInterfaceToJSON,
} from './InventoryApiDataSourceExtensionInterface';

/**
 * Represents physical storage, i.e. brick and mortar store or warehouse Used fully qualified namespaces in annotations for proper work of WebApi request parser
 * @export
 * @interface InventoryApiDataSourceInterface
 */
export interface InventoryApiDataSourceInterface {
    /**
     * Source code
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    sourceCode?: string;
    /**
     * Source name
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    name?: string;
    /**
     * Source email
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    email?: string;
    /**
     * Source contact name
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    contactName?: string;
    /**
     * If source is enabled. For new entity can be null
     * @type {boolean}
     * @memberof InventoryApiDataSourceInterface
     */
    enabled?: boolean;
    /**
     * Source description
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    description?: string;
    /**
     * Source latitude
     * @type {number}
     * @memberof InventoryApiDataSourceInterface
     */
    latitude?: number;
    /**
     * Source longitude
     * @type {number}
     * @memberof InventoryApiDataSourceInterface
     */
    longitude?: number;
    /**
     * Source country id
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    countryId?: string;
    /**
     * Region id if source has registered region.
     * @type {number}
     * @memberof InventoryApiDataSourceInterface
     */
    regionId?: number;
    /**
     * Region title if source has custom region
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    region?: string;
    /**
     * Source city
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    city?: string;
    /**
     * Source street name
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    street?: string;
    /**
     * Source post code
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    postcode?: string;
    /**
     * Source phone number
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    phone?: string;
    /**
     * Source fax
     * @type {string}
     * @memberof InventoryApiDataSourceInterface
     */
    fax?: string;
    /**
     * Is need to use default config
     * @type {boolean}
     * @memberof InventoryApiDataSourceInterface
     */
    useDefaultCarrierConfig?: boolean;
    /**
     * 
     * @type {Array<InventoryApiDataSourceCarrierLinkInterface>}
     * @memberof InventoryApiDataSourceInterface
     */
    carrierLinks?: Array<InventoryApiDataSourceCarrierLinkInterface>;
    /**
     * 
     * @type {InventoryApiDataSourceExtensionInterface}
     * @memberof InventoryApiDataSourceInterface
     */
    extensionAttributes?: InventoryApiDataSourceExtensionInterface;
}

/**
 * Check if a given object implements the InventoryApiDataSourceInterface interface.
 */
export function instanceOfInventoryApiDataSourceInterface(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventoryApiDataSourceInterfaceFromJSON(json: any): InventoryApiDataSourceInterface {
    return InventoryApiDataSourceInterfaceFromJSONTyped(json, false);
}

export function InventoryApiDataSourceInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryApiDataSourceInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceCode': !exists(json, 'source_code') ? undefined : json['source_code'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'contactName': !exists(json, 'contact_name') ? undefined : json['contact_name'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
        'countryId': !exists(json, 'country_id') ? undefined : json['country_id'],
        'regionId': !exists(json, 'region_id') ? undefined : json['region_id'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'postcode': !exists(json, 'postcode') ? undefined : json['postcode'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'fax': !exists(json, 'fax') ? undefined : json['fax'],
        'useDefaultCarrierConfig': !exists(json, 'use_default_carrier_config') ? undefined : json['use_default_carrier_config'],
        'carrierLinks': !exists(json, 'carrier_links') ? undefined : ((json['carrier_links'] as Array<any>).map(InventoryApiDataSourceCarrierLinkInterfaceFromJSON)),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : InventoryApiDataSourceExtensionInterfaceFromJSON(json['extension_attributes']),
    };
}

export function InventoryApiDataSourceInterfaceToJSON(value?: InventoryApiDataSourceInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'source_code': value.sourceCode,
        'name': value.name,
        'email': value.email,
        'contact_name': value.contactName,
        'enabled': value.enabled,
        'description': value.description,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'country_id': value.countryId,
        'region_id': value.regionId,
        'region': value.region,
        'city': value.city,
        'street': value.street,
        'postcode': value.postcode,
        'phone': value.phone,
        'fax': value.fax,
        'use_default_carrier_config': value.useDefaultCarrierConfig,
        'carrier_links': value.carrierLinks === undefined ? undefined : ((value.carrierLinks as Array<any>).map(InventoryApiDataSourceCarrierLinkInterfaceToJSON)),
        'extension_attributes': InventoryApiDataSourceExtensionInterfaceToJSON(value.extensionAttributes),
    };
}

