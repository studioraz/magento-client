/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerDataAttributeMetadataInterface,
  ErrorResponse,
} from '../models';
import {
    CustomerDataAttributeMetadataInterfaceFromJSON,
    CustomerDataAttributeMetadataInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface GetV1AttributeMetadataCustomerAttributeAttributeCodeRequest {
    attributeCode: string;
}

export interface GetV1AttributeMetadataCustomerCustomRequest {
    dataInterfaceName?: string;
}

export interface GetV1AttributeMetadataCustomerFormFormCodeRequest {
    formCode: string;
}

/**
 * 
 */
export class CustomerCustomerMetadataV1Api extends runtime.BaseAPI {

    /**
     * Get all attribute metadata.
     */
    async getV1AttributeMetadataCustomerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomerDataAttributeMetadataInterface>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/attributeMetadata/customer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerDataAttributeMetadataInterfaceFromJSON));
    }

    /**
     * Get all attribute metadata.
     */
    async getV1AttributeMetadataCustomer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomerDataAttributeMetadataInterface>> {
        const response = await this.getV1AttributeMetadataCustomerRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve attribute metadata.
     */
    async getV1AttributeMetadataCustomerAttributeAttributeCodeRaw(requestParameters: GetV1AttributeMetadataCustomerAttributeAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataAttributeMetadataInterface>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling getV1AttributeMetadataCustomerAttributeAttributeCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/attributeMetadata/customer/attribute/{attributeCode}`.replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataAttributeMetadataInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve attribute metadata.
     */
    async getV1AttributeMetadataCustomerAttributeAttributeCode(requestParameters: GetV1AttributeMetadataCustomerAttributeAttributeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataAttributeMetadataInterface> {
        const response = await this.getV1AttributeMetadataCustomerAttributeAttributeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get custom attributes metadata for the given data interface.
     */
    async getV1AttributeMetadataCustomerCustomRaw(requestParameters: GetV1AttributeMetadataCustomerCustomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomerDataAttributeMetadataInterface>>> {
        const queryParameters: any = {};

        if (requestParameters.dataInterfaceName !== undefined) {
            queryParameters['dataInterfaceName'] = requestParameters.dataInterfaceName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/attributeMetadata/customer/custom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerDataAttributeMetadataInterfaceFromJSON));
    }

    /**
     * Get custom attributes metadata for the given data interface.
     */
    async getV1AttributeMetadataCustomerCustom(requestParameters: GetV1AttributeMetadataCustomerCustomRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomerDataAttributeMetadataInterface>> {
        const response = await this.getV1AttributeMetadataCustomerCustomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all attributes filtered by form code
     */
    async getV1AttributeMetadataCustomerFormFormCodeRaw(requestParameters: GetV1AttributeMetadataCustomerFormFormCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomerDataAttributeMetadataInterface>>> {
        if (requestParameters.formCode === null || requestParameters.formCode === undefined) {
            throw new runtime.RequiredError('formCode','Required parameter requestParameters.formCode was null or undefined when calling getV1AttributeMetadataCustomerFormFormCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/attributeMetadata/customer/form/{formCode}`.replace(`{${"formCode"}}`, encodeURIComponent(String(requestParameters.formCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerDataAttributeMetadataInterfaceFromJSON));
    }

    /**
     * Retrieve all attributes filtered by form code
     */
    async getV1AttributeMetadataCustomerFormFormCode(requestParameters: GetV1AttributeMetadataCustomerFormFormCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomerDataAttributeMetadataInterface>> {
        const response = await this.getV1AttributeMetadataCustomerFormFormCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
