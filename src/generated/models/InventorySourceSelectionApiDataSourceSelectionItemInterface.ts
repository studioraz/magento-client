/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents source selection result for the specific source and SKU
 * @export
 * @interface InventorySourceSelectionApiDataSourceSelectionItemInterface
 */
export interface InventorySourceSelectionApiDataSourceSelectionItemInterface {
    /**
     * Source code
     * @type {string}
     * @memberof InventorySourceSelectionApiDataSourceSelectionItemInterface
     */
    sourceCode: string;
    /**
     * Item SKU
     * @type {string}
     * @memberof InventorySourceSelectionApiDataSourceSelectionItemInterface
     */
    sku: string;
    /**
     * Quantity which will be deducted for this source
     * @type {number}
     * @memberof InventorySourceSelectionApiDataSourceSelectionItemInterface
     */
    qtyToDeduct: number;
    /**
     * Available quantity for this source
     * @type {number}
     * @memberof InventorySourceSelectionApiDataSourceSelectionItemInterface
     */
    qtyAvailable: number;
    /**
     * ExtensionInterface class for @see \Magento\InventorySourceSelectionApi\Api\Data\SourceSelectionItemInterface
     * @type {object}
     * @memberof InventorySourceSelectionApiDataSourceSelectionItemInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the InventorySourceSelectionApiDataSourceSelectionItemInterface interface.
 */
export function instanceOfInventorySourceSelectionApiDataSourceSelectionItemInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sourceCode" in value;
    isInstance = isInstance && "sku" in value;
    isInstance = isInstance && "qtyToDeduct" in value;
    isInstance = isInstance && "qtyAvailable" in value;

    return isInstance;
}

export function InventorySourceSelectionApiDataSourceSelectionItemInterfaceFromJSON(json: any): InventorySourceSelectionApiDataSourceSelectionItemInterface {
    return InventorySourceSelectionApiDataSourceSelectionItemInterfaceFromJSONTyped(json, false);
}

export function InventorySourceSelectionApiDataSourceSelectionItemInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventorySourceSelectionApiDataSourceSelectionItemInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceCode': json['source_code'],
        'sku': json['sku'],
        'qtyToDeduct': json['qty_to_deduct'],
        'qtyAvailable': json['qty_available'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function InventorySourceSelectionApiDataSourceSelectionItemInterfaceToJSON(value?: InventorySourceSelectionApiDataSourceSelectionItemInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'source_code': value.sourceCode,
        'sku': value.sku,
        'qty_to_deduct': value.qtyToDeduct,
        'qty_available': value.qtyAvailable,
        'extension_attributes': value.extensionAttributes,
    };
}

