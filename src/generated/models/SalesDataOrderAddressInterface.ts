/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Order address interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderAddressInterface
 */
export interface SalesDataOrderAddressInterface {
    /**
     * Address type.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    addressType: string;
    /**
     * City.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    city: string;
    /**
     * Company.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    company?: string;
    /**
     * Country ID.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    countryId: string;
    /**
     * Country address ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    customerAddressId?: number;
    /**
     * Customer ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    customerId?: number;
    /**
     * Email address.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    email?: string;
    /**
     * Order address ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    entityId?: number;
    /**
     * Fax number.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    fax?: string;
    /**
     * First name.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    firstname: string;
    /**
     * Last name.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    lastname: string;
    /**
     * Middle name.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    middlename?: string;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    parentId?: number;
    /**
     * Postal code.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    postcode: string;
    /**
     * Prefix.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    prefix?: string;
    /**
     * Region.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    region?: string;
    /**
     * Region code.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    regionCode?: string;
    /**
     * Region ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    regionId?: number;
    /**
     * Array of any street values. Otherwise, null.
     * @type {Array<string>}
     * @memberof SalesDataOrderAddressInterface
     */
    street?: Array<string>;
    /**
     * Suffix.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    suffix?: string;
    /**
     * Telephone number.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    telephone: string;
    /**
     * VAT ID.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    vatId?: string;
    /**
     * VAT-is-valid flag value.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    vatIsValid?: number;
    /**
     * VAT request date.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    vatRequestDate?: string;
    /**
     * VAT request ID.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    vatRequestId?: string;
    /**
     * VAT-request-success flag value.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    vatRequestSuccess?: number;
    /**
     * ExtensionInterface class for @see \Magento\Sales\Api\Data\OrderAddressInterface
     * @type {object}
     * @memberof SalesDataOrderAddressInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the SalesDataOrderAddressInterface interface.
 */
export function instanceOfSalesDataOrderAddressInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "addressType" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "countryId" in value;
    isInstance = isInstance && "firstname" in value;
    isInstance = isInstance && "lastname" in value;
    isInstance = isInstance && "postcode" in value;
    isInstance = isInstance && "telephone" in value;

    return isInstance;
}

export function SalesDataOrderAddressInterfaceFromJSON(json: any): SalesDataOrderAddressInterface {
    return SalesDataOrderAddressInterfaceFromJSONTyped(json, false);
}

export function SalesDataOrderAddressInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesDataOrderAddressInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addressType': json['address_type'],
        'city': json['city'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'countryId': json['country_id'],
        'customerAddressId': !exists(json, 'customer_address_id') ? undefined : json['customer_address_id'],
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'entityId': !exists(json, 'entity_id') ? undefined : json['entity_id'],
        'fax': !exists(json, 'fax') ? undefined : json['fax'],
        'firstname': json['firstname'],
        'lastname': json['lastname'],
        'middlename': !exists(json, 'middlename') ? undefined : json['middlename'],
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'postcode': json['postcode'],
        'prefix': !exists(json, 'prefix') ? undefined : json['prefix'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'regionCode': !exists(json, 'region_code') ? undefined : json['region_code'],
        'regionId': !exists(json, 'region_id') ? undefined : json['region_id'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'suffix': !exists(json, 'suffix') ? undefined : json['suffix'],
        'telephone': json['telephone'],
        'vatId': !exists(json, 'vat_id') ? undefined : json['vat_id'],
        'vatIsValid': !exists(json, 'vat_is_valid') ? undefined : json['vat_is_valid'],
        'vatRequestDate': !exists(json, 'vat_request_date') ? undefined : json['vat_request_date'],
        'vatRequestId': !exists(json, 'vat_request_id') ? undefined : json['vat_request_id'],
        'vatRequestSuccess': !exists(json, 'vat_request_success') ? undefined : json['vat_request_success'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function SalesDataOrderAddressInterfaceToJSON(value?: SalesDataOrderAddressInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address_type': value.addressType,
        'city': value.city,
        'company': value.company,
        'country_id': value.countryId,
        'customer_address_id': value.customerAddressId,
        'customer_id': value.customerId,
        'email': value.email,
        'entity_id': value.entityId,
        'fax': value.fax,
        'firstname': value.firstname,
        'lastname': value.lastname,
        'middlename': value.middlename,
        'parent_id': value.parentId,
        'postcode': value.postcode,
        'prefix': value.prefix,
        'region': value.region,
        'region_code': value.regionCode,
        'region_id': value.regionId,
        'street': value.street,
        'suffix': value.suffix,
        'telephone': value.telephone,
        'vat_id': value.vatId,
        'vat_is_valid': value.vatIsValid,
        'vat_request_date': value.vatRequestDate,
        'vat_request_id': value.vatRequestId,
        'vat_request_success': value.vatRequestSuccess,
        'extension_attributes': value.extensionAttributes,
    };
}

