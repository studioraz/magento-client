/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FrameworkSortOrder } from './FrameworkSortOrder';
import {
    FrameworkSortOrderFromJSON,
    FrameworkSortOrderFromJSONTyped,
    FrameworkSortOrderToJSON,
} from './FrameworkSortOrder';
import type { InventoryInStorePickupApiDataSearchRequestAreaInterface } from './InventoryInStorePickupApiDataSearchRequestAreaInterface';
import {
    InventoryInStorePickupApiDataSearchRequestAreaInterfaceFromJSON,
    InventoryInStorePickupApiDataSearchRequestAreaInterfaceFromJSONTyped,
    InventoryInStorePickupApiDataSearchRequestAreaInterfaceToJSON,
} from './InventoryInStorePickupApiDataSearchRequestAreaInterface';
import type { InventoryInStorePickupApiDataSearchRequestExtensionInterface } from './InventoryInStorePickupApiDataSearchRequestExtensionInterface';
import {
    InventoryInStorePickupApiDataSearchRequestExtensionInterfaceFromJSON,
    InventoryInStorePickupApiDataSearchRequestExtensionInterfaceFromJSONTyped,
    InventoryInStorePickupApiDataSearchRequestExtensionInterfaceToJSON,
} from './InventoryInStorePickupApiDataSearchRequestExtensionInterface';
import type { InventoryInStorePickupApiDataSearchRequestFiltersInterface } from './InventoryInStorePickupApiDataSearchRequestFiltersInterface';
import {
    InventoryInStorePickupApiDataSearchRequestFiltersInterfaceFromJSON,
    InventoryInStorePickupApiDataSearchRequestFiltersInterfaceFromJSONTyped,
    InventoryInStorePickupApiDataSearchRequestFiltersInterfaceToJSON,
} from './InventoryInStorePickupApiDataSearchRequestFiltersInterface';

/**
 * Endpoint used to search Pickup Locations by different parameters: - by attribute filters fields @see \Magento\InventoryInStorePickupApi\Api\Data\SearchRequest\FiltersInterface - by distance to the address @see \Magento\InventoryInStorePickupApi\Api\Data\SearchRequest\AreaInterface Also, endpoint supports paging and sort orders.
 * @export
 * @interface InventoryInStorePickupApiDataSearchRequestInterface
 */
export interface InventoryInStorePickupApiDataSearchRequestInterface {
    /**
     * 
     * @type {InventoryInStorePickupApiDataSearchRequestAreaInterface}
     * @memberof InventoryInStorePickupApiDataSearchRequestInterface
     */
    area?: InventoryInStorePickupApiDataSearchRequestAreaInterface;
    /**
     * 
     * @type {InventoryInStorePickupApiDataSearchRequestFiltersInterface}
     * @memberof InventoryInStorePickupApiDataSearchRequestInterface
     */
    filters?: InventoryInStorePickupApiDataSearchRequestFiltersInterface;
    /**
     * Page size.
     * @type {number}
     * @memberof InventoryInStorePickupApiDataSearchRequestInterface
     */
    pageSize?: number;
    /**
     * Current page.
     * @type {number}
     * @memberof InventoryInStorePickupApiDataSearchRequestInterface
     */
    currentPage: number;
    /**
     * Sales Channel Type.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataSearchRequestInterface
     */
    scopeType: string;
    /**
     * Sales Channel code.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataSearchRequestInterface
     */
    scopeCode: string;
    /**
     * Sort Order.
     * @type {Array<FrameworkSortOrder>}
     * @memberof InventoryInStorePickupApiDataSearchRequestInterface
     */
    sort?: Array<FrameworkSortOrder>;
    /**
     * 
     * @type {InventoryInStorePickupApiDataSearchRequestExtensionInterface}
     * @memberof InventoryInStorePickupApiDataSearchRequestInterface
     */
    extensionAttributes?: InventoryInStorePickupApiDataSearchRequestExtensionInterface;
}

/**
 * Check if a given object implements the InventoryInStorePickupApiDataSearchRequestInterface interface.
 */
export function instanceOfInventoryInStorePickupApiDataSearchRequestInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "currentPage" in value;
    isInstance = isInstance && "scopeType" in value;
    isInstance = isInstance && "scopeCode" in value;

    return isInstance;
}

export function InventoryInStorePickupApiDataSearchRequestInterfaceFromJSON(json: any): InventoryInStorePickupApiDataSearchRequestInterface {
    return InventoryInStorePickupApiDataSearchRequestInterfaceFromJSONTyped(json, false);
}

export function InventoryInStorePickupApiDataSearchRequestInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryInStorePickupApiDataSearchRequestInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'area': !exists(json, 'area') ? undefined : InventoryInStorePickupApiDataSearchRequestAreaInterfaceFromJSON(json['area']),
        'filters': !exists(json, 'filters') ? undefined : InventoryInStorePickupApiDataSearchRequestFiltersInterfaceFromJSON(json['filters']),
        'pageSize': !exists(json, 'page_size') ? undefined : json['page_size'],
        'currentPage': json['current_page'],
        'scopeType': json['scope_type'],
        'scopeCode': json['scope_code'],
        'sort': !exists(json, 'sort') ? undefined : ((json['sort'] as Array<any>).map(FrameworkSortOrderFromJSON)),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : InventoryInStorePickupApiDataSearchRequestExtensionInterfaceFromJSON(json['extension_attributes']),
    };
}

export function InventoryInStorePickupApiDataSearchRequestInterfaceToJSON(value?: InventoryInStorePickupApiDataSearchRequestInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'area': InventoryInStorePickupApiDataSearchRequestAreaInterfaceToJSON(value.area),
        'filters': InventoryInStorePickupApiDataSearchRequestFiltersInterfaceToJSON(value.filters),
        'page_size': value.pageSize,
        'current_page': value.currentPage,
        'scope_type': value.scopeType,
        'scope_code': value.scopeCode,
        'sort': value.sort === undefined ? undefined : ((value.sort as Array<any>).map(FrameworkSortOrderToJSON)),
        'extension_attributes': InventoryInStorePickupApiDataSearchRequestExtensionInterfaceToJSON(value.extensionAttributes),
    };
}

