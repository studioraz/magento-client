/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DirectoryDataRegionInformationInterface } from './DirectoryDataRegionInformationInterface';
import {
    DirectoryDataRegionInformationInterfaceFromJSON,
    DirectoryDataRegionInformationInterfaceFromJSONTyped,
    DirectoryDataRegionInformationInterfaceToJSON,
} from './DirectoryDataRegionInformationInterface';

/**
 * Country Information interface.
 * @export
 * @interface DirectoryDataCountryInformationInterface
 */
export interface DirectoryDataCountryInformationInterface {
    /**
     * The country id for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    id: string;
    /**
     * The country 2 letter abbreviation for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    twoLetterAbbreviation: string;
    /**
     * The country 3 letter abbreviation for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    threeLetterAbbreviation: string;
    /**
     * The country full name (in store locale) for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    fullNameLocale: string;
    /**
     * The country full name (in English) for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    fullNameEnglish: string;
    /**
     * The available regions for the store.
     * @type {Array<DirectoryDataRegionInformationInterface>}
     * @memberof DirectoryDataCountryInformationInterface
     */
    availableRegions?: Array<DirectoryDataRegionInformationInterface>;
    /**
     * ExtensionInterface class for @see \Magento\Directory\Api\Data\CountryInformationInterface
     * @type {object}
     * @memberof DirectoryDataCountryInformationInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the DirectoryDataCountryInformationInterface interface.
 */
export function instanceOfDirectoryDataCountryInformationInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "twoLetterAbbreviation" in value;
    isInstance = isInstance && "threeLetterAbbreviation" in value;
    isInstance = isInstance && "fullNameLocale" in value;
    isInstance = isInstance && "fullNameEnglish" in value;

    return isInstance;
}

export function DirectoryDataCountryInformationInterfaceFromJSON(json: any): DirectoryDataCountryInformationInterface {
    return DirectoryDataCountryInformationInterfaceFromJSONTyped(json, false);
}

export function DirectoryDataCountryInformationInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): DirectoryDataCountryInformationInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'twoLetterAbbreviation': json['two_letter_abbreviation'],
        'threeLetterAbbreviation': json['three_letter_abbreviation'],
        'fullNameLocale': json['full_name_locale'],
        'fullNameEnglish': json['full_name_english'],
        'availableRegions': !exists(json, 'available_regions') ? undefined : ((json['available_regions'] as Array<any>).map(DirectoryDataRegionInformationInterfaceFromJSON)),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function DirectoryDataCountryInformationInterfaceToJSON(value?: DirectoryDataCountryInformationInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'two_letter_abbreviation': value.twoLetterAbbreviation,
        'three_letter_abbreviation': value.threeLetterAbbreviation,
        'full_name_locale': value.fullNameLocale,
        'full_name_english': value.fullNameEnglish,
        'available_regions': value.availableRegions === undefined ? undefined : ((value.availableRegions as Array<any>).map(DirectoryDataRegionInformationInterfaceToJSON)),
        'extension_attributes': value.extensionAttributes,
    };
}

