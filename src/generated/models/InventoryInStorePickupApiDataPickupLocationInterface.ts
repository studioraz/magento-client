/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents sources projection on In-Store Pickup context. Realisation must follow immutable DTO concept. Partial immutability done according to restriction of current Extension Attributes implementation.
 * @export
 * @interface InventoryInStorePickupApiDataPickupLocationInterface
 */
export interface InventoryInStorePickupApiDataPickupLocationInterface {
    /**
     * Source code of Pickup Location.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    pickupLocationCode: string;
    /**
     * Pickup Location name.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    name?: string;
    /**
     * Pickup Location contact email.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    email?: string;
    /**
     * Fax contact info.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    fax?: string;
    /**
     * Pickup Location contact name.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    contactName?: string;
    /**
     * Pickup Location description.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    description?: string;
    /**
     * Pickup Location latitude.
     * @type {number}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    latitude?: number;
    /**
     * Pickup Location longitude.
     * @type {number}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    longitude?: number;
    /**
     * Pickup Location country ID.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    countryId?: string;
    /**
     * Pickup Location region ID.
     * @type {number}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    regionId?: number;
    /**
     * Pickup Location region.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    region?: string;
    /**
     * Pickup Location city.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    city?: string;
    /**
     * Pickup Location street.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    street?: string;
    /**
     * Pickup Location postcode.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    postcode?: string;
    /**
     * Pickup Location phone.
     * @type {string}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    phone?: string;
    /**
     * ExtensionInterface class for @see \Magento\InventoryInStorePickupApi\Api\Data\PickupLocationInterface
     * @type {object}
     * @memberof InventoryInStorePickupApiDataPickupLocationInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the InventoryInStorePickupApiDataPickupLocationInterface interface.
 */
export function instanceOfInventoryInStorePickupApiDataPickupLocationInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pickupLocationCode" in value;

    return isInstance;
}

export function InventoryInStorePickupApiDataPickupLocationInterfaceFromJSON(json: any): InventoryInStorePickupApiDataPickupLocationInterface {
    return InventoryInStorePickupApiDataPickupLocationInterfaceFromJSONTyped(json, false);
}

export function InventoryInStorePickupApiDataPickupLocationInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryInStorePickupApiDataPickupLocationInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pickupLocationCode': json['pickup_location_code'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'fax': !exists(json, 'fax') ? undefined : json['fax'],
        'contactName': !exists(json, 'contact_name') ? undefined : json['contact_name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
        'countryId': !exists(json, 'country_id') ? undefined : json['country_id'],
        'regionId': !exists(json, 'region_id') ? undefined : json['region_id'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'postcode': !exists(json, 'postcode') ? undefined : json['postcode'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function InventoryInStorePickupApiDataPickupLocationInterfaceToJSON(value?: InventoryInStorePickupApiDataPickupLocationInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pickup_location_code': value.pickupLocationCode,
        'name': value.name,
        'email': value.email,
        'fax': value.fax,
        'contact_name': value.contactName,
        'description': value.description,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'country_id': value.countryId,
        'region_id': value.regionId,
        'region': value.region,
        'city': value.city,
        'street': value.street,
        'postcode': value.postcode,
        'phone': value.phone,
        'extension_attributes': value.extensionAttributes,
    };
}

