/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PostV1CreditmemoRefundRequest,
  SalesDataCreditmemoCommentSearchResultInterface,
  SalesDataCreditmemoInterface,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1CreditmemoRefundRequestFromJSON,
    PostV1CreditmemoRefundRequestToJSON,
    SalesDataCreditmemoCommentSearchResultInterfaceFromJSON,
    SalesDataCreditmemoCommentSearchResultInterfaceToJSON,
    SalesDataCreditmemoInterfaceFromJSON,
    SalesDataCreditmemoInterfaceToJSON,
} from '../models';

export interface GetV1CreditmemoIdCommentsRequest {
    id: number;
}

export interface PostV1CreditmemoIdEmailsRequest {
    id: number;
}

export interface PostV1CreditmemoRefundOperationRequest {
    postV1CreditmemoRefundRequest?: PostV1CreditmemoRefundRequest;
}

export interface PutV1CreditmemoIdRequest {
    id: number;
}

/**
 * 
 */
export class SalesCreditmemoManagementV1Api extends runtime.BaseAPI {

    /**
     * Lists comments for a specified credit memo.
     */
    async getV1CreditmemoIdCommentsRaw(requestParameters: GetV1CreditmemoIdCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesDataCreditmemoCommentSearchResultInterface>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getV1CreditmemoIdComments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/creditmemo/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesDataCreditmemoCommentSearchResultInterfaceFromJSON(jsonValue));
    }

    /**
     * Lists comments for a specified credit memo.
     */
    async getV1CreditmemoIdComments(requestParameters: GetV1CreditmemoIdCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesDataCreditmemoCommentSearchResultInterface> {
        const response = await this.getV1CreditmemoIdCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Emails a user a specified credit memo.
     */
    async postV1CreditmemoIdEmailsRaw(requestParameters: PostV1CreditmemoIdEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1CreditmemoIdEmails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/creditmemo/{id}/emails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Emails a user a specified credit memo.
     */
    async postV1CreditmemoIdEmails(requestParameters: PostV1CreditmemoIdEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1CreditmemoIdEmailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prepare creditmemo to refund and save it.
     */
    async postV1CreditmemoRefundRaw(requestParameters: PostV1CreditmemoRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesDataCreditmemoInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/creditmemo/refund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CreditmemoRefundRequestToJSON(requestParameters.postV1CreditmemoRefundRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesDataCreditmemoInterfaceFromJSON(jsonValue));
    }

    /**
     * Prepare creditmemo to refund and save it.
     */
    async postV1CreditmemoRefund(requestParameters: PostV1CreditmemoRefundOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesDataCreditmemoInterface> {
        const response = await this.postV1CreditmemoRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancels a specified credit memo.
     */
    async putV1CreditmemoIdRaw(requestParameters: PutV1CreditmemoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putV1CreditmemoId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/creditmemo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Cancels a specified credit memo.
     */
    async putV1CreditmemoId(requestParameters: PutV1CreditmemoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.putV1CreditmemoIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
