/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface DeleteV1GuestcartsCartIdCouponsRequest {
    cartId: string;
}

export interface GetV1GuestcartsCartIdCouponsRequest {
    cartId: string;
}

export interface PutV1GuestcartsCartIdCouponsCouponCodeRequest {
    cartId: string;
    couponCode: string;
}

/**
 * 
 */
export class QuoteGuestCouponManagementV1Api extends runtime.BaseAPI {

    /**
     * Delete a coupon from a specified cart.
     */
    async deleteV1GuestcartsCartIdCouponsRaw(requestParameters: DeleteV1GuestcartsCartIdCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling deleteV1GuestcartsCartIdCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts/{cartId}/coupons`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a coupon from a specified cart.
     */
    async deleteV1GuestcartsCartIdCoupons(requestParameters: DeleteV1GuestcartsCartIdCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1GuestcartsCartIdCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information for a coupon in a specified cart.
     */
    async getV1GuestcartsCartIdCouponsRaw(requestParameters: GetV1GuestcartsCartIdCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getV1GuestcartsCartIdCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts/{cartId}/coupons`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Return information for a coupon in a specified cart.
     */
    async getV1GuestcartsCartIdCoupons(requestParameters: GetV1GuestcartsCartIdCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getV1GuestcartsCartIdCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a coupon by code to a specified cart.
     */
    async putV1GuestcartsCartIdCouponsCouponCodeRaw(requestParameters: PutV1GuestcartsCartIdCouponsCouponCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling putV1GuestcartsCartIdCouponsCouponCode.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling putV1GuestcartsCartIdCouponsCouponCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts/{cartId}/coupons/{couponCode}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add a coupon by code to a specified cart.
     */
    async putV1GuestcartsCartIdCouponsCouponCode(requestParameters: PutV1GuestcartsCartIdCouponsCouponCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.putV1GuestcartsCartIdCouponsCouponCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
