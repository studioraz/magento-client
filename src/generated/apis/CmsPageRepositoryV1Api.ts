/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CmsDataPageInterface,
  CmsDataPageSearchResultsInterface,
  ErrorResponse,
  PostV1CmsPageRequest,
} from '../models';
import {
    CmsDataPageInterfaceFromJSON,
    CmsDataPageInterfaceToJSON,
    CmsDataPageSearchResultsInterfaceFromJSON,
    CmsDataPageSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1CmsPageRequestFromJSON,
    PostV1CmsPageRequestToJSON,
} from '../models';

export interface DeleteV1CmsPagePageIdRequest {
    pageId: number;
}

export interface GetV1CmsPagePageIdRequest {
    pageId: number;
}

export interface GetV1CmsPageSearchRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface PostV1CmsPageOperationRequest {
    postV1CmsPageRequest?: PostV1CmsPageRequest;
}

export interface PutV1CmsPageIdRequest {
    id: string;
    postV1CmsPageRequest?: PostV1CmsPageRequest;
}

/**
 * 
 */
export class CmsPageRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Delete page by ID.
     */
    async deleteV1CmsPagePageIdRaw(requestParameters: DeleteV1CmsPagePageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.pageId === null || requestParameters.pageId === undefined) {
            throw new runtime.RequiredError('pageId','Required parameter requestParameters.pageId was null or undefined when calling deleteV1CmsPagePageId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsPage/{pageId}`.replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters.pageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete page by ID.
     */
    async deleteV1CmsPagePageId(requestParameters: DeleteV1CmsPagePageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1CmsPagePageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve page.
     */
    async getV1CmsPagePageIdRaw(requestParameters: GetV1CmsPagePageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmsDataPageInterface>> {
        if (requestParameters.pageId === null || requestParameters.pageId === undefined) {
            throw new runtime.RequiredError('pageId','Required parameter requestParameters.pageId was null or undefined when calling getV1CmsPagePageId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsPage/{pageId}`.replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters.pageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CmsDataPageInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve page.
     */
    async getV1CmsPagePageId(requestParameters: GetV1CmsPagePageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmsDataPageInterface> {
        const response = await this.getV1CmsPagePageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve pages matching the specified criteria.
     */
    async getV1CmsPageSearchRaw(requestParameters: GetV1CmsPageSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmsDataPageSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsPage/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CmsDataPageSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve pages matching the specified criteria.
     */
    async getV1CmsPageSearch(requestParameters: GetV1CmsPageSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmsDataPageSearchResultsInterface> {
        const response = await this.getV1CmsPageSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save page.
     */
    async postV1CmsPageRaw(requestParameters: PostV1CmsPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmsDataPageInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsPage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CmsPageRequestToJSON(requestParameters.postV1CmsPageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CmsDataPageInterfaceFromJSON(jsonValue));
    }

    /**
     * Save page.
     */
    async postV1CmsPage(requestParameters: PostV1CmsPageOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmsDataPageInterface> {
        const response = await this.postV1CmsPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save page.
     */
    async putV1CmsPageIdRaw(requestParameters: PutV1CmsPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmsDataPageInterface>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putV1CmsPageId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/cmsPage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CmsPageRequestToJSON(requestParameters.postV1CmsPageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CmsDataPageInterfaceFromJSON(jsonValue));
    }

    /**
     * Save page.
     */
    async putV1CmsPageId(requestParameters: PutV1CmsPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmsDataPageInterface> {
        const response = await this.putV1CmsPageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
