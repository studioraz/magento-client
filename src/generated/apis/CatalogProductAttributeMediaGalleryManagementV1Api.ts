/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataProductAttributeMediaGalleryEntryInterface,
  ErrorResponse,
  PutV1ProductsSkuMediaEntryIdRequest,
} from '../models';
import {
    CatalogDataProductAttributeMediaGalleryEntryInterfaceFromJSON,
    CatalogDataProductAttributeMediaGalleryEntryInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1ProductsSkuMediaEntryIdRequestFromJSON,
    PutV1ProductsSkuMediaEntryIdRequestToJSON,
} from '../models';

export interface DeleteV1ProductsSkuMediaEntryIdRequest {
    sku: string;
    entryId: number;
}

export interface GetV1ProductsSkuMediaRequest {
    sku: string;
}

export interface GetV1ProductsSkuMediaEntryIdRequest {
    sku: string;
    entryId: number;
}

export interface PostV1ProductsSkuMediaRequest {
    sku: string;
    putV1ProductsSkuMediaEntryIdRequest?: PutV1ProductsSkuMediaEntryIdRequest;
}

export interface PutV1ProductsSkuMediaEntryIdOperationRequest {
    sku: string;
    entryId: string;
    putV1ProductsSkuMediaEntryIdRequest?: PutV1ProductsSkuMediaEntryIdRequest;
}

/**
 * 
 */
export class CatalogProductAttributeMediaGalleryManagementV1Api extends runtime.BaseAPI {

    /**
     * Remove gallery entry
     */
    async deleteV1ProductsSkuMediaEntryIdRaw(requestParameters: DeleteV1ProductsSkuMediaEntryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling deleteV1ProductsSkuMediaEntryId.');
        }

        if (requestParameters.entryId === null || requestParameters.entryId === undefined) {
            throw new runtime.RequiredError('entryId','Required parameter requestParameters.entryId was null or undefined when calling deleteV1ProductsSkuMediaEntryId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/media/{entryId}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove gallery entry
     */
    async deleteV1ProductsSkuMediaEntryId(requestParameters: DeleteV1ProductsSkuMediaEntryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsSkuMediaEntryIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the list of gallery entries associated with given product
     */
    async getV1ProductsSkuMediaRaw(requestParameters: GetV1ProductsSkuMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataProductAttributeMediaGalleryEntryInterface>>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling getV1ProductsSkuMedia.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/media`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataProductAttributeMediaGalleryEntryInterfaceFromJSON));
    }

    /**
     * Retrieve the list of gallery entries associated with given product
     */
    async getV1ProductsSkuMedia(requestParameters: GetV1ProductsSkuMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataProductAttributeMediaGalleryEntryInterface>> {
        const response = await this.getV1ProductsSkuMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information about gallery entry
     */
    async getV1ProductsSkuMediaEntryIdRaw(requestParameters: GetV1ProductsSkuMediaEntryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductAttributeMediaGalleryEntryInterface>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling getV1ProductsSkuMediaEntryId.');
        }

        if (requestParameters.entryId === null || requestParameters.entryId === undefined) {
            throw new runtime.RequiredError('entryId','Required parameter requestParameters.entryId was null or undefined when calling getV1ProductsSkuMediaEntryId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/media/{entryId}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductAttributeMediaGalleryEntryInterfaceFromJSON(jsonValue));
    }

    /**
     * Return information about gallery entry
     */
    async getV1ProductsSkuMediaEntryId(requestParameters: GetV1ProductsSkuMediaEntryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductAttributeMediaGalleryEntryInterface> {
        const response = await this.getV1ProductsSkuMediaEntryIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new gallery entry
     */
    async postV1ProductsSkuMediaRaw(requestParameters: PostV1ProductsSkuMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling postV1ProductsSkuMedia.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/media`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1ProductsSkuMediaEntryIdRequestToJSON(requestParameters.putV1ProductsSkuMediaEntryIdRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create new gallery entry
     */
    async postV1ProductsSkuMedia(requestParameters: PostV1ProductsSkuMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1ProductsSkuMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update gallery entry
     */
    async putV1ProductsSkuMediaEntryIdRaw(requestParameters: PutV1ProductsSkuMediaEntryIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling putV1ProductsSkuMediaEntryId.');
        }

        if (requestParameters.entryId === null || requestParameters.entryId === undefined) {
            throw new runtime.RequiredError('entryId','Required parameter requestParameters.entryId was null or undefined when calling putV1ProductsSkuMediaEntryId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/media/{entryId}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1ProductsSkuMediaEntryIdRequestToJSON(requestParameters.putV1ProductsSkuMediaEntryIdRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update gallery entry
     */
    async putV1ProductsSkuMediaEntryId(requestParameters: PutV1ProductsSkuMediaEntryIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.putV1ProductsSkuMediaEntryIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
