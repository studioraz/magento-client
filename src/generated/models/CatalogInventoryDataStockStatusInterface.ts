/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CatalogInventoryDataStockItemInterface } from './CatalogInventoryDataStockItemInterface';
import {
    CatalogInventoryDataStockItemInterfaceFromJSON,
    CatalogInventoryDataStockItemInterfaceFromJSONTyped,
    CatalogInventoryDataStockItemInterfaceToJSON,
} from './CatalogInventoryDataStockItemInterface';

/**
 * Interface StockStatusInterface
 * @export
 * @interface CatalogInventoryDataStockStatusInterface
 */
export interface CatalogInventoryDataStockStatusInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    productId: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    stockId: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    qty: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    stockStatus: number;
    /**
     * 
     * @type {CatalogInventoryDataStockItemInterface}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    stockItem: CatalogInventoryDataStockItemInterface;
    /**
     * ExtensionInterface class for @see \Magento\CatalogInventory\Api\Data\StockStatusInterface
     * @type {object}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the CatalogInventoryDataStockStatusInterface interface.
 */
export function instanceOfCatalogInventoryDataStockStatusInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "productId" in value;
    isInstance = isInstance && "stockId" in value;
    isInstance = isInstance && "qty" in value;
    isInstance = isInstance && "stockStatus" in value;
    isInstance = isInstance && "stockItem" in value;

    return isInstance;
}

export function CatalogInventoryDataStockStatusInterfaceFromJSON(json: any): CatalogInventoryDataStockStatusInterface {
    return CatalogInventoryDataStockStatusInterfaceFromJSONTyped(json, false);
}

export function CatalogInventoryDataStockStatusInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogInventoryDataStockStatusInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productId': json['product_id'],
        'stockId': json['stock_id'],
        'qty': json['qty'],
        'stockStatus': json['stock_status'],
        'stockItem': CatalogInventoryDataStockItemInterfaceFromJSON(json['stock_item']),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function CatalogInventoryDataStockStatusInterfaceToJSON(value?: CatalogInventoryDataStockStatusInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'product_id': value.productId,
        'stock_id': value.stockId,
        'qty': value.qty,
        'stock_status': value.stockStatus,
        'stock_item': CatalogInventoryDataStockItemInterfaceToJSON(value.stockItem),
        'extension_attributes': value.extensionAttributes,
    };
}

