/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Button interface. This interface represents all manner of product buttons: add to cart, add to compare, etc... The buttons describes by this interface should have interaction with backend
 * @export
 * @interface CatalogDataProductRenderButtonInterface
 */
export interface CatalogDataProductRenderButtonInterface {
    /**
     * Post data
     * @type {string}
     * @memberof CatalogDataProductRenderButtonInterface
     */
    postData: string;
    /**
     * Url, needed to add product to cart
     * @type {string}
     * @memberof CatalogDataProductRenderButtonInterface
     */
    url: string;
    /**
     * Flag whether a product has options or not
     * @type {boolean}
     * @memberof CatalogDataProductRenderButtonInterface
     */
    requiredOptions: boolean;
    /**
     * ExtensionInterface class for @see \Magento\Catalog\Api\Data\ProductRender\ButtonInterface
     * @type {object}
     * @memberof CatalogDataProductRenderButtonInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the CatalogDataProductRenderButtonInterface interface.
 */
export function instanceOfCatalogDataProductRenderButtonInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "postData" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "requiredOptions" in value;

    return isInstance;
}

export function CatalogDataProductRenderButtonInterfaceFromJSON(json: any): CatalogDataProductRenderButtonInterface {
    return CatalogDataProductRenderButtonInterfaceFromJSONTyped(json, false);
}

export function CatalogDataProductRenderButtonInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataProductRenderButtonInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'postData': json['post_data'],
        'url': json['url'],
        'requiredOptions': json['required_options'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function CatalogDataProductRenderButtonInterfaceToJSON(value?: CatalogDataProductRenderButtonInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'post_data': value.postData,
        'url': value.url,
        'required_options': value.requiredOptions,
        'extension_attributes': value.extensionAttributes,
    };
}

