/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EavDataAttributeSetInterface,
  EavDataAttributeSetSearchResultsInterface,
  ErrorResponse,
  PutV1EavAttributesetsAttributeSetIdRequest,
} from '../models';
import {
    EavDataAttributeSetInterfaceFromJSON,
    EavDataAttributeSetInterfaceToJSON,
    EavDataAttributeSetSearchResultsInterfaceFromJSON,
    EavDataAttributeSetSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1EavAttributesetsAttributeSetIdRequestFromJSON,
    PutV1EavAttributesetsAttributeSetIdRequestToJSON,
} from '../models';

export interface DeleteV1ProductsAttributesetsAttributeSetIdRequest {
    attributeSetId: number;
}

export interface GetV1ProductsAttributesetsAttributeSetIdRequest {
    attributeSetId: number;
}

export interface GetV1ProductsAttributesetsSetsListRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface PutV1ProductsAttributesetsAttributeSetIdRequest {
    attributeSetId: string;
    putV1EavAttributesetsAttributeSetIdRequest?: PutV1EavAttributesetsAttributeSetIdRequest;
}

/**
 * 
 */
export class CatalogAttributeSetRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Remove attribute set by given ID
     */
    async deleteV1ProductsAttributesetsAttributeSetIdRaw(requestParameters: DeleteV1ProductsAttributesetsAttributeSetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.attributeSetId === null || requestParameters.attributeSetId === undefined) {
            throw new runtime.RequiredError('attributeSetId','Required parameter requestParameters.attributeSetId was null or undefined when calling deleteV1ProductsAttributesetsAttributeSetId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/{attributeSetId}`.replace(`{${"attributeSetId"}}`, encodeURIComponent(String(requestParameters.attributeSetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove attribute set by given ID
     */
    async deleteV1ProductsAttributesetsAttributeSetId(requestParameters: DeleteV1ProductsAttributesetsAttributeSetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsAttributesetsAttributeSetIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve attribute set information based on given ID
     */
    async getV1ProductsAttributesetsAttributeSetIdRaw(requestParameters: GetV1ProductsAttributesetsAttributeSetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EavDataAttributeSetInterface>> {
        if (requestParameters.attributeSetId === null || requestParameters.attributeSetId === undefined) {
            throw new runtime.RequiredError('attributeSetId','Required parameter requestParameters.attributeSetId was null or undefined when calling getV1ProductsAttributesetsAttributeSetId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/{attributeSetId}`.replace(`{${"attributeSetId"}}`, encodeURIComponent(String(requestParameters.attributeSetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EavDataAttributeSetInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve attribute set information based on given ID
     */
    async getV1ProductsAttributesetsAttributeSetId(requestParameters: GetV1ProductsAttributesetsAttributeSetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EavDataAttributeSetInterface> {
        const response = await this.getV1ProductsAttributesetsAttributeSetIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of Attribute Sets
     */
    async getV1ProductsAttributesetsSetsListRaw(requestParameters: GetV1ProductsAttributesetsSetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EavDataAttributeSetSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/sets/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EavDataAttributeSetSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve list of Attribute Sets
     */
    async getV1ProductsAttributesetsSetsList(requestParameters: GetV1ProductsAttributesetsSetsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EavDataAttributeSetSearchResultsInterface> {
        const response = await this.getV1ProductsAttributesetsSetsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save attribute set data
     */
    async putV1ProductsAttributesetsAttributeSetIdRaw(requestParameters: PutV1ProductsAttributesetsAttributeSetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EavDataAttributeSetInterface>> {
        if (requestParameters.attributeSetId === null || requestParameters.attributeSetId === undefined) {
            throw new runtime.RequiredError('attributeSetId','Required parameter requestParameters.attributeSetId was null or undefined when calling putV1ProductsAttributesetsAttributeSetId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attribute-sets/{attributeSetId}`.replace(`{${"attributeSetId"}}`, encodeURIComponent(String(requestParameters.attributeSetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1EavAttributesetsAttributeSetIdRequestToJSON(requestParameters.putV1EavAttributesetsAttributeSetIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EavDataAttributeSetInterfaceFromJSON(jsonValue));
    }

    /**
     * Save attribute set data
     */
    async putV1ProductsAttributesetsAttributeSetId(requestParameters: PutV1ProductsAttributesetsAttributeSetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EavDataAttributeSetInterface> {
        const response = await this.putV1ProductsAttributesetsAttributeSetIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
