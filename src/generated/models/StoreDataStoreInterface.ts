/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Store interface
 * @export
 * @interface StoreDataStoreInterface
 */
export interface StoreDataStoreInterface {
    /**
     * 
     * @type {number}
     * @memberof StoreDataStoreInterface
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof StoreDataStoreInterface
     */
    code: string;
    /**
     * Store name
     * @type {string}
     * @memberof StoreDataStoreInterface
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof StoreDataStoreInterface
     */
    websiteId: number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataStoreInterface
     */
    storeGroupId: number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataStoreInterface
     */
    isActive: number;
    /**
     * ExtensionInterface class for @see \Magento\Store\Api\Data\StoreInterface
     * @type {object}
     * @memberof StoreDataStoreInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the StoreDataStoreInterface interface.
 */
export function instanceOfStoreDataStoreInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "websiteId" in value;
    isInstance = isInstance && "storeGroupId" in value;
    isInstance = isInstance && "isActive" in value;

    return isInstance;
}

export function StoreDataStoreInterfaceFromJSON(json: any): StoreDataStoreInterface {
    return StoreDataStoreInterfaceFromJSONTyped(json, false);
}

export function StoreDataStoreInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreDataStoreInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'code': json['code'],
        'name': json['name'],
        'websiteId': json['website_id'],
        'storeGroupId': json['store_group_id'],
        'isActive': json['is_active'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function StoreDataStoreInterfaceToJSON(value?: StoreDataStoreInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'code': value.code,
        'name': value.name,
        'website_id': value.websiteId,
        'store_group_id': value.storeGroupId,
        'is_active': value.isActive,
        'extension_attributes': value.extensionAttributes,
    };
}

