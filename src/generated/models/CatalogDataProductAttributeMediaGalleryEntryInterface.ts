/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CatalogDataProductAttributeMediaGalleryEntryExtensionInterface } from './CatalogDataProductAttributeMediaGalleryEntryExtensionInterface';
import {
    CatalogDataProductAttributeMediaGalleryEntryExtensionInterfaceFromJSON,
    CatalogDataProductAttributeMediaGalleryEntryExtensionInterfaceFromJSONTyped,
    CatalogDataProductAttributeMediaGalleryEntryExtensionInterfaceToJSON,
} from './CatalogDataProductAttributeMediaGalleryEntryExtensionInterface';
import type { FrameworkDataImageContentInterface } from './FrameworkDataImageContentInterface';
import {
    FrameworkDataImageContentInterfaceFromJSON,
    FrameworkDataImageContentInterfaceFromJSONTyped,
    FrameworkDataImageContentInterfaceToJSON,
} from './FrameworkDataImageContentInterface';

/**
 * 
 * @export
 * @interface CatalogDataProductAttributeMediaGalleryEntryInterface
 */
export interface CatalogDataProductAttributeMediaGalleryEntryInterface {
    /**
     * Gallery entry ID
     * @type {number}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    id?: number;
    /**
     * Media type
     * @type {string}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    mediaType: string;
    /**
     * Gallery entry alternative text
     * @type {string}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    label: string;
    /**
     * Gallery entry position (sort order)
     * @type {number}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    position: number;
    /**
     * If gallery entry is hidden from product page
     * @type {boolean}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    disabled: boolean;
    /**
     * Gallery entry image types (thumbnail, image, small_image etc)
     * @type {Array<string>}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    types: Array<string>;
    /**
     * File path
     * @type {string}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    file?: string;
    /**
     * 
     * @type {FrameworkDataImageContentInterface}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    content?: FrameworkDataImageContentInterface;
    /**
     * 
     * @type {CatalogDataProductAttributeMediaGalleryEntryExtensionInterface}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    extensionAttributes?: CatalogDataProductAttributeMediaGalleryEntryExtensionInterface;
}

/**
 * Check if a given object implements the CatalogDataProductAttributeMediaGalleryEntryInterface interface.
 */
export function instanceOfCatalogDataProductAttributeMediaGalleryEntryInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mediaType" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "position" in value;
    isInstance = isInstance && "disabled" in value;
    isInstance = isInstance && "types" in value;

    return isInstance;
}

export function CatalogDataProductAttributeMediaGalleryEntryInterfaceFromJSON(json: any): CatalogDataProductAttributeMediaGalleryEntryInterface {
    return CatalogDataProductAttributeMediaGalleryEntryInterfaceFromJSONTyped(json, false);
}

export function CatalogDataProductAttributeMediaGalleryEntryInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataProductAttributeMediaGalleryEntryInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'mediaType': json['media_type'],
        'label': json['label'],
        'position': json['position'],
        'disabled': json['disabled'],
        'types': json['types'],
        'file': !exists(json, 'file') ? undefined : json['file'],
        'content': !exists(json, 'content') ? undefined : FrameworkDataImageContentInterfaceFromJSON(json['content']),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : CatalogDataProductAttributeMediaGalleryEntryExtensionInterfaceFromJSON(json['extension_attributes']),
    };
}

export function CatalogDataProductAttributeMediaGalleryEntryInterfaceToJSON(value?: CatalogDataProductAttributeMediaGalleryEntryInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'media_type': value.mediaType,
        'label': value.label,
        'position': value.position,
        'disabled': value.disabled,
        'types': value.types,
        'file': value.file,
        'content': FrameworkDataImageContentInterfaceToJSON(value.content),
        'extension_attributes': CatalogDataProductAttributeMediaGalleryEntryExtensionInterfaceToJSON(value.extensionAttributes),
    };
}

