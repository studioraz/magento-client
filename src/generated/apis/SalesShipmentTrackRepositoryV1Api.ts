/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PostV1ShipmentTrackRequest,
  SalesDataShipmentTrackInterface,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ShipmentTrackRequestFromJSON,
    PostV1ShipmentTrackRequestToJSON,
    SalesDataShipmentTrackInterfaceFromJSON,
    SalesDataShipmentTrackInterfaceToJSON,
} from '../models';

export interface DeleteV1ShipmentTrackIdRequest {
    id: number;
}

export interface PostV1ShipmentTrackOperationRequest {
    postV1ShipmentTrackRequest?: PostV1ShipmentTrackRequest;
}

/**
 * 
 */
export class SalesShipmentTrackRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Deletes a specified shipment track by ID.
     */
    async deleteV1ShipmentTrackIdRaw(requestParameters: DeleteV1ShipmentTrackIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteV1ShipmentTrackId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/shipment/track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a specified shipment track by ID.
     */
    async deleteV1ShipmentTrackId(requestParameters: DeleteV1ShipmentTrackIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ShipmentTrackIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Performs persist operations for a specified shipment track.
     */
    async postV1ShipmentTrackRaw(requestParameters: PostV1ShipmentTrackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesDataShipmentTrackInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/shipment/track`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ShipmentTrackRequestToJSON(requestParameters.postV1ShipmentTrackRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesDataShipmentTrackInterfaceFromJSON(jsonValue));
    }

    /**
     * Performs persist operations for a specified shipment track.
     */
    async postV1ShipmentTrack(requestParameters: PostV1ShipmentTrackOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesDataShipmentTrackInterface> {
        const response = await this.postV1ShipmentTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
