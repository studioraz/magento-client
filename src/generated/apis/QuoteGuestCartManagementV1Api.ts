/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PutV1CartsCartIdRequest,
  PutV1CartsMineOrderRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1CartsCartIdRequestFromJSON,
    PutV1CartsCartIdRequestToJSON,
    PutV1CartsMineOrderRequestFromJSON,
    PutV1CartsMineOrderRequestToJSON,
} from '../models';

export interface PutV1GuestcartsCartIdRequest {
    cartId: string;
    putV1CartsCartIdRequest?: PutV1CartsCartIdRequest;
}

export interface PutV1GuestcartsCartIdOrderRequest {
    cartId: string;
    putV1CartsMineOrderRequest?: PutV1CartsMineOrderRequest;
}

/**
 * 
 */
export class QuoteGuestCartManagementV1Api extends runtime.BaseAPI {

    /**
     * Enable an customer or guest user to create an empty cart and quote for an anonymous customer.
     */
    async postV1GuestcartsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Enable an customer or guest user to create an empty cart and quote for an anonymous customer.
     */
    async postV1Guestcarts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.postV1GuestcartsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Assign a specified customer to a specified shopping cart.
     */
    async putV1GuestcartsCartIdRaw(requestParameters: PutV1GuestcartsCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling putV1GuestcartsCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CartsCartIdRequestToJSON(requestParameters.putV1CartsCartIdRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assign a specified customer to a specified shopping cart.
     */
    async putV1GuestcartsCartId(requestParameters: PutV1GuestcartsCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.putV1GuestcartsCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Place an order for a specified cart.
     */
    async putV1GuestcartsCartIdOrderRaw(requestParameters: PutV1GuestcartsCartIdOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling putV1GuestcartsCartIdOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/guest-carts/{cartId}/order`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CartsMineOrderRequestToJSON(requestParameters.putV1CartsMineOrderRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Place an order for a specified cart.
     */
    async putV1GuestcartsCartIdOrder(requestParameters: PutV1GuestcartsCartIdOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.putV1GuestcartsCartIdOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
