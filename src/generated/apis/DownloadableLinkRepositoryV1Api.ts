/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DownloadableDataLinkInterface,
  ErrorResponse,
  PostV1ProductsSkuDownloadablelinksRequest,
} from '../models';
import {
    DownloadableDataLinkInterfaceFromJSON,
    DownloadableDataLinkInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ProductsSkuDownloadablelinksRequestFromJSON,
    PostV1ProductsSkuDownloadablelinksRequestToJSON,
} from '../models';

export interface DeleteV1ProductsDownloadablelinksIdRequest {
    id: number;
}

export interface GetV1ProductsSkuDownloadablelinksRequest {
    sku: string;
}

export interface PostV1ProductsSkuDownloadablelinksOperationRequest {
    sku: string;
    postV1ProductsSkuDownloadablelinksRequest?: PostV1ProductsSkuDownloadablelinksRequest;
}

export interface PutV1ProductsSkuDownloadablelinksIdRequest {
    sku: string;
    id: string;
    postV1ProductsSkuDownloadablelinksRequest?: PostV1ProductsSkuDownloadablelinksRequest;
}

/**
 * 
 */
export class DownloadableLinkRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Delete downloadable link
     */
    async deleteV1ProductsDownloadablelinksIdRaw(requestParameters: DeleteV1ProductsDownloadablelinksIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteV1ProductsDownloadablelinksId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/downloadable-links/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete downloadable link
     */
    async deleteV1ProductsDownloadablelinksId(requestParameters: DeleteV1ProductsDownloadablelinksIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsDownloadablelinksIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of links with associated samples
     */
    async getV1ProductsSkuDownloadablelinksRaw(requestParameters: GetV1ProductsSkuDownloadablelinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DownloadableDataLinkInterface>>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling getV1ProductsSkuDownloadablelinks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/downloadable-links`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DownloadableDataLinkInterfaceFromJSON));
    }

    /**
     * List of links with associated samples
     */
    async getV1ProductsSkuDownloadablelinks(requestParameters: GetV1ProductsSkuDownloadablelinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DownloadableDataLinkInterface>> {
        const response = await this.getV1ProductsSkuDownloadablelinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update downloadable link of the given product (link type and its resources cannot be changed)
     */
    async postV1ProductsSkuDownloadablelinksRaw(requestParameters: PostV1ProductsSkuDownloadablelinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling postV1ProductsSkuDownloadablelinks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/downloadable-links`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsSkuDownloadablelinksRequestToJSON(requestParameters.postV1ProductsSkuDownloadablelinksRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update downloadable link of the given product (link type and its resources cannot be changed)
     */
    async postV1ProductsSkuDownloadablelinks(requestParameters: PostV1ProductsSkuDownloadablelinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.postV1ProductsSkuDownloadablelinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update downloadable link of the given product (link type and its resources cannot be changed)
     */
    async putV1ProductsSkuDownloadablelinksIdRaw(requestParameters: PutV1ProductsSkuDownloadablelinksIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling putV1ProductsSkuDownloadablelinksId.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putV1ProductsSkuDownloadablelinksId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/downloadable-links/{id}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsSkuDownloadablelinksRequestToJSON(requestParameters.postV1ProductsSkuDownloadablelinksRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update downloadable link of the given product (link type and its resources cannot be changed)
     */
    async putV1ProductsSkuDownloadablelinksId(requestParameters: PutV1ProductsSkuDownloadablelinksIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.putV1ProductsSkuDownloadablelinksIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
