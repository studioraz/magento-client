"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdobeStockAssetApiDataAssetInterfaceToJSON = exports.AdobeStockAssetApiDataAssetInterfaceFromJSONTyped = exports.AdobeStockAssetApiDataAssetInterfaceFromJSON = exports.instanceOfAdobeStockAssetApiDataAssetInterface = void 0;
var runtime_1 = require("../runtime");
var AdobeStockAssetApiDataCategoryInterface_1 = require("./AdobeStockAssetApiDataCategoryInterface");
var AdobeStockAssetApiDataCreatorInterface_1 = require("./AdobeStockAssetApiDataCreatorInterface");
/**
 * Check if a given object implements the AdobeStockAssetApiDataAssetInterface interface.
 */
function instanceOfAdobeStockAssetApiDataAssetInterface(value) {
    var isInstance = true;
    isInstance = isInstance && "mediaGalleryId" in value;
    isInstance = isInstance && "isLicensed" in value;
    isInstance = isInstance && "creationDate" in value;
    return isInstance;
}
exports.instanceOfAdobeStockAssetApiDataAssetInterface = instanceOfAdobeStockAssetApiDataAssetInterface;
function AdobeStockAssetApiDataAssetInterfaceFromJSON(json) {
    return AdobeStockAssetApiDataAssetInterfaceFromJSONTyped(json, false);
}
exports.AdobeStockAssetApiDataAssetInterfaceFromJSON = AdobeStockAssetApiDataAssetInterfaceFromJSON;
function AdobeStockAssetApiDataAssetInterfaceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'mediaGalleryId': json['media_gallery_id'],
        'categoryId': !(0, runtime_1.exists)(json, 'category_id') ? undefined : json['category_id'],
        'category': !(0, runtime_1.exists)(json, 'category') ? undefined : (0, AdobeStockAssetApiDataCategoryInterface_1.AdobeStockAssetApiDataCategoryInterfaceFromJSON)(json['category']),
        'creatorId': !(0, runtime_1.exists)(json, 'creator_id') ? undefined : json['creator_id'],
        'creator': !(0, runtime_1.exists)(json, 'creator') ? undefined : (0, AdobeStockAssetApiDataCreatorInterface_1.AdobeStockAssetApiDataCreatorInterfaceFromJSON)(json['creator']),
        'isLicensed': json['is_licensed'],
        'creationDate': json['creation_date'],
        'extensionAttributes': !(0, runtime_1.exists)(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}
exports.AdobeStockAssetApiDataAssetInterfaceFromJSONTyped = AdobeStockAssetApiDataAssetInterfaceFromJSONTyped;
function AdobeStockAssetApiDataAssetInterfaceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'media_gallery_id': value.mediaGalleryId,
        'category_id': value.categoryId,
        'category': (0, AdobeStockAssetApiDataCategoryInterface_1.AdobeStockAssetApiDataCategoryInterfaceToJSON)(value.category),
        'creator_id': value.creatorId,
        'creator': (0, AdobeStockAssetApiDataCreatorInterface_1.AdobeStockAssetApiDataCreatorInterfaceToJSON)(value.creator),
        'is_licensed': value.isLicensed,
        'creation_date': value.creationDate,
        'extension_attributes': value.extensionAttributes,
    };
}
exports.AdobeStockAssetApiDataAssetInterfaceToJSON = AdobeStockAssetApiDataAssetInterfaceToJSON;
//# sourceMappingURL=AdobeStockAssetApiDataAssetInterface.js.map