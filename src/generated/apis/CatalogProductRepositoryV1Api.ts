/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataProductInterface,
  CatalogDataProductSearchResultsInterface,
  ErrorResponse,
  PostV1ProductsRequest,
} from '../models';
import {
    CatalogDataProductInterfaceFromJSON,
    CatalogDataProductInterfaceToJSON,
    CatalogDataProductSearchResultsInterfaceFromJSON,
    CatalogDataProductSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ProductsRequestFromJSON,
    PostV1ProductsRequestToJSON,
} from '../models';

export interface DeleteV1ProductsSkuRequest {
    sku: string;
}

export interface GetV1ProductsRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface GetV1ProductsSkuRequest {
    sku: string;
    editMode?: boolean;
    storeId?: number;
    forceReload?: boolean;
}

export interface PostV1ProductsOperationRequest {
    postV1ProductsRequest?: PostV1ProductsRequest;
}

export interface PutV1ProductsSkuRequest {
    sku: string;
    postV1ProductsRequest?: PostV1ProductsRequest;
}

/**
 * 
 */
export class CatalogProductRepositoryV1Api extends runtime.BaseAPI {

    /**
     * 
     */
    async deleteV1ProductsSkuRaw(requestParameters: DeleteV1ProductsSkuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling deleteV1ProductsSku.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 
     */
    async deleteV1ProductsSku(requestParameters: DeleteV1ProductsSkuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsSkuRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get product list
     */
    async getV1ProductsRaw(requestParameters: GetV1ProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Get product list
     */
    async getV1Products(requestParameters: GetV1ProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductSearchResultsInterface> {
        const response = await this.getV1ProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get info about product by product SKU
     */
    async getV1ProductsSkuRaw(requestParameters: GetV1ProductsSkuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductInterface>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling getV1ProductsSku.');
        }

        const queryParameters: any = {};

        if (requestParameters.editMode !== undefined) {
            queryParameters['editMode'] = requestParameters.editMode;
        }

        if (requestParameters.storeId !== undefined) {
            queryParameters['storeId'] = requestParameters.storeId;
        }

        if (requestParameters.forceReload !== undefined) {
            queryParameters['forceReload'] = requestParameters.forceReload;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductInterfaceFromJSON(jsonValue));
    }

    /**
     * Get info about product by product SKU
     */
    async getV1ProductsSku(requestParameters: GetV1ProductsSkuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductInterface> {
        const response = await this.getV1ProductsSkuRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create product
     */
    async postV1ProductsRaw(requestParameters: PostV1ProductsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsRequestToJSON(requestParameters.postV1ProductsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductInterfaceFromJSON(jsonValue));
    }

    /**
     * Create product
     */
    async postV1Products(requestParameters: PostV1ProductsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductInterface> {
        const response = await this.postV1ProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create product
     */
    async putV1ProductsSkuRaw(requestParameters: PutV1ProductsSkuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataProductInterface>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling putV1ProductsSku.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsRequestToJSON(requestParameters.postV1ProductsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataProductInterfaceFromJSON(jsonValue));
    }

    /**
     * Create product
     */
    async putV1ProductsSku(requestParameters: PutV1ProductsSkuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataProductInterface> {
        const response = await this.putV1ProductsSkuRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
