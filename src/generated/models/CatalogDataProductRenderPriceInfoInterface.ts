/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CatalogDataProductRenderFormattedPriceInfoInterface } from './CatalogDataProductRenderFormattedPriceInfoInterface';
import {
    CatalogDataProductRenderFormattedPriceInfoInterfaceFromJSON,
    CatalogDataProductRenderFormattedPriceInfoInterfaceFromJSONTyped,
    CatalogDataProductRenderFormattedPriceInfoInterfaceToJSON,
} from './CatalogDataProductRenderFormattedPriceInfoInterface';
import type { CatalogDataProductRenderPriceInfoExtensionInterface } from './CatalogDataProductRenderPriceInfoExtensionInterface';
import {
    CatalogDataProductRenderPriceInfoExtensionInterfaceFromJSON,
    CatalogDataProductRenderPriceInfoExtensionInterfaceFromJSONTyped,
    CatalogDataProductRenderPriceInfoExtensionInterfaceToJSON,
} from './CatalogDataProductRenderPriceInfoExtensionInterface';

/**
 * Price interface.
 * @export
 * @interface CatalogDataProductRenderPriceInfoInterface
 */
export interface CatalogDataProductRenderPriceInfoInterface {
    /**
     * Final price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    finalPrice: number;
    /**
     * Max price of a product
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    maxPrice: number;
    /**
     * Max regular price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    maxRegularPrice: number;
    /**
     * Minimal regular price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    minimalRegularPrice: number;
    /**
     * Special price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    specialPrice: number;
    /**
     * Minimal price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    minimalPrice: number;
    /**
     * Regular price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    regularPrice: number;
    /**
     * 
     * @type {CatalogDataProductRenderFormattedPriceInfoInterface}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    formattedPrices: CatalogDataProductRenderFormattedPriceInfoInterface;
    /**
     * 
     * @type {CatalogDataProductRenderPriceInfoExtensionInterface}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    extensionAttributes?: CatalogDataProductRenderPriceInfoExtensionInterface;
}

/**
 * Check if a given object implements the CatalogDataProductRenderPriceInfoInterface interface.
 */
export function instanceOfCatalogDataProductRenderPriceInfoInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "finalPrice" in value;
    isInstance = isInstance && "maxPrice" in value;
    isInstance = isInstance && "maxRegularPrice" in value;
    isInstance = isInstance && "minimalRegularPrice" in value;
    isInstance = isInstance && "specialPrice" in value;
    isInstance = isInstance && "minimalPrice" in value;
    isInstance = isInstance && "regularPrice" in value;
    isInstance = isInstance && "formattedPrices" in value;

    return isInstance;
}

export function CatalogDataProductRenderPriceInfoInterfaceFromJSON(json: any): CatalogDataProductRenderPriceInfoInterface {
    return CatalogDataProductRenderPriceInfoInterfaceFromJSONTyped(json, false);
}

export function CatalogDataProductRenderPriceInfoInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataProductRenderPriceInfoInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'finalPrice': json['final_price'],
        'maxPrice': json['max_price'],
        'maxRegularPrice': json['max_regular_price'],
        'minimalRegularPrice': json['minimal_regular_price'],
        'specialPrice': json['special_price'],
        'minimalPrice': json['minimal_price'],
        'regularPrice': json['regular_price'],
        'formattedPrices': CatalogDataProductRenderFormattedPriceInfoInterfaceFromJSON(json['formatted_prices']),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : CatalogDataProductRenderPriceInfoExtensionInterfaceFromJSON(json['extension_attributes']),
    };
}

export function CatalogDataProductRenderPriceInfoInterfaceToJSON(value?: CatalogDataProductRenderPriceInfoInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'final_price': value.finalPrice,
        'max_price': value.maxPrice,
        'max_regular_price': value.maxRegularPrice,
        'minimal_regular_price': value.minimalRegularPrice,
        'special_price': value.specialPrice,
        'minimal_price': value.minimalPrice,
        'regular_price': value.regularPrice,
        'formatted_prices': CatalogDataProductRenderFormattedPriceInfoInterfaceToJSON(value.formattedPrices),
        'extension_attributes': CatalogDataProductRenderPriceInfoExtensionInterfaceToJSON(value.extensionAttributes),
    };
}

