/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CatalogDataCategoryTreeInterface
 */
export interface CatalogDataCategoryTreeInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    id?: number;
    /**
     * Parent category ID
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    parentId: number;
    /**
     * Category name
     * @type {string}
     * @memberof CatalogDataCategoryTreeInterface
     */
    name: string;
    /**
     * Whether category is active
     * @type {boolean}
     * @memberof CatalogDataCategoryTreeInterface
     */
    isActive: boolean;
    /**
     * Category position
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    position: number;
    /**
     * Category level
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    level: number;
    /**
     * Product count
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    productCount: number;
    /**
     * 
     * @type {Array<CatalogDataCategoryTreeInterface>}
     * @memberof CatalogDataCategoryTreeInterface
     */
    childrenData: Array<CatalogDataCategoryTreeInterface>;
}

/**
 * Check if a given object implements the CatalogDataCategoryTreeInterface interface.
 */
export function instanceOfCatalogDataCategoryTreeInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "parentId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "isActive" in value;
    isInstance = isInstance && "position" in value;
    isInstance = isInstance && "level" in value;
    isInstance = isInstance && "productCount" in value;
    isInstance = isInstance && "childrenData" in value;

    return isInstance;
}

export function CatalogDataCategoryTreeInterfaceFromJSON(json: any): CatalogDataCategoryTreeInterface {
    return CatalogDataCategoryTreeInterfaceFromJSONTyped(json, false);
}

export function CatalogDataCategoryTreeInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogDataCategoryTreeInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'parentId': json['parent_id'],
        'name': json['name'],
        'isActive': json['is_active'],
        'position': json['position'],
        'level': json['level'],
        'productCount': json['product_count'],
        'childrenData': ((json['children_data'] as Array<any>).map(CatalogDataCategoryTreeInterfaceFromJSON)),
    };
}

export function CatalogDataCategoryTreeInterfaceToJSON(value?: CatalogDataCategoryTreeInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'parent_id': value.parentId,
        'name': value.name,
        'is_active': value.isActive,
        'position': value.position,
        'level': value.level,
        'product_count': value.productCount,
        'children_data': ((value.childrenData as Array<any>).map(CatalogDataCategoryTreeInterfaceToJSON)),
    };
}

