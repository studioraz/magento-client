/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GiftMessageDataMessageInterface,
  PostV1CartsCartIdGiftmessageRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GiftMessageDataMessageInterfaceFromJSON,
    GiftMessageDataMessageInterfaceToJSON,
    PostV1CartsCartIdGiftmessageRequestFromJSON,
    PostV1CartsCartIdGiftmessageRequestToJSON,
} from '../models';

export interface GetV1CartsCartIdGiftmessageRequest {
    cartId: number;
}

export interface PostV1CartsCartIdGiftmessageOperationRequest {
    cartId: number;
    postV1CartsCartIdGiftmessageRequest?: PostV1CartsCartIdGiftmessageRequest;
}

export interface PostV1CartsMineGiftmessageRequest {
    postV1CartsCartIdGiftmessageRequest?: PostV1CartsCartIdGiftmessageRequest;
}

/**
 * 
 */
export class GiftMessageCartRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Return the gift message for a specified order.
     */
    async getV1CartsCartIdGiftmessageRaw(requestParameters: GetV1CartsCartIdGiftmessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftMessageDataMessageInterface>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getV1CartsCartIdGiftmessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}/gift-message`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftMessageDataMessageInterfaceFromJSON(jsonValue));
    }

    /**
     * Return the gift message for a specified order.
     */
    async getV1CartsCartIdGiftmessage(requestParameters: GetV1CartsCartIdGiftmessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftMessageDataMessageInterface> {
        const response = await this.getV1CartsCartIdGiftmessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the gift message for a specified order.
     */
    async getV1CartsMineGiftmessageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftMessageDataMessageInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/gift-message`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftMessageDataMessageInterfaceFromJSON(jsonValue));
    }

    /**
     * Return the gift message for a specified order.
     */
    async getV1CartsMineGiftmessage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftMessageDataMessageInterface> {
        const response = await this.getV1CartsMineGiftmessageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set the gift message for an entire order.
     */
    async postV1CartsCartIdGiftmessageRaw(requestParameters: PostV1CartsCartIdGiftmessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling postV1CartsCartIdGiftmessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}/gift-message`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CartsCartIdGiftmessageRequestToJSON(requestParameters.postV1CartsCartIdGiftmessageRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set the gift message for an entire order.
     */
    async postV1CartsCartIdGiftmessage(requestParameters: PostV1CartsCartIdGiftmessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1CartsCartIdGiftmessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the gift message for an entire order.
     */
    async postV1CartsMineGiftmessageRaw(requestParameters: PostV1CartsMineGiftmessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/gift-message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CartsCartIdGiftmessageRequestToJSON(requestParameters.postV1CartsCartIdGiftmessageRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set the gift message for an entire order.
     */
    async postV1CartsMineGiftmessage(requestParameters: PostV1CartsMineGiftmessageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1CartsMineGiftmessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
