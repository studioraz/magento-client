/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Credit memo comment interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.
 * @export
 * @interface SalesDataCreditmemoCommentInterface
 */
export interface SalesDataCreditmemoCommentInterface {
    /**
     * Comment.
     * @type {string}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    comment: string;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    createdAt?: string;
    /**
     * Credit memo ID.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    entityId?: number;
    /**
     * Is-customer-notified flag value.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    isCustomerNotified: number;
    /**
     * Is-visible-on-storefront flag value.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    isVisibleOnFront: number;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    parentId: number;
    /**
     * ExtensionInterface class for @see \Magento\Sales\Api\Data\CreditmemoCommentInterface
     * @type {object}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the SalesDataCreditmemoCommentInterface interface.
 */
export function instanceOfSalesDataCreditmemoCommentInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "comment" in value;
    isInstance = isInstance && "isCustomerNotified" in value;
    isInstance = isInstance && "isVisibleOnFront" in value;
    isInstance = isInstance && "parentId" in value;

    return isInstance;
}

export function SalesDataCreditmemoCommentInterfaceFromJSON(json: any): SalesDataCreditmemoCommentInterface {
    return SalesDataCreditmemoCommentInterfaceFromJSONTyped(json, false);
}

export function SalesDataCreditmemoCommentInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesDataCreditmemoCommentInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'comment': json['comment'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'entityId': !exists(json, 'entity_id') ? undefined : json['entity_id'],
        'isCustomerNotified': json['is_customer_notified'],
        'isVisibleOnFront': json['is_visible_on_front'],
        'parentId': json['parent_id'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function SalesDataCreditmemoCommentInterfaceToJSON(value?: SalesDataCreditmemoCommentInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comment': value.comment,
        'created_at': value.createdAt,
        'entity_id': value.entityId,
        'is_customer_notified': value.isCustomerNotified,
        'is_visible_on_front': value.isVisibleOnFront,
        'parent_id': value.parentId,
        'extension_attributes': value.extensionAttributes,
    };
}

