/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataProductLinkInterface,
  ErrorResponse,
  PostV1ProductsSkuLinksRequest,
} from '../models';
import {
    CatalogDataProductLinkInterfaceFromJSON,
    CatalogDataProductLinkInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ProductsSkuLinksRequestFromJSON,
    PostV1ProductsSkuLinksRequestToJSON,
} from '../models';

export interface GetV1ProductsSkuLinksTypeRequest {
    sku: string;
    type: string;
}

export interface PostV1ProductsSkuLinksOperationRequest {
    sku: string;
    postV1ProductsSkuLinksRequest?: PostV1ProductsSkuLinksRequest;
}

/**
 * 
 */
export class CatalogProductLinkManagementV1Api extends runtime.BaseAPI {

    /**
     * Provide the list of links for a specific product
     */
    async getV1ProductsSkuLinksTypeRaw(requestParameters: GetV1ProductsSkuLinksTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataProductLinkInterface>>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling getV1ProductsSkuLinksType.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getV1ProductsSkuLinksType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/links/{type}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataProductLinkInterfaceFromJSON));
    }

    /**
     * Provide the list of links for a specific product
     */
    async getV1ProductsSkuLinksType(requestParameters: GetV1ProductsSkuLinksTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataProductLinkInterface>> {
        const response = await this.getV1ProductsSkuLinksTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign a product link to another product
     */
    async postV1ProductsSkuLinksRaw(requestParameters: PostV1ProductsSkuLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling postV1ProductsSkuLinks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/links`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsSkuLinksRequestToJSON(requestParameters.postV1ProductsSkuLinksRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assign a product link to another product
     */
    async postV1ProductsSkuLinks(requestParameters: PostV1ProductsSkuLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1ProductsSkuLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
