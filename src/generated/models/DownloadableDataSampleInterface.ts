/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DownloadableDataFileContentInterface } from './DownloadableDataFileContentInterface';
import {
    DownloadableDataFileContentInterfaceFromJSON,
    DownloadableDataFileContentInterfaceFromJSONTyped,
    DownloadableDataFileContentInterfaceToJSON,
} from './DownloadableDataFileContentInterface';

/**
 * 
 * @export
 * @interface DownloadableDataSampleInterface
 */
export interface DownloadableDataSampleInterface {
    /**
     * Sample(or link) id
     * @type {number}
     * @memberof DownloadableDataSampleInterface
     */
    id?: number;
    /**
     * Title
     * @type {string}
     * @memberof DownloadableDataSampleInterface
     */
    title: string;
    /**
     * Order index for sample
     * @type {number}
     * @memberof DownloadableDataSampleInterface
     */
    sortOrder: number;
    /**
     * 
     * @type {string}
     * @memberof DownloadableDataSampleInterface
     */
    sampleType: string;
    /**
     * relative file path
     * @type {string}
     * @memberof DownloadableDataSampleInterface
     */
    sampleFile?: string;
    /**
     * 
     * @type {DownloadableDataFileContentInterface}
     * @memberof DownloadableDataSampleInterface
     */
    sampleFileContent?: DownloadableDataFileContentInterface;
    /**
     * file URL
     * @type {string}
     * @memberof DownloadableDataSampleInterface
     */
    sampleUrl?: string;
    /**
     * ExtensionInterface class for @see \Magento\Downloadable\Api\Data\SampleInterface
     * @type {object}
     * @memberof DownloadableDataSampleInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the DownloadableDataSampleInterface interface.
 */
export function instanceOfDownloadableDataSampleInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "sortOrder" in value;
    isInstance = isInstance && "sampleType" in value;

    return isInstance;
}

export function DownloadableDataSampleInterfaceFromJSON(json: any): DownloadableDataSampleInterface {
    return DownloadableDataSampleInterfaceFromJSONTyped(json, false);
}

export function DownloadableDataSampleInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): DownloadableDataSampleInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'title': json['title'],
        'sortOrder': json['sort_order'],
        'sampleType': json['sample_type'],
        'sampleFile': !exists(json, 'sample_file') ? undefined : json['sample_file'],
        'sampleFileContent': !exists(json, 'sample_file_content') ? undefined : DownloadableDataFileContentInterfaceFromJSON(json['sample_file_content']),
        'sampleUrl': !exists(json, 'sample_url') ? undefined : json['sample_url'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function DownloadableDataSampleInterfaceToJSON(value?: DownloadableDataSampleInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'sort_order': value.sortOrder,
        'sample_type': value.sampleType,
        'sample_file': value.sampleFile,
        'sample_file_content': DownloadableDataFileContentInterfaceToJSON(value.sampleFileContent),
        'sample_url': value.sampleUrl,
        'extension_attributes': value.extensionAttributes,
    };
}

