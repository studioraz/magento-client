/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Video Content data interface
 * @export
 * @interface FrameworkDataVideoContentInterface
 */
export interface FrameworkDataVideoContentInterface {
    /**
     * MIME type
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    mediaType: string;
    /**
     * Provider
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    videoProvider: string;
    /**
     * Video URL
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    videoUrl: string;
    /**
     * Title
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    videoTitle: string;
    /**
     * Video Description
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    videoDescription: string;
    /**
     * Metadata
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    videoMetadata: string;
}

/**
 * Check if a given object implements the FrameworkDataVideoContentInterface interface.
 */
export function instanceOfFrameworkDataVideoContentInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mediaType" in value;
    isInstance = isInstance && "videoProvider" in value;
    isInstance = isInstance && "videoUrl" in value;
    isInstance = isInstance && "videoTitle" in value;
    isInstance = isInstance && "videoDescription" in value;
    isInstance = isInstance && "videoMetadata" in value;

    return isInstance;
}

export function FrameworkDataVideoContentInterfaceFromJSON(json: any): FrameworkDataVideoContentInterface {
    return FrameworkDataVideoContentInterfaceFromJSONTyped(json, false);
}

export function FrameworkDataVideoContentInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): FrameworkDataVideoContentInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mediaType': json['media_type'],
        'videoProvider': json['video_provider'],
        'videoUrl': json['video_url'],
        'videoTitle': json['video_title'],
        'videoDescription': json['video_description'],
        'videoMetadata': json['video_metadata'],
    };
}

export function FrameworkDataVideoContentInterfaceToJSON(value?: FrameworkDataVideoContentInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'media_type': value.mediaType,
        'video_provider': value.videoProvider,
        'video_url': value.videoUrl,
        'video_title': value.videoTitle,
        'video_description': value.videoDescription,
        'video_metadata': value.videoMetadata,
    };
}

