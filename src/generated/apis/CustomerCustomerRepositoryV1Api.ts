/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerDataCustomerInterface,
  CustomerDataCustomerSearchResultsInterface,
  ErrorResponse,
  PutV1CustomersCustomerIdRequest,
} from '../models';
import {
    CustomerDataCustomerInterfaceFromJSON,
    CustomerDataCustomerInterfaceToJSON,
    CustomerDataCustomerSearchResultsInterfaceFromJSON,
    CustomerDataCustomerSearchResultsInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1CustomersCustomerIdRequestFromJSON,
    PutV1CustomersCustomerIdRequestToJSON,
} from '../models';

export interface DeleteV1CustomersCustomerIdRequest {
    customerId: number;
}

export interface GetV1CustomersCustomerIdRequest {
    customerId: number;
}

export interface GetV1CustomersSearchRequest {
    searchCriteriaFilterGroups0Filters0Field?: string;
    searchCriteriaFilterGroups0Filters0Value?: string;
    searchCriteriaFilterGroups0Filters0ConditionType?: string;
    searchCriteriaSortOrders0Field?: string;
    searchCriteriaSortOrders0Direction?: string;
    searchCriteriaPageSize?: number;
    searchCriteriaCurrentPage?: number;
}

export interface PutV1CustomersCustomerIdOperationRequest {
    customerId: string;
    putV1CustomersCustomerIdRequest?: PutV1CustomersCustomerIdRequest;
}

export interface PutV1CustomersMeRequest {
    putV1CustomersCustomerIdRequest?: PutV1CustomersCustomerIdRequest;
}

/**
 * 
 */
export class CustomerCustomerRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Delete customer by Customer ID.
     */
    async deleteV1CustomersCustomerIdRaw(requestParameters: DeleteV1CustomersCustomerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling deleteV1CustomersCustomerId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete customer by Customer ID.
     */
    async deleteV1CustomersCustomerId(requestParameters: DeleteV1CustomersCustomerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1CustomersCustomerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customer by Customer ID.
     */
    async getV1CustomersCustomerIdRaw(requestParameters: GetV1CustomersCustomerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataCustomerInterface>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getV1CustomersCustomerId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataCustomerInterfaceFromJSON(jsonValue));
    }

    /**
     * Get customer by Customer ID.
     */
    async getV1CustomersCustomerId(requestParameters: GetV1CustomersCustomerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataCustomerInterface> {
        const response = await this.getV1CustomersCustomerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customer by Customer ID.
     */
    async getV1CustomersMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataCustomerInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataCustomerInterfaceFromJSON(jsonValue));
    }

    /**
     * Get customer by Customer ID.
     */
    async getV1CustomersMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataCustomerInterface> {
        const response = await this.getV1CustomersMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CustomersSearchRaw(requestParameters: GetV1CustomersSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataCustomerSearchResultsInterface>> {
        const queryParameters: any = {};

        if (requestParameters.searchCriteriaFilterGroups0Filters0Field !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][field]'] = requestParameters.searchCriteriaFilterGroups0Filters0Field;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0Value !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][value]'] = requestParameters.searchCriteriaFilterGroups0Filters0Value;
        }

        if (requestParameters.searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
            queryParameters['searchCriteria[filterGroups][0][filters][0][conditionType]'] = requestParameters.searchCriteriaFilterGroups0Filters0ConditionType;
        }

        if (requestParameters.searchCriteriaSortOrders0Field !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][field]'] = requestParameters.searchCriteriaSortOrders0Field;
        }

        if (requestParameters.searchCriteriaSortOrders0Direction !== undefined) {
            queryParameters['searchCriteria[sortOrders][0][direction]'] = requestParameters.searchCriteriaSortOrders0Direction;
        }

        if (requestParameters.searchCriteriaPageSize !== undefined) {
            queryParameters['searchCriteria[pageSize]'] = requestParameters.searchCriteriaPageSize;
        }

        if (requestParameters.searchCriteriaCurrentPage !== undefined) {
            queryParameters['searchCriteria[currentPage]'] = requestParameters.searchCriteriaCurrentPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataCustomerSearchResultsInterfaceFromJSON(jsonValue));
    }

    /**
     * Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CustomersSearch(requestParameters: GetV1CustomersSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataCustomerSearchResultsInterface> {
        const response = await this.getV1CustomersSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update a customer.
     */
    async putV1CustomersCustomerIdRaw(requestParameters: PutV1CustomersCustomerIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataCustomerInterface>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling putV1CustomersCustomerId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomersCustomerIdRequestToJSON(requestParameters.putV1CustomersCustomerIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataCustomerInterfaceFromJSON(jsonValue));
    }

    /**
     * Create or update a customer.
     */
    async putV1CustomersCustomerId(requestParameters: PutV1CustomersCustomerIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataCustomerInterface> {
        const response = await this.putV1CustomersCustomerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update a customer.
     */
    async putV1CustomersMeRaw(requestParameters: PutV1CustomersMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDataCustomerInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/customers/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CustomersCustomerIdRequestToJSON(requestParameters.putV1CustomersCustomerIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDataCustomerInterfaceFromJSON(jsonValue));
    }

    /**
     * Create or update a customer.
     */
    async putV1CustomersMe(requestParameters: PutV1CustomersMeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDataCustomerInterface> {
        const response = await this.putV1CustomersMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
