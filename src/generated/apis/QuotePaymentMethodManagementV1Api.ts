/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PutV1CartsCartIdSelectedpaymentmethodRequest,
  QuoteDataPaymentInterface,
  QuoteDataPaymentMethodInterface,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1CartsCartIdSelectedpaymentmethodRequestFromJSON,
    PutV1CartsCartIdSelectedpaymentmethodRequestToJSON,
    QuoteDataPaymentInterfaceFromJSON,
    QuoteDataPaymentInterfaceToJSON,
    QuoteDataPaymentMethodInterfaceFromJSON,
    QuoteDataPaymentMethodInterfaceToJSON,
} from '../models';

export interface GetV1CartsCartIdPaymentmethodsRequest {
    cartId: number;
}

export interface GetV1CartsCartIdSelectedpaymentmethodRequest {
    cartId: number;
}

export interface PutV1CartsCartIdSelectedpaymentmethodOperationRequest {
    cartId: number;
    putV1CartsCartIdSelectedpaymentmethodRequest?: PutV1CartsCartIdSelectedpaymentmethodRequest;
}

export interface PutV1CartsMineSelectedpaymentmethodRequest {
    putV1CartsCartIdSelectedpaymentmethodRequest?: PutV1CartsCartIdSelectedpaymentmethodRequest;
}

/**
 * 
 */
export class QuotePaymentMethodManagementV1Api extends runtime.BaseAPI {

    /**
     * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CartsCartIdPaymentmethodsRaw(requestParameters: GetV1CartsCartIdPaymentmethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuoteDataPaymentMethodInterface>>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getV1CartsCartIdPaymentmethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}/payment-methods`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuoteDataPaymentMethodInterfaceFromJSON));
    }

    /**
     * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CartsCartIdPaymentmethods(requestParameters: GetV1CartsCartIdPaymentmethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuoteDataPaymentMethodInterface>> {
        const response = await this.getV1CartsCartIdPaymentmethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the payment method for a specified shopping cart.
     */
    async getV1CartsCartIdSelectedpaymentmethodRaw(requestParameters: GetV1CartsCartIdSelectedpaymentmethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteDataPaymentInterface>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getV1CartsCartIdSelectedpaymentmethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}/selected-payment-method`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDataPaymentInterfaceFromJSON(jsonValue));
    }

    /**
     * Returns the payment method for a specified shopping cart.
     */
    async getV1CartsCartIdSelectedpaymentmethod(requestParameters: GetV1CartsCartIdSelectedpaymentmethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteDataPaymentInterface> {
        const response = await this.getV1CartsCartIdSelectedpaymentmethodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CartsMinePaymentmethodsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuoteDataPaymentMethodInterface>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/payment-methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuoteDataPaymentMethodInterfaceFromJSON));
    }

    /**
     * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     */
    async getV1CartsMinePaymentmethods(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuoteDataPaymentMethodInterface>> {
        const response = await this.getV1CartsMinePaymentmethodsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the payment method for a specified shopping cart.
     */
    async getV1CartsMineSelectedpaymentmethodRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteDataPaymentInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/selected-payment-method`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDataPaymentInterfaceFromJSON(jsonValue));
    }

    /**
     * Returns the payment method for a specified shopping cart.
     */
    async getV1CartsMineSelectedpaymentmethod(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteDataPaymentInterface> {
        const response = await this.getV1CartsMineSelectedpaymentmethodRaw(initOverrides);
        return await response.value();
    }

    /**
     * Adds a specified payment method to a specified shopping cart.
     */
    async putV1CartsCartIdSelectedpaymentmethodRaw(requestParameters: PutV1CartsCartIdSelectedpaymentmethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling putV1CartsCartIdSelectedpaymentmethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}/selected-payment-method`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CartsCartIdSelectedpaymentmethodRequestToJSON(requestParameters.putV1CartsCartIdSelectedpaymentmethodRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds a specified payment method to a specified shopping cart.
     */
    async putV1CartsCartIdSelectedpaymentmethod(requestParameters: PutV1CartsCartIdSelectedpaymentmethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.putV1CartsCartIdSelectedpaymentmethodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a specified payment method to a specified shopping cart.
     */
    async putV1CartsMineSelectedpaymentmethodRaw(requestParameters: PutV1CartsMineSelectedpaymentmethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/selected-payment-method`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1CartsCartIdSelectedpaymentmethodRequestToJSON(requestParameters.putV1CartsCartIdSelectedpaymentmethodRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds a specified payment method to a specified shopping cart.
     */
    async putV1CartsMineSelectedpaymentmethod(requestParameters: PutV1CartsMineSelectedpaymentmethodRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.putV1CartsMineSelectedpaymentmethodRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
