/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SalesDataInvoiceCommentSearchResultInterface,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SalesDataInvoiceCommentSearchResultInterfaceFromJSON,
    SalesDataInvoiceCommentSearchResultInterfaceToJSON,
} from '../models';

export interface GetV1InvoicesIdCommentsRequest {
    id: number;
}

export interface PostV1InvoicesIdCaptureRequest {
    id: number;
}

export interface PostV1InvoicesIdEmailsRequest {
    id: number;
}

export interface PostV1InvoicesIdVoidRequest {
    id: number;
}

/**
 * 
 */
export class SalesInvoiceManagementV1Api extends runtime.BaseAPI {

    /**
     * Lists comments for a specified invoice.
     */
    async getV1InvoicesIdCommentsRaw(requestParameters: GetV1InvoicesIdCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesDataInvoiceCommentSearchResultInterface>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getV1InvoicesIdComments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/invoices/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesDataInvoiceCommentSearchResultInterfaceFromJSON(jsonValue));
    }

    /**
     * Lists comments for a specified invoice.
     */
    async getV1InvoicesIdComments(requestParameters: GetV1InvoicesIdCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesDataInvoiceCommentSearchResultInterface> {
        const response = await this.getV1InvoicesIdCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets invoice capture.
     */
    async postV1InvoicesIdCaptureRaw(requestParameters: PostV1InvoicesIdCaptureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1InvoicesIdCapture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/invoices/{id}/capture`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sets invoice capture.
     */
    async postV1InvoicesIdCapture(requestParameters: PostV1InvoicesIdCaptureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.postV1InvoicesIdCaptureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Emails a user a specified invoice.
     */
    async postV1InvoicesIdEmailsRaw(requestParameters: PostV1InvoicesIdEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1InvoicesIdEmails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/invoices/{id}/emails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Emails a user a specified invoice.
     */
    async postV1InvoicesIdEmails(requestParameters: PostV1InvoicesIdEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1InvoicesIdEmailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Voids a specified invoice.
     */
    async postV1InvoicesIdVoidRaw(requestParameters: PostV1InvoicesIdVoidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postV1InvoicesIdVoid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/invoices/{id}/void`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Voids a specified invoice.
     */
    async postV1InvoicesIdVoid(requestParameters: PostV1InvoicesIdVoidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1InvoicesIdVoidRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
