/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventorySourceSelectionApiDataSourceSelectionItemInterface } from './InventorySourceSelectionApiDataSourceSelectionItemInterface';
import {
    InventorySourceSelectionApiDataSourceSelectionItemInterfaceFromJSON,
    InventorySourceSelectionApiDataSourceSelectionItemInterfaceFromJSONTyped,
    InventorySourceSelectionApiDataSourceSelectionItemInterfaceToJSON,
} from './InventorySourceSelectionApiDataSourceSelectionItemInterface';

/**
 * Result of how we will deduct product qty from different Sources
 * @export
 * @interface InventorySourceSelectionApiDataSourceSelectionResultInterface
 */
export interface InventorySourceSelectionApiDataSourceSelectionResultInterface {
    /**
     * 
     * @type {Array<InventorySourceSelectionApiDataSourceSelectionItemInterface>}
     * @memberof InventorySourceSelectionApiDataSourceSelectionResultInterface
     */
    sourceSelectionItems: Array<InventorySourceSelectionApiDataSourceSelectionItemInterface>;
    /**
     * 
     * @type {boolean}
     * @memberof InventorySourceSelectionApiDataSourceSelectionResultInterface
     */
    shippable: boolean;
    /**
     * ExtensionInterface class for @see \Magento\InventorySourceSelectionApi\Api\Data\SourceSelectionResultInterface
     * @type {object}
     * @memberof InventorySourceSelectionApiDataSourceSelectionResultInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the InventorySourceSelectionApiDataSourceSelectionResultInterface interface.
 */
export function instanceOfInventorySourceSelectionApiDataSourceSelectionResultInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sourceSelectionItems" in value;
    isInstance = isInstance && "shippable" in value;

    return isInstance;
}

export function InventorySourceSelectionApiDataSourceSelectionResultInterfaceFromJSON(json: any): InventorySourceSelectionApiDataSourceSelectionResultInterface {
    return InventorySourceSelectionApiDataSourceSelectionResultInterfaceFromJSONTyped(json, false);
}

export function InventorySourceSelectionApiDataSourceSelectionResultInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventorySourceSelectionApiDataSourceSelectionResultInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceSelectionItems': ((json['source_selection_items'] as Array<any>).map(InventorySourceSelectionApiDataSourceSelectionItemInterfaceFromJSON)),
        'shippable': json['shippable'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function InventorySourceSelectionApiDataSourceSelectionResultInterfaceToJSON(value?: InventorySourceSelectionApiDataSourceSelectionResultInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'source_selection_items': ((value.sourceSelectionItems as Array<any>).map(InventorySourceSelectionApiDataSourceSelectionItemInterfaceToJSON)),
        'shippable': value.shippable,
        'extension_attributes': value.extensionAttributes,
    };
}

