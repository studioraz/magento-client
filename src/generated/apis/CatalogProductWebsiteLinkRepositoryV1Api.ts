/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PutV1ProductsSkuWebsitesRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PutV1ProductsSkuWebsitesRequestFromJSON,
    PutV1ProductsSkuWebsitesRequestToJSON,
} from '../models';

export interface DeleteV1ProductsSkuWebsitesWebsiteIdRequest {
    sku: string;
    websiteId: number;
}

export interface PostV1ProductsSkuWebsitesRequest {
    sku: string;
    putV1ProductsSkuWebsitesRequest?: PutV1ProductsSkuWebsitesRequest;
}

export interface PutV1ProductsSkuWebsitesOperationRequest {
    sku: string;
    putV1ProductsSkuWebsitesRequest?: PutV1ProductsSkuWebsitesRequest;
}

/**
 * 
 */
export class CatalogProductWebsiteLinkRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Remove the website assignment from the product by product sku
     */
    async deleteV1ProductsSkuWebsitesWebsiteIdRaw(requestParameters: DeleteV1ProductsSkuWebsitesWebsiteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling deleteV1ProductsSkuWebsitesWebsiteId.');
        }

        if (requestParameters.websiteId === null || requestParameters.websiteId === undefined) {
            throw new runtime.RequiredError('websiteId','Required parameter requestParameters.websiteId was null or undefined when calling deleteV1ProductsSkuWebsitesWebsiteId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/websites/{websiteId}`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))).replace(`{${"websiteId"}}`, encodeURIComponent(String(requestParameters.websiteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove the website assignment from the product by product sku
     */
    async deleteV1ProductsSkuWebsitesWebsiteId(requestParameters: DeleteV1ProductsSkuWebsitesWebsiteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsSkuWebsitesWebsiteIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign a product to the website
     */
    async postV1ProductsSkuWebsitesRaw(requestParameters: PostV1ProductsSkuWebsitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling postV1ProductsSkuWebsites.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/websites`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1ProductsSkuWebsitesRequestToJSON(requestParameters.putV1ProductsSkuWebsitesRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assign a product to the website
     */
    async postV1ProductsSkuWebsites(requestParameters: PostV1ProductsSkuWebsitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.postV1ProductsSkuWebsitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign a product to the website
     */
    async putV1ProductsSkuWebsitesRaw(requestParameters: PutV1ProductsSkuWebsitesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sku === null || requestParameters.sku === undefined) {
            throw new runtime.RequiredError('sku','Required parameter requestParameters.sku was null or undefined when calling putV1ProductsSkuWebsites.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/{sku}/websites`.replace(`{${"sku"}}`, encodeURIComponent(String(requestParameters.sku))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutV1ProductsSkuWebsitesRequestToJSON(requestParameters.putV1ProductsSkuWebsitesRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assign a product to the website
     */
    async putV1ProductsSkuWebsites(requestParameters: PutV1ProductsSkuWebsitesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.putV1ProductsSkuWebsitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
