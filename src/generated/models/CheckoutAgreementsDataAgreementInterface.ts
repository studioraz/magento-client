/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Interface AgreementInterface
 * @export
 * @interface CheckoutAgreementsDataAgreementInterface
 */
export interface CheckoutAgreementsDataAgreementInterface {
    /**
     * Agreement ID.
     * @type {number}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    agreementId: number;
    /**
     * Agreement name.
     * @type {string}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    name: string;
    /**
     * Agreement content.
     * @type {string}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    content: string;
    /**
     * Agreement content height. Otherwise, null.
     * @type {string}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    contentHeight?: string;
    /**
     * Agreement checkbox text.
     * @type {string}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    checkboxText: string;
    /**
     * Agreement status.
     * @type {boolean}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    isActive: boolean;
    /**
     * * true - HTML. * false - plain text.
     * @type {boolean}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    isHtml: boolean;
    /**
     * The agreement applied mode.
     * @type {number}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    mode: number;
    /**
     * ExtensionInterface class for @see \Magento\CheckoutAgreements\Api\Data\AgreementInterface
     * @type {object}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the CheckoutAgreementsDataAgreementInterface interface.
 */
export function instanceOfCheckoutAgreementsDataAgreementInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "agreementId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "checkboxText" in value;
    isInstance = isInstance && "isActive" in value;
    isInstance = isInstance && "isHtml" in value;
    isInstance = isInstance && "mode" in value;

    return isInstance;
}

export function CheckoutAgreementsDataAgreementInterfaceFromJSON(json: any): CheckoutAgreementsDataAgreementInterface {
    return CheckoutAgreementsDataAgreementInterfaceFromJSONTyped(json, false);
}

export function CheckoutAgreementsDataAgreementInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutAgreementsDataAgreementInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'agreementId': json['agreement_id'],
        'name': json['name'],
        'content': json['content'],
        'contentHeight': !exists(json, 'content_height') ? undefined : json['content_height'],
        'checkboxText': json['checkbox_text'],
        'isActive': json['is_active'],
        'isHtml': json['is_html'],
        'mode': json['mode'],
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function CheckoutAgreementsDataAgreementInterfaceToJSON(value?: CheckoutAgreementsDataAgreementInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'agreement_id': value.agreementId,
        'name': value.name,
        'content': value.content,
        'content_height': value.contentHeight,
        'checkbox_text': value.checkboxText,
        'is_active': value.isActive,
        'is_html': value.isHtml,
        'mode': value.mode,
        'extension_attributes': value.extensionAttributes,
    };
}

