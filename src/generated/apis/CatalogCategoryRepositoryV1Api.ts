/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataCategoryInterface,
  ErrorResponse,
  PostV1CategoriesRequest,
} from '../models';
import {
    CatalogDataCategoryInterfaceFromJSON,
    CatalogDataCategoryInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1CategoriesRequestFromJSON,
    PostV1CategoriesRequestToJSON,
} from '../models';

export interface DeleteV1CategoriesCategoryIdRequest {
    categoryId: number;
}

export interface GetV1CategoriesCategoryIdRequest {
    categoryId: number;
    storeId?: number;
}

export interface PostV1CategoriesOperationRequest {
    postV1CategoriesRequest?: PostV1CategoriesRequest;
}

export interface PutV1CategoriesIdRequest {
    id: string;
    postV1CategoriesRequest?: PostV1CategoriesRequest;
}

/**
 * 
 */
export class CatalogCategoryRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Delete category by identifier
     */
    async deleteV1CategoriesCategoryIdRaw(requestParameters: DeleteV1CategoriesCategoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling deleteV1CategoriesCategoryId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete category by identifier
     */
    async deleteV1CategoriesCategoryId(requestParameters: DeleteV1CategoriesCategoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1CategoriesCategoryIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get info about category by category id
     */
    async getV1CategoriesCategoryIdRaw(requestParameters: GetV1CategoriesCategoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataCategoryInterface>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getV1CategoriesCategoryId.');
        }

        const queryParameters: any = {};

        if (requestParameters.storeId !== undefined) {
            queryParameters['storeId'] = requestParameters.storeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataCategoryInterfaceFromJSON(jsonValue));
    }

    /**
     * Get info about category by category id
     */
    async getV1CategoriesCategoryId(requestParameters: GetV1CategoriesCategoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataCategoryInterface> {
        const response = await this.getV1CategoriesCategoryIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create category service
     */
    async postV1CategoriesRaw(requestParameters: PostV1CategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataCategoryInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CategoriesRequestToJSON(requestParameters.postV1CategoriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataCategoryInterfaceFromJSON(jsonValue));
    }

    /**
     * Create category service
     */
    async postV1Categories(requestParameters: PostV1CategoriesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataCategoryInterface> {
        const response = await this.postV1CategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create category service
     */
    async putV1CategoriesIdRaw(requestParameters: PutV1CategoriesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogDataCategoryInterface>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putV1CategoriesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CategoriesRequestToJSON(requestParameters.postV1CategoriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogDataCategoryInterfaceFromJSON(jsonValue));
    }

    /**
     * Create category service
     */
    async putV1CategoriesId(requestParameters: PutV1CategoriesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogDataCategoryInterface> {
        const response = await this.putV1CategoriesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
