/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogDataBasePriceInterface,
  CatalogDataPriceUpdateResultInterface,
  ErrorResponse,
  PostV1ProductsBasepricesRequest,
  PostV1ProductsTierpricesinformationRequest,
} from '../models';
import {
    CatalogDataBasePriceInterfaceFromJSON,
    CatalogDataBasePriceInterfaceToJSON,
    CatalogDataPriceUpdateResultInterfaceFromJSON,
    CatalogDataPriceUpdateResultInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ProductsBasepricesRequestFromJSON,
    PostV1ProductsBasepricesRequestToJSON,
    PostV1ProductsTierpricesinformationRequestFromJSON,
    PostV1ProductsTierpricesinformationRequestToJSON,
} from '../models';

export interface PostV1ProductsBasepricesOperationRequest {
    postV1ProductsBasepricesRequest?: PostV1ProductsBasepricesRequest;
}

export interface PostV1ProductsBasepricesinformationRequest {
    postV1ProductsTierpricesinformationRequest?: PostV1ProductsTierpricesinformationRequest;
}

/**
 * 
 */
export class CatalogBasePriceStorageV1Api extends runtime.BaseAPI {

    /**
     * Add or update product prices. Input item should correspond \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     */
    async postV1ProductsBasepricesRaw(requestParameters: PostV1ProductsBasepricesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataPriceUpdateResultInterface>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/base-prices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsBasepricesRequestToJSON(requestParameters.postV1ProductsBasepricesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataPriceUpdateResultInterfaceFromJSON));
    }

    /**
     * Add or update product prices. Input item should correspond \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     */
    async postV1ProductsBaseprices(requestParameters: PostV1ProductsBasepricesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataPriceUpdateResultInterface>> {
        const response = await this.postV1ProductsBasepricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return product prices. In case of at least one of skus is not found exception will be thrown.
     */
    async postV1ProductsBasepricesinformationRaw(requestParameters: PostV1ProductsBasepricesinformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogDataBasePriceInterface>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/base-prices-information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsTierpricesinformationRequestToJSON(requestParameters.postV1ProductsTierpricesinformationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CatalogDataBasePriceInterfaceFromJSON));
    }

    /**
     * Return product prices. In case of at least one of skus is not found exception will be thrown.
     */
    async postV1ProductsBasepricesinformation(requestParameters: PostV1ProductsBasepricesinformationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogDataBasePriceInterface>> {
        const response = await this.postV1ProductsBasepricesinformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
