/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EavDataAttributeOptionInterface,
  ErrorResponse,
  PostV1ProductsAttributesAttributeCodeOptionsRequest,
} from '../models';
import {
    EavDataAttributeOptionInterfaceFromJSON,
    EavDataAttributeOptionInterfaceToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1ProductsAttributesAttributeCodeOptionsRequestFromJSON,
    PostV1ProductsAttributesAttributeCodeOptionsRequestToJSON,
} from '../models';

export interface DeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest {
    attributeCode: string;
    optionId: string;
}

export interface GetV1ProductsAttributesAttributeCodeOptionsRequest {
    attributeCode: string;
}

export interface PostV1ProductsAttributesAttributeCodeOptionsOperationRequest {
    attributeCode: string;
    postV1ProductsAttributesAttributeCodeOptionsRequest?: PostV1ProductsAttributesAttributeCodeOptionsRequest;
}

/**
 * 
 */
export class CatalogProductAttributeOptionManagementV1Api extends runtime.BaseAPI {

    /**
     * Delete option from attribute
     */
    async deleteV1ProductsAttributesAttributeCodeOptionsOptionIdRaw(requestParameters: DeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling deleteV1ProductsAttributesAttributeCodeOptionsOptionId.');
        }

        if (requestParameters.optionId === null || requestParameters.optionId === undefined) {
            throw new runtime.RequiredError('optionId','Required parameter requestParameters.optionId was null or undefined when calling deleteV1ProductsAttributesAttributeCodeOptionsOptionId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attributes/{attributeCode}/options/{optionId}`.replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters.optionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete option from attribute
     */
    async deleteV1ProductsAttributesAttributeCodeOptionsOptionId(requestParameters: DeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1ProductsAttributesAttributeCodeOptionsOptionIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of attribute options
     */
    async getV1ProductsAttributesAttributeCodeOptionsRaw(requestParameters: GetV1ProductsAttributesAttributeCodeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EavDataAttributeOptionInterface>>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling getV1ProductsAttributesAttributeCodeOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attributes/{attributeCode}/options`.replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EavDataAttributeOptionInterfaceFromJSON));
    }

    /**
     * Retrieve list of attribute options
     */
    async getV1ProductsAttributesAttributeCodeOptions(requestParameters: GetV1ProductsAttributesAttributeCodeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EavDataAttributeOptionInterface>> {
        const response = await this.getV1ProductsAttributesAttributeCodeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add option to attribute
     */
    async postV1ProductsAttributesAttributeCodeOptionsRaw(requestParameters: PostV1ProductsAttributesAttributeCodeOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling postV1ProductsAttributesAttributeCodeOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/products/attributes/{attributeCode}/options`.replace(`{${"attributeCode"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1ProductsAttributesAttributeCodeOptionsRequestToJSON(requestParameters.postV1ProductsAttributesAttributeCodeOptionsRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add option to attribute
     */
    async postV1ProductsAttributesAttributeCodeOptions(requestParameters: PostV1ProductsAttributesAttributeCodeOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.postV1ProductsAttributesAttributeCodeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
