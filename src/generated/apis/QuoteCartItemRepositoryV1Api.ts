/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PostV1CartsQuoteIdItemsRequest,
  QuoteDataCartItemInterface,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostV1CartsQuoteIdItemsRequestFromJSON,
    PostV1CartsQuoteIdItemsRequestToJSON,
    QuoteDataCartItemInterfaceFromJSON,
    QuoteDataCartItemInterfaceToJSON,
} from '../models';

export interface DeleteV1CartsCartIdItemsItemIdRequest {
    cartId: number;
    itemId: number;
}

export interface DeleteV1CartsMineItemsItemIdRequest {
    itemId: number;
}

export interface GetV1CartsCartIdItemsRequest {
    cartId: number;
}

export interface PostV1CartsMineItemsRequest {
    postV1CartsQuoteIdItemsRequest?: PostV1CartsQuoteIdItemsRequest;
}

export interface PostV1CartsQuoteIdItemsOperationRequest {
    quoteId: string;
    postV1CartsQuoteIdItemsRequest?: PostV1CartsQuoteIdItemsRequest;
}

export interface PutV1CartsCartIdItemsItemIdRequest {
    cartId: string;
    itemId: string;
    postV1CartsQuoteIdItemsRequest?: PostV1CartsQuoteIdItemsRequest;
}

export interface PutV1CartsMineItemsItemIdRequest {
    itemId: string;
    postV1CartsQuoteIdItemsRequest?: PostV1CartsQuoteIdItemsRequest;
}

/**
 * 
 */
export class QuoteCartItemRepositoryV1Api extends runtime.BaseAPI {

    /**
     * Removes the specified item from the specified cart.
     */
    async deleteV1CartsCartIdItemsItemIdRaw(requestParameters: DeleteV1CartsCartIdItemsItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling deleteV1CartsCartIdItemsItemId.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteV1CartsCartIdItemsItemId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}/items/{itemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes the specified item from the specified cart.
     */
    async deleteV1CartsCartIdItemsItemId(requestParameters: DeleteV1CartsCartIdItemsItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1CartsCartIdItemsItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the specified item from the specified cart.
     */
    async deleteV1CartsMineItemsItemIdRaw(requestParameters: DeleteV1CartsMineItemsItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteV1CartsMineItemsItemId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/items/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes the specified item from the specified cart.
     */
    async deleteV1CartsMineItemsItemId(requestParameters: DeleteV1CartsMineItemsItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteV1CartsMineItemsItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists items that are assigned to a specified cart.
     */
    async getV1CartsCartIdItemsRaw(requestParameters: GetV1CartsCartIdItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuoteDataCartItemInterface>>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getV1CartsCartIdItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}/items`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuoteDataCartItemInterfaceFromJSON));
    }

    /**
     * Lists items that are assigned to a specified cart.
     */
    async getV1CartsCartIdItems(requestParameters: GetV1CartsCartIdItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuoteDataCartItemInterface>> {
        const response = await this.getV1CartsCartIdItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists items that are assigned to a specified cart.
     */
    async getV1CartsMineItemsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuoteDataCartItemInterface>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuoteDataCartItemInterfaceFromJSON));
    }

    /**
     * Lists items that are assigned to a specified cart.
     */
    async getV1CartsMineItems(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuoteDataCartItemInterface>> {
        const response = await this.getV1CartsMineItemsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add/update the specified cart item.
     */
    async postV1CartsMineItemsRaw(requestParameters: PostV1CartsMineItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteDataCartItemInterface>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CartsQuoteIdItemsRequestToJSON(requestParameters.postV1CartsQuoteIdItemsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDataCartItemInterfaceFromJSON(jsonValue));
    }

    /**
     * Add/update the specified cart item.
     */
    async postV1CartsMineItems(requestParameters: PostV1CartsMineItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteDataCartItemInterface> {
        const response = await this.postV1CartsMineItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add/update the specified cart item.
     */
    async postV1CartsQuoteIdItemsRaw(requestParameters: PostV1CartsQuoteIdItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteDataCartItemInterface>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling postV1CartsQuoteIdItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{quoteId}/items`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CartsQuoteIdItemsRequestToJSON(requestParameters.postV1CartsQuoteIdItemsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDataCartItemInterfaceFromJSON(jsonValue));
    }

    /**
     * Add/update the specified cart item.
     */
    async postV1CartsQuoteIdItems(requestParameters: PostV1CartsQuoteIdItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteDataCartItemInterface> {
        const response = await this.postV1CartsQuoteIdItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add/update the specified cart item.
     */
    async putV1CartsCartIdItemsItemIdRaw(requestParameters: PutV1CartsCartIdItemsItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteDataCartItemInterface>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling putV1CartsCartIdItemsItemId.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling putV1CartsCartIdItemsItemId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/{cartId}/items/{itemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CartsQuoteIdItemsRequestToJSON(requestParameters.postV1CartsQuoteIdItemsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDataCartItemInterfaceFromJSON(jsonValue));
    }

    /**
     * Add/update the specified cart item.
     */
    async putV1CartsCartIdItemsItemId(requestParameters: PutV1CartsCartIdItemsItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteDataCartItemInterface> {
        const response = await this.putV1CartsCartIdItemsItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add/update the specified cart item.
     */
    async putV1CartsMineItemsItemIdRaw(requestParameters: PutV1CartsMineItemsItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteDataCartItemInterface>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling putV1CartsMineItemsItemId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/V1/carts/mine/items/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1CartsQuoteIdItemsRequestToJSON(requestParameters.postV1CartsQuoteIdItemsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDataCartItemInterfaceFromJSON(jsonValue));
    }

    /**
     * Add/update the specified cart item.
     */
    async putV1CartsMineItemsItemId(requestParameters: PutV1CartsMineItemsItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteDataCartItemInterface> {
        const response = await this.putV1CartsMineItemsItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
