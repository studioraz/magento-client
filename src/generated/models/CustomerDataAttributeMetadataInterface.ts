/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomerDataOptionInterface } from './CustomerDataOptionInterface';
import {
    CustomerDataOptionInterfaceFromJSON,
    CustomerDataOptionInterfaceFromJSONTyped,
    CustomerDataOptionInterfaceToJSON,
} from './CustomerDataOptionInterface';
import type { CustomerDataValidationRuleInterface } from './CustomerDataValidationRuleInterface';
import {
    CustomerDataValidationRuleInterfaceFromJSON,
    CustomerDataValidationRuleInterfaceFromJSONTyped,
    CustomerDataValidationRuleInterfaceToJSON,
} from './CustomerDataValidationRuleInterface';

/**
 * Customer attribute metadata interface.
 * @export
 * @interface CustomerDataAttributeMetadataInterface
 */
export interface CustomerDataAttributeMetadataInterface {
    /**
     * HTML for input element.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    frontendInput: string;
    /**
     * Template used for input (e.g. "date")
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    inputFilter: string;
    /**
     * Label of the store.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    storeLabel: string;
    /**
     * Validation rules.
     * @type {Array<CustomerDataValidationRuleInterface>}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    validationRules: Array<CustomerDataValidationRuleInterface>;
    /**
     * Of lines of the attribute value.
     * @type {number}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    multilineCount: number;
    /**
     * Attribute is visible on frontend.
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    visible: boolean;
    /**
     * Attribute is required.
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    required: boolean;
    /**
     * Data model for attribute.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    dataModel: string;
    /**
     * Options of the attribute (key => value pairs for select)
     * @type {Array<CustomerDataOptionInterface>}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    options: Array<CustomerDataOptionInterface>;
    /**
     * Class which is used to display the attribute on frontend.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    frontendClass: string;
    /**
     * Current attribute has been defined by a user.
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    userDefined: boolean;
    /**
     * Attributes sort order.
     * @type {number}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    sortOrder: number;
    /**
     * Label which supposed to be displayed on frontend.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    frontendLabel: string;
    /**
     * The note attribute for the element.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    note: string;
    /**
     * This is a system attribute.
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    system: boolean;
    /**
     * Backend type.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    backendType: string;
    /**
     * It is used in customer grid
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    isUsedInGrid?: boolean;
    /**
     * It is visible in customer grid
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    isVisibleInGrid?: boolean;
    /**
     * It is filterable in customer grid
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    isFilterableInGrid?: boolean;
    /**
     * It is searchable in customer grid
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    isSearchableInGrid?: boolean;
    /**
     * Code of the attribute.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    attributeCode: string;
}

/**
 * Check if a given object implements the CustomerDataAttributeMetadataInterface interface.
 */
export function instanceOfCustomerDataAttributeMetadataInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "frontendInput" in value;
    isInstance = isInstance && "inputFilter" in value;
    isInstance = isInstance && "storeLabel" in value;
    isInstance = isInstance && "validationRules" in value;
    isInstance = isInstance && "multilineCount" in value;
    isInstance = isInstance && "visible" in value;
    isInstance = isInstance && "required" in value;
    isInstance = isInstance && "dataModel" in value;
    isInstance = isInstance && "options" in value;
    isInstance = isInstance && "frontendClass" in value;
    isInstance = isInstance && "userDefined" in value;
    isInstance = isInstance && "sortOrder" in value;
    isInstance = isInstance && "frontendLabel" in value;
    isInstance = isInstance && "note" in value;
    isInstance = isInstance && "system" in value;
    isInstance = isInstance && "backendType" in value;
    isInstance = isInstance && "attributeCode" in value;

    return isInstance;
}

export function CustomerDataAttributeMetadataInterfaceFromJSON(json: any): CustomerDataAttributeMetadataInterface {
    return CustomerDataAttributeMetadataInterfaceFromJSONTyped(json, false);
}

export function CustomerDataAttributeMetadataInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerDataAttributeMetadataInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'frontendInput': json['frontend_input'],
        'inputFilter': json['input_filter'],
        'storeLabel': json['store_label'],
        'validationRules': ((json['validation_rules'] as Array<any>).map(CustomerDataValidationRuleInterfaceFromJSON)),
        'multilineCount': json['multiline_count'],
        'visible': json['visible'],
        'required': json['required'],
        'dataModel': json['data_model'],
        'options': ((json['options'] as Array<any>).map(CustomerDataOptionInterfaceFromJSON)),
        'frontendClass': json['frontend_class'],
        'userDefined': json['user_defined'],
        'sortOrder': json['sort_order'],
        'frontendLabel': json['frontend_label'],
        'note': json['note'],
        'system': json['system'],
        'backendType': json['backend_type'],
        'isUsedInGrid': !exists(json, 'is_used_in_grid') ? undefined : json['is_used_in_grid'],
        'isVisibleInGrid': !exists(json, 'is_visible_in_grid') ? undefined : json['is_visible_in_grid'],
        'isFilterableInGrid': !exists(json, 'is_filterable_in_grid') ? undefined : json['is_filterable_in_grid'],
        'isSearchableInGrid': !exists(json, 'is_searchable_in_grid') ? undefined : json['is_searchable_in_grid'],
        'attributeCode': json['attribute_code'],
    };
}

export function CustomerDataAttributeMetadataInterfaceToJSON(value?: CustomerDataAttributeMetadataInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'frontend_input': value.frontendInput,
        'input_filter': value.inputFilter,
        'store_label': value.storeLabel,
        'validation_rules': ((value.validationRules as Array<any>).map(CustomerDataValidationRuleInterfaceToJSON)),
        'multiline_count': value.multilineCount,
        'visible': value.visible,
        'required': value.required,
        'data_model': value.dataModel,
        'options': ((value.options as Array<any>).map(CustomerDataOptionInterfaceToJSON)),
        'frontend_class': value.frontendClass,
        'user_defined': value.userDefined,
        'sort_order': value.sortOrder,
        'frontend_label': value.frontendLabel,
        'note': value.note,
        'system': value.system,
        'backend_type': value.backendType,
        'is_used_in_grid': value.isUsedInGrid,
        'is_visible_in_grid': value.isVisibleInGrid,
        'is_filterable_in_grid': value.isFilterableInGrid,
        'is_searchable_in_grid': value.isSearchableInGrid,
        'attribute_code': value.attributeCode,
    };
}

