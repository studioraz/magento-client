/* tslint:disable */
/* eslint-disable */
/**
 * Magento Community
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BundleDataLinkInterface } from './BundleDataLinkInterface';
import {
    BundleDataLinkInterfaceFromJSON,
    BundleDataLinkInterfaceFromJSONTyped,
    BundleDataLinkInterfaceToJSON,
} from './BundleDataLinkInterface';

/**
 * Interface OptionInterface
 * @export
 * @interface BundleDataOptionInterface
 */
export interface BundleDataOptionInterface {
    /**
     * Option id
     * @type {number}
     * @memberof BundleDataOptionInterface
     */
    optionId?: number;
    /**
     * Option title
     * @type {string}
     * @memberof BundleDataOptionInterface
     */
    title?: string;
    /**
     * Is required option
     * @type {boolean}
     * @memberof BundleDataOptionInterface
     */
    required?: boolean;
    /**
     * Input type
     * @type {string}
     * @memberof BundleDataOptionInterface
     */
    type?: string;
    /**
     * Option position
     * @type {number}
     * @memberof BundleDataOptionInterface
     */
    position?: number;
    /**
     * Product sku
     * @type {string}
     * @memberof BundleDataOptionInterface
     */
    sku?: string;
    /**
     * Product links
     * @type {Array<BundleDataLinkInterface>}
     * @memberof BundleDataOptionInterface
     */
    productLinks?: Array<BundleDataLinkInterface>;
    /**
     * ExtensionInterface class for @see \Magento\Bundle\Api\Data\OptionInterface
     * @type {object}
     * @memberof BundleDataOptionInterface
     */
    extensionAttributes?: object;
}

/**
 * Check if a given object implements the BundleDataOptionInterface interface.
 */
export function instanceOfBundleDataOptionInterface(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BundleDataOptionInterfaceFromJSON(json: any): BundleDataOptionInterface {
    return BundleDataOptionInterfaceFromJSONTyped(json, false);
}

export function BundleDataOptionInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): BundleDataOptionInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'optionId': !exists(json, 'option_id') ? undefined : json['option_id'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'productLinks': !exists(json, 'product_links') ? undefined : ((json['product_links'] as Array<any>).map(BundleDataLinkInterfaceFromJSON)),
        'extensionAttributes': !exists(json, 'extension_attributes') ? undefined : json['extension_attributes'],
    };
}

export function BundleDataOptionInterfaceToJSON(value?: BundleDataOptionInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'option_id': value.optionId,
        'title': value.title,
        'required': value.required,
        'type': value.type,
        'position': value.position,
        'sku': value.sku,
        'product_links': value.productLinks === undefined ? undefined : ((value.productLinks as Array<any>).map(BundleDataLinkInterfaceToJSON)),
        'extension_attributes': value.extensionAttributes,
    };
}

